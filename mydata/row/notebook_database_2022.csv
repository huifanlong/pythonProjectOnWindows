"9","kakaki","1","0","阿萨d ","阿松大"
"10","kakaki","1","0","打赏的","阿松大"
"11","test","1","0","内容","标题"
"12","2020213338","1","367","在关系数据库中，只考虑有限关系。因为无限关系既不能显示存储，也不能有效地显示","关系数据库只考虑有效关系"
"13","2020213338","1","375","指的是不可再分性","属性的原子性"
"14","2020213338","1","180","可以是有限集，也可以是无限集。
如果域D为有限集，那么D中元素的个数就是它的基数，记作|D|","域"
"15","2020213338","1","206","对于域的操作，多个域进行笛卡尔积之后得到的是它们中各自取一个元素排列组合后得到的域的集合。如果都是有限集，那么笛卡尔积之后得到的集的基数是之前各个集的基数之积","笛卡尔积"
"16","2020213338","1","251","关系r是多个域进行笛卡尔积之后得到的集合的任意子集，n个域笛卡尔积得到的关系叫做n元关系","关系"
"18","2020213381","1","140","关系的逻辑结构就是一张展平的二维表","从用户的角度来看关系"
"19","2020213381","1","286","表头：各列的属性名
其余每行对应一个元组（代表一个实体或者联系）","二维表"
"20","2020213381","1","333","列的顺序改变，每个元组的含义并不会发生改变","列的顺序"
"21","2020213381","1","376","属性的原子性指的是不可再分性，是规范化关系的基本要求","属性的原子性"
"22","2020213381","2","12","实体集又三类码：超码、候选码和主码","实体集的码"
"24","2020213381","2","51","码是指可以标识一个元组的最小的属性集","码"
"25","2020213381","2","67","码+别的属性","超码"
"26","2020213381","2","115","码可能不唯一，在实际中选取的码成为主码，其余的码成为候选码","主码、候选码"
"27","2020213381","2","122","码中出现的属性为主属性，不在任何属性中出现的码称为非主属性","主属性和非主属性"
"28","2020213381","3","23","包括：实体完整性、参照完整性和用户自定义的完整性","关系的完整性约束"
"29","2020213381","3","100","空值不可比较","空值"
"30","2020213381","3","118","主码唯一且不为空","实体完整性"
"31","2020213381","3","252","一张表的非主码属性和另一张表的主码对应，这个属性就是这张表的外码","外码"
"32","2020213381","3","335","参照了就不能不一样，要么为空值，要么就要对应，不能出圈","参照完整性"
"33","2020213381","3","389","value值的范围的约束","用户字定义的完整性"
"34","2020213381","4","41","选择、投影、并、差和笛卡尔积","基本的运算符"
"36","2020213381","4","173","选择是行运算
投影是列运算","选择和投影"
"37","2020213381","4","231","最基本的条件是两个关系又相同的属性","并和差运算"
"38","2020213381","4","266","可以看作是两个关系的属性相加，比如关系A有三个属性，B又两个，笛卡尔积后有5个属性","笛卡尔积"
"39","2020213381","4","302","属性多了，每行的元组排列组合","笛卡尔积"
"40","2020213381","5","38","元组变量即查询目的
元组演算的谓词公式即查询条件","元组关系演算"
"41","2020213308","1","164","具有相同类型的值的集合。分有限集和无穷集。","域"
"42","2020213308","1","184","有限集中元素的个数。","基数"
"43","2020213336","1","174","具有相同数据类型的值的集合都可以被称作域","域"
"44","2020213336","1","205","笛卡尔积后得到的是一个新的集合","笛卡尔积"
"45","2020213336","1","367","原子的即不可再分","关系的属性必须是原子的"
"46","2020213336","2","121","超码是唯一标识一个元组的属性或属性集","超码"
"47","2020213336","2","185","数据库的所有对象","域"
"48","2020213380","2","16","超码、候选码、主码","关系"
"49","2020213308","2","286","关系模式名、诸属性、属性对应的域、映射、属性间的数据依赖","关系模式"
"50","2020213308","2","37","1. 码: 所谓码就是能唯一标识实体的属性，它是整个实体集的性质，而不是单个实体的性质。 2. 超码: 超码是一个或多个属性的集合，这些属性可以让我们在一个实体集中唯一地标识一个实体。 如果K是一个超码，那么K的任意超集也是超码，也就是说如果K是超码，那么所有包含K的集合也是超码。","关系的码"
"51","2020213308","2","147","在数据库的表（关系）中能够用于唯一区分开每个记录（元组）的属性或属性的集合，我们称之为码（候选码）。
当我们指定其中一个用来区分开每个记录（元组）的码为主码。
主属性是指包含在候选码中的属性。","主码"
"52","2020213336","3","17","关系的完整性约束是约束数组的规则","关系的完整性约束"
"54","2020213308","3","389","实体完整性要求每个数据表都必须有主键，而作为主键的所有字段，其属性必须是独一及非空值。

        实体完整性要保证关系中的每个元组都是可识别的和惟一的，指关系数据库中所有的表都必须有主键，

        而且表中不允许存在无主键值的记录和主键值相同的记录。因为实体必须可区分。
","实体完整性"
"55","2020213308","3","93"," 参照完整性也称为引用完整性。参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。

        现实世界中的实体之间往往存在着某种联系，在关系模型中，实体以及实体之间的联系都是用关系来表示的，这样就自然存在着关系与关系之间的引用。

        而参照完整性就是描述实体之间的联系的。参照完整性一般是指多个实体或关系之间的关联关系。
","参照完整性"
"56","2020213308","3","266","用户定义完整性也成为域完整性或语义完整性。用户自定义完整性是针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求。

        实际上就是指明关系中属性的取值范围，防止属性的值与应用语义矛盾。

        关系模型应提供定义和检验这类完整性的机制，以便用统一的系统方法处理它们，而不要由应用程序承担这一功能
","用户定义完整性"
"57","2020213308","4","301","系代数是以关系为运算对象的一组高级运算的集合。由于关系定义为属性个数相同的元组的集合，因此集合代数的操作就可以引入到关系代数中。关系代数中的操作可以分为两类：传统的关系操作，并、差、交、笛卡尔积（乘）、笛卡尔积的逆运算（除）；扩充的关系操作，对关系进行垂直分割（投影）、水平分割（选择）、关系的结合（连接、自然连接）等。
","关系代数"
"58","2020213308","4","29","关系代数操作的结果
　　（a）R∪S   并 （b）R-S    差  （c）R×S   笛卡尔积  （d）πC,A(R)  投影  （e）σB>’4’ (R)  选择","5中基本运算"
"59","2020213308","5","390","（1）并。计算两个关系在集合理论上的并集，即给出关系R和S（两者有相同元/列数），R∪S的元组包括R和S所有元组的集合，形式定义如下：
在这里插入图片描述
式中 t是元组变量（下同）。显然，R∪S=S∪R。","元组关系验算"
"60","2020213308","5","44","差。计算两个关系的区别的集合，即给出关系R和S（两者有相同元/列数），R-S的元组包
括R中有而S中没有的元组的集合，形式定义如下：
在这里插入图片描述","2"
"61","2020213308","5","185","交。计算两个关系集合理论上的交集，即给出关系R和S（两者有相同元/列数），R∩S的元组包括R和S相同元组的集合，形式定义如下：
在这里插入图片描述
显然，R∩S=R-(R-S)和R∩S=S-(S-R)成立。","3"
"62","2020213308","5","354","笛卡尔积。计算两个关系的笛卡尔乘积，令R为有m元的关系，S为有n元的关系，则R×S是m+n元的元组的集合，其前m个元素来自R的一个元组，而后n个元素来自S的一个元组。形成定义如下：
若R有u个元组，S有v个元组，则R×S有u×v个元组。

要记住笛卡尔积的数量是两者的乘积即可，相当于两者排列组合。
","4"
"63","2020213308","5","437","投影。从一个关系中抽取指明的属性（列）
θ连接。θ连接从两个关系的笛卡儿积中选取属性之间满足一定条件的元组
其中A和B分别为R和S上元数相等且可比的属性组。θ为“=”的连接，称为等值连接，","5"
"64","2020213312","1","53","关系的数据结构
关系操纵语言
关系的完整性约束","关系"
"65","2020213312","1","312","关系是元组的集合","关系是元组的集合"
"66","2020213312","2","9","超码、候选码和主码","实体集有三类码"
"67","2020213312","2","48","唯一区分的是码","唯一区分的是码"
"68","2020213312","2","187","R(U,D,DOM,F)各个含义","R(U,D,DOM,F)各个含义"
"69","2020213312","2","275","（伪？）代码","（伪？）代码"
"70","2020213312","3","19","实体完整性、参照完整性和用户自定义的完整性","关系的完整性约束包括"
"71","2020213312","3","33","空值","空值"
"73","2020213312","3","243","外码","外码"
"74","2020213312","4","40","选择、投影、并、差和笛卡尔积","基本运算符（不能被其他运算符表示）"
"75","2020213312","4","50","交、除、连接和自然连接运算","附加运算"
"76","2020213330","1","152","•关系模型只包含单一的数据结构
-关系
•现实世界中的实体集和联系集都用关系表示
•从用户角度来看，关系的逻辑结构就是一张
“展平〞的二维表
•域关系的概念源于数学中的集合论
•从集合论的角度给出关系模型的相关概念","内容"
"77","2020213330","2","0","关系的描述称为关系模式
主码
"," 1"
"78","2020213330","3","408","参照完整性规则：如果属性集厂人是关系R的外码，它参照关
系s的主码人S，则R的任何元组在FK上的值等于S的某个元组
在主码人s上的值，或者为空值","参照完整性"
"79","2020213330","4","307","设R和S分别为八元和m元关系。R和s的笛卡尔积记作RxS，
它是定义为第=（2，…24n2，…，1D","1"
"80","2020213330","5","215","任意•(£)的递归定义
原子公式是公式
设4(（)和4(4)是公式，则-4(,94)
^¢②,9（40V9, （)也是公式
设p（1)是公式，是4（)中的元组变量，
则（3/）9(1)
(1。（也是公式
有限次使用上述规则得到的式子都是公式","1"
"81","2020213338","2","12","有三类码：超码、候选码、主码","实体集"
"82","2020213338","2","54","能唯一表示一个元组，而其真子集不能","码"
"83","2020213338","2","72","码+无关紧要的属性","超码"
"84","2020213338","2","115","从候选码中选出的唯一的码","主码"
"85","2020213338","2","122","码中的属性：主属性
不在任何码中的属性：非主属性","主属性、非主属性"
"86","2020213338","3","17","是一种规则，用于限定数据库中的数据和现实生活中的数据是一致的","完整性约束"
"87","2020213338","3","23","包括实体完整性、参照完整性、用户自定义的完整性","关系的完整性约束"
"88","2020213338","3","115","所有元组在主码上的值必须唯一，并且在主码的任何属性上都不能取空值","实体完整性"
"89","2020213338","3","267","一个和别的关系（或者自己）的主码相对应（含义相同）的属性集","外码"
"90","2020213338","3","328","关系R的外码FK参照关系S的属性集Ks，则R的任何元组在FK上的值等于S的某个元组在主码Ks上的值，或者为空值","参照完整性"
"91","2020213338","3","378","比如成绩必须是100之内的整数、性别只能是男女等……","用户自定义的完整性"
"92","2020213338","4","42","选择、投影、并、差、笛卡尔积","基本运算符"
"93","2020213338","4","51","可以被基本运算表示，包括交、除、连接、自然连接","附加的运算"
"94","2020213338","4","115","选择出符合特定条件的元组。选择的结果形成一个新的关系，与R具有相同的属性","选择"
"95","2020213338","4","165","保留特定的属性","投影"
"96","2020213338","4","183","投影之后需要删除重复行","投影"
"97","2020213338","5","50","选择使得谓词公式为真的元组构成的集合","元组关系演算"
"98","2020213338","5","108","可以通过原子公式、约束变量、自由变量、运算符组成","谓词公式"
"99","2020213338","5","124","判断一个元组是否是关系中的一个元组、元组中的分量进行比较、元组的分量和常量进行比较","原子公式"
"100","2020213338","5","175","若一个元组变量前有全称量词（任意）或存在量词（存在），就说这个元组变量为约束元组变量，否则为自由元组变量","约束变量与自由变量"
"101","2020213338","5","250","算数运算符>存在量词和全称量词>逻辑运算符","谓词公式中运算符的优先级"
"102","2020213310","1","0","域：域是一组具有相同数据类型的值的集合，
笛卡尔积：域上面的一种集合运算；
关系：D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系","域、笛卡尔、关系"
"103","2020213310","2","0","候选码：能惟一标识关系中元组的一个属性或属性集；
主码：从多个候选码中选择一个作为查询、插入或删除元组的操作变量；
全码：关系模式的所有属性组是这个关系模式的候选码；

","《关系的码》"
"104","2020213310","3","0","关系的三类完整性约束：
实体完整性：若属性A是基本关系R的主属性，则属性A不能取空值；
参照完整性：主属性，不能取空值、只能取被参照关系中已经存在的主码值；
用户定义的完整性：应用领域需要遵循的约束条件，体现了具体领域中的语义约束。
","关系的完整性约束"
"105","2020213310","4","0","集合运算符：并∪、差-、交∩、笛卡尔积×
比较运算符：＞≥＜≤＝<> 
专门的关系运算符：σ、π、连接、÷；
逻辑运算符：非、∧、∨","关系代数"
"106","2020213312","7","111","命名空间","命名空间"
"107","2020213312","7","199","例子","例子"
"108","2020213312","8","404","删除例子","删除例子"
"109","2020213312","8","299","修改基本表","修改基本表"
"110","2020213308","6","214","SQL：结构化查询语言，是关系数据库的标准语言，是一个通用的、功能极强的关系数据库语言。","SQL"
"111","2020213308","6","310","1.综合统一:集数据定义语言，数据操纵语言，数据控制语言功能于一体。可以独立完成数据库生命周期中的全部活动。用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。数据操作符统一。
2.面向过程：无须了解存取路径。存取路径的选择以及SQL的操作过程由系统自动完成。
3.SQL采用集合操作方式,操作对象、查找结果可以是元组的集合。一次插入、删除、更新操作的对象可以是元组的集合.
4.SQL是独立的语言能够独立地用于联机交互的使用方式。
5.SQL又是嵌入式语言SQL能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用。
6.SQL功能极强，完成核心功能只用了9个动词。","SQL"
"112","2020213308","7","187","创建
CREATE SCHEMA <模式名> AUTHORIZATION <用户名>[<表定义子句>|<视图定义子句>|<授权定义子句>]","SQL"
"113","2020213308","7","432","删除
DROP SCHEMA <模式名> <CASCADE|RESTRICT>
CASCADE:   删除模式的同时把该模式中所有的数据库对象全部删除
RESTRICT:如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。当该模式中没有任何下属的对象时才能执行。
","SQL"
"114","2020213308","8","195","定义基本表CREATETABLE<表名>（<列名><数据类型>[<列级完整性约束条件>][，<列名><数据类型>[<列级完整性约束条件>]]...[，<表级完整性约束条件>]）；
如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。","基本表"
"115","2020213308","8","412","修改基本表：
ALTERTABLE<表名>[ADD<新列名><数据类型>[完整性约束]][DROP<完整性约束名>][ALTERCOLUMN<列名><数据类型>]；
删除基本表DROP TABLE <表名>［RESTRICT| CASCADE］；
RESTRICT：删除表是有限制的。欲删除的基本表不能被其他表的约束所引用如果存在依赖该表的对象，则此表不能被删除。
CASCADE：删除该表没有限制。在删除基本表的同时，相关的依赖对象一起删除。
","基本表"
"116","2020213308","9","182","SELECT[ALL|DISTINCT]<目标列表达式>[，<目标列表达式>] ...
FROM <表名或视图名>[，<表名或视图名> ] ...
[WHERE<条件表达式>]
[GROUPBY<列名1>
[HAVING<条件表达式>]]
[ORDERBY<列名2>[ASC|DESC]]；","查询"
"117","2020213308","9","460","1.SELECT子句的<目标列表达式>可以为：算术表达式字符串常量函数列别名
  列别名：SELECT Sname NAME；
2.消除取值重复的行：如果没有指定DISTINCT关键词，则缺省为ALL
   SELECT DISTINCT Sno；
","查询"
"118","2020213308","10","180","3.WHERE Sage NOT BETWEEN 20 AND 23；
4.WHERE Sdept NOT IN('IS'，'MA'，'CS');
5.WHERE Sno LIKE‘200215121'；
6.WHERE  Cname LIKE  'DB\\_%i_ _' ESCAPE ' \\‘；ESCAPE '＼' 表示“＼”为换码字符
7.WHERE  Grade IS NULL
8.WHERE Sdept= 'CS' AND Sage<20；","where"
"119","2020213308","11","510","嵌套查询概述
一个SELECT-FROM-WHERE语句称为一个查询块。
将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。","嵌套"
"120","2020213308","11","768","子查询的限制：不能使用ORDER BY子句。
层层嵌套方式反映了SQL语言的结构化，有些嵌套查询可以用连接运算替代。
分为：
不相关子查询：子查询的查询条件不依赖于父查询。由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。
相关子查询：子查询的查询条件依赖于父查询。首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询。","嵌套"
"121","2020213308","12","0","是以新数据项或记录、替换数据文件或数据库中与之相对应的旧数据项或记录的过程，通过删除、修改、再插入的操作来实现。","数据更新"
"122","2020213312","12","510","代码例","代码例"
"123","2020213338","7","46","Data Definition Language
包括模式定义、表定义、视图和索引的定义","DDL"
"124","2020213338","7","65","只支持表和索引的修改操作，不支持模式和视图的修改操作","SQL不支持的修改操作"
"126","2020213338","12","91","如果insert后没有属性名，那么values后要有原来表里的所有属性的值，而且顺序要一致","插入语句"
"127","2020213310","5","0","关系演算以数理逻辑中的谓词演算为基础按谓词变元不同进行分类
1.元组关系演算：以元组变量作为谓词变元的基本对象元组关系演算语言 
  ALPHA
2.域关系演算：以域变量作为谓词变元的基本对象域关系演算语言QBE
","关系演算"
"128","2020213310","6","351","SQL产生与发展：SQL是在1974年由Boyce和Chamberlin提出的，最初叫 
                            Sequel，并在IBM公司研制的关系数据库管理系统原型 
                            System R上实现。
SQL的特点：集数据定义语言（DDL），数据操纵语言（DML），数据控制语 
                      言（DCL）功能于一体。
一、可以独立完成数据库生命周期中的全部活动：定义关系模式，插入数据， 
        建立数据库；
二、对数据库中的数据进行查询和更新；数据库重构和维护数据库安全性、 
       完整性控制等；
三、用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运 
        行；
四、数据操作符统一。
SQL的基本概念：
一、基本表：①本身独立存在的表；②SQL中一个关系就对应一个基本表；③ 
        一个 (或多个)基本表对应一个存储文件；④一个表可以带若干索引；
二、存储文件：逻辑结构组成了关系数据库的内模式、物理结构是任意的，对 
       用户透明；
三、视图：从一个或几个基本表导出的表；数据库中只存放视图的定义而不存 
        放视图对应的数据；视图是一个虚表；用户可以在视图上再定义视图。’
","SQL基本介绍"
"129","2020213310","8","0","关系可以有三种类型：基本关系(又称基本表)、査询表和视图表。
基本表是实际存在的表，它是实际存储数据的逻辑表示；查询表是査询结果对应的表；视图表是由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。
视图是一种虚拟的表，是一个为了简化复杂查询语句的书写，另外也提高了数据库一定的安全性。
查询是利用sql语句按照用户的需求自定义查询，更加灵活，查一次用一次。select查询的是一个结果集（元组的集合），视图是一个虚标。","基本表类型"
"130","2020213310","9","0","数据查询是数据库的核心操作。SQL提供了SELECT语句进行数据查询
SELECT [ALL | DISTINCT]<目标列表达式>[,<目标列表达式>]···
FROM<表名或视图名>[,<表名或视图名>···] | (SELECT语句>)[AS]<别名>
[WHERE<条件表达式>]
[GROUP BY<列名1>[HAVING<条件表达式>]]
[ORDER BY<列名2>[ASC | DESC]];
整个SELECT语句的含义是，根据WHERE子句的条件表达式从FROM子句指定的基本表、视图或派生表中找出满足条件的元组，再按SELECT子句中的目标列表达式选出元组中的属性值形成结果表。
如果有GROUP BY子句，则将结果按<列名1>的值进行分组，该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。如果GROUP BY子句带HAVING短语，则只有满足指定条件的组才予以输出。
如果有ORDER BY子句，则结果还要按<列名2>的值的升序或降序排序。
SELECT语句既可以完成简单的单表查询，也可以完成复杂的连接查询和嵌套查询。","单表查询"
"132","2020213310","11","0","在SQL语言中，一个 SELECT-FROM-WHERE 语句称为一个查询块。将一个查询块嵌套在另一个查询块的 WHERE 子句或 HAVING 短语的条件中的查询称为 嵌套查询。例如：
SELECT Sname  /*外层查询或父查询*/
FROM Student
WHERE Sno IN
    (SELECT Sno  /*内层查询或子查询*/
     FROM SC
     WHERE Cno='2');
SQL语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。","嵌套查询"
"133","2020213310","12","0","SQL UPDATE 语句用于修改数据表中现有的记录（数据行）。UPDATE 通常和 WHERE 子句一起使用，用以筛选满足条件的记录；如果不使用 WHERE 子句，那么表中所有的记录都将被修改；
UPDATE table_name
SET column1 = value1, column2 = value2...., columnN = valueN
WHERE [condition];
","数据更新"
"134","2020213381","6","109","各个软件厂商的数据库对sql的特性支持不同，有多有少","sql的支持"
"135","2020213381","6","180","集
数据定义语言DDL
数据操纵语言DML
数据控制语言DCL
于一体","sql特点-综合统一"
"136","2020213381","6","233","2.高度非过程化
3.面向集合操作","sql特点"
"137","2020213381","7","478","约束完整性关键字 CHECK","约束完整性"
"138","2020213381","8","165","1.在建表时指定
2.直接创建","建立模式的两种方式"
"139","2020213381","8","367","ALTER TABLE Student ADD S_entrance DATE","修改列的操作"
"140","2020213392","9","358","例子：datediff(Year, AB, Getdate())+1
datediff(datepart, startdate, enddate)
Getdate()获取系统当前的日期","用出生年月日计算年龄"
"141","2020213392","12","471","拒绝执行（NO ACTION）；
产生级联操作（全部删除CASCADE）；
设置为空值(SET NULL)","更新操作的完整性检查"
"142","2020213312","16","12","列完整性（域），表完整性（关系）","静态约束"
"143","2020213312","15","0","四个维度的分类","四个维度的分类"
"144","2020213310","13","0","数据库管理系统提供统一的数据保护功能来保证数据的安全可靠和正确有效。数据库的数据保护主要包括数据的安全性和完整性。
数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或损坏。系统安全保护措施是否有效是数据库系统的主要技术指标之一。","数据库安全性"
"145","2020213310","15","0","数据完整性是指数据的精确性和可靠性。它是应防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。数据完整性分为四类：实体完整性、域完整性、参照完整性、用户自定义完整性。
数据库采用多种方法来保证数据完整性，包括外键、约束、规则和触发器。系统很好地处理了这四者的关系，并针对不同的具体情况用不同的方法进行，相互交叉使用，相补缺点。
完整性约束主要有实体完整性约束、参照完整性约束、函数依赖约束、统计约束四类。","数据库完整性概念和分类"
"146","2020213310","16","0","建表的同时通常还可以定义与该表有关的完整性约束条件，这些完整性约束条件被存入系统的数据字典中，当用户操作表中数据时由DBMS自动检查该操作是否违背这些完整性约束条件。
如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。 
表级完整性约束必须定义在列级完整性约束的后面。
常用完整性约束： 
主码约束：    PRIMARY  KEY 
唯一性约束：UNIQUE 
非空值约束：NOT NULL 
参照完整性约束
","表完整性与列完整性"
"147","2020213310","17","0","触发器是一个在修改指定表中的数据时执行的存储过程。经常通过创建触发器来强制实现不同表中的逻辑相关数据的引用完整性或一致性。由于用户不能绕过触发器，所以可以用它来强制实施复杂的业务规则，以此确保数据的完整性。触发器定义在某个创建的表上也可以定义在一个数据库上。
2.触发器和存储过程的区别：
（1）触发器主要时通过事件进行触发而被执行的
（2) 存储过程可以通过存储过程名字而被直接调用
","触发器"
"148","2020213310","18","0","某个属性集决定另一个属性集时，称另一属性集依赖于该属性集。 函数依赖是由数学派生的术语，它表征一个属性或属性集合的值对另一个属性或属性集合的值的依赖性。 需要强调的是，函数依赖是关系所表述信息本身具有的语义特性，而不能由属性构成关系的方式来决定，也不能由关系的当前内容所决定。","函数依赖"
"149","2020213310","19","0","设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。
关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。","范式"
"150","2020213310","20","0","1.由关系模式R的任意关系r分解连接得到的新关系必然包含关系模式R的关系r。
2.关系模式R的任意关系r分解连接得到的新关系，记为S，S再分解得到的各个关系必然等于原来的ri。
3.由关系模式R的关系r分解连接得到的新关系S再次分解连接得到的关系，其必然跟原来的新关系S相同。","模式分解"
"151","2020213310","10","0","1、连接是关系型数据库的主要特点。连接查询是关系型数据库中最主要的查询，主要包括内连接、外连接等 ⑴连接查询：也可以叫跨表查询，需要关联多个表进行查询
2、通过连接运算符可以实现多个表查询
3、在关系数据库管理系统中，表建立时各数据之间的关系不必确定，通常把一个实体的所有信息存放在一个表中
    ⑴当查询数据时，通过连接操作查询出存放在多个表中的不同实体信息
    ⑵当两个或多个表中存在相同意义的字段时，便可以通过这些字段对不同的表进行连接查询","连接查询"
"152","2020213312","18","58","逻辑蕴含","逻辑蕴含"
"153","2020213312","19","810","BCNF","BCNF"
"154","2020213308","13","369","计算机系统安全性▪为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
","安全性"
"155","2020213308","15","0","包括：实体完整性、参照完整性、用户定义的完整性
实体完整性：
插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。
包括：
1. 检查主码值是否唯一，如果不唯一则拒绝插入或修改
2. 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改
进行全表扫描

关系模型的参照完整性定义
在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码
用REFERENCES短语指明这些外码参照哪些表的主码
","完整性"
"156","2020213308","17","0","触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程§由服务器自动激活§可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力","触发器"
"157","2020213330","13","0","数据库的不安全因素
1）非授权用户对数据库的恶意存取和破坏
措施：包括用户身份鉴别、存取控制和视图等技术。
2）数据库中重要或敏感的数据被泄露
措施：强制存取控制、数据加密存储和加密传输等。
3）安全环境的脆弱性
措施：加强计算机系统的安全性保证，建立完善的可信标准（安全标准）。
自主存取控制方法主要通过SQL的GRANT语句和REVOKE语句来实现。
用户权限是由数据库对象和操作类型组成的。定义一个用户的存取权限就是要定义这个用户在那些数据库对象上可以进行那些类型的操作，即定义存取权限（授权）。
在非关系系统中，用户只能对数据进行操作，存取控制的数据库对象也仅限于数据本身；在关系数据库系统中，存取控制的对象不仅有数据本身（基本表中的数据、属性列上的数据），还有数据库模式（数据库、基本表、视图和索引的创建等）。","1"
"158","2020213330","7","0","数据定义语言 DDL是SQL中提供给用户定义DBMS支持的抽象对象的SQL语句
关系数据库系统为抽象对象提供的命名空间
类似于文件系统层次空间,现代DBMS提供了一个层次化的数据库对象命名机制,包括:数据库(或目录)、模式、表.
数据类型主要有INT, SMALLINT,CHAR（n）,ARCHAR(n),DATE,TIME等。
列约束条件有：PRIMARY KEY（主码）;UNIQUE（唯一值）等。
","1"
"159","2020213330","8","0","主键是用于确定数据库中的表的记录的唯一标识字段，可以是一个字段，也可以是多个。
外键是相对于主键来说的，是用于关联两个或以上的表，一个表(参照表)的某字段与另一个表（被参照表）的主键相对应从而建立关系。(保证数据的一致性)
1)NOT NULL或NULL(默认)约束 约束关系主属性必须限定为NOT NULL。
2)UNIQUE约束 唯一性约束条件，不允许出现重复的属性值。
3)DEFAULT约束 默认值约束。
4)CHECK约束 检查约束条件表达式设置属性值应该满足的条件。
","1"
"160","2020213330","9","0","整个SELECT语句的含义是，根据WHERE子句的条件表达式从FROM子句指定的基本表、视图或派生表中找出满足条件的元组，再按SELECT子句中的目标列表达式选出元组中的属性值形成结果表。","1"
"161","2020213330","10","0","连接是关系型数据库的主要特点。连接查询是关系型数据库中最主要的查询，主要包括内连接、外连接等
通过连接运算符可以实现多个表查询
在关系数据库管理系统中，表建立时各数据之间的关系不必确定，通常把一个实体的所有信息存放在一个表中
    ⑴当查询数据时，通过连接操作查询出存放在多个表中的不同实体信息
    ⑵当两个或多个表中存在相同意义的字段时，便可以通过这些字段对不同的表进行连接查询","1"
"162","2020213330","11","0","　嵌套查询的工作方式是：先处理内查询，由内向外处理，外层查询利用内层查询的结果嵌套查询不仅仅可以用于父查询select语句使用。还可以用于insert、update、delete语句或其他子查询中。","1"
"163","2020213330","12","0","UPDATE 表名称 SET 更新字段1=更新值1,更新字段2=更新值2,...[WHERE 更新条件(s)];
DELETE FROM 表名称 [WHERE 删除条件(s)];
INSERT INTO 表名称 [(字段1,字段2,字段3,...)] VALUES(值1,值2,值3,...)","1"
"164","2020213330","15","0","数据库完整性(DB Integrity)是指DBMS应保证的DB的一种特性–在任何情况下的正确性、有效性和一致性。

广义完整性：语义完整性、并发控制、安全控制、DB故障恢复等

狭义完整性：专指语义完整性，DBMS通常有专门的完整性管理机制与程序来处理语义完整性问题。(本讲专指语义完整性)。

关系模型中有完整性要求
实体完整性

参照完整性

用户自定义完整性
、","1"
"165","2020213330","16","0","完整性约束条件的一般形式：Integrity Constraint  ::=(P,O,A,R)
O：数据集合 约束的对象（列，元组，元祖集合）

P：谓词条件：什么样的约束？

A：触发条件：什么时候检查？

R：响应动作：不满足时怎么办？

Col_constr列约束
表约束或列约束的撤消或追加
撤消或追加约束的语句是 Alter Table

示例：撤销course表中的主键约束再添加主键约束

alter table clus drop primary key;#删除

alter table clus add primary key(Cno);#添加","1"
"166","2020213330","17","0","1.优点：
（1）触发器自动执行，它们在表的数据作了任何修改之后立即激活
（2）触发器可以通过数据库中的相关表进行层叠更改。这比直接把代码卸载前台的做法更安全合理
（3）触发器可以强制限制，这些限制比用CHECK约束所定义的更复杂。与CHECK的约束不同的是，触发器可以引用其他表中的列。
2.功能：维护数据的安全性
1.DDL触发器：针对数据库 ，在创建一个表或者修改，删除时会触发DDL这样一个触发器，这个触发器可以防止对数据库架构进行某些更改，希望数据库中发生某种情况以响应数据库架构中的更改，要记录数据架构中的更改或者事件。
2.DML触发器：数据操作语言，它包含三种触发器分别是：
（1）INSERT触发器
（2）UPDATE触发器
（3）DELETE触发器

> CREATE TRIGGER trigger_name  ON{table|view} {  ~   
> {{FOR|AFTER|INSTEAD OF}
>       {[DELETE] [,] [INSERT] [,] UPDATE]}
>          AS 
>          sql_statement
>           }
>       }
","1"
"167","2020213330","18","0","只要属性X的属性值一样（x1=x2） 那么 属性Y中的属性值就一样（y1=y2），就说明Y依赖于X平凡依赖 (trivial  functional dependency)：被所有关系实例都满足的函数依赖成为平凡依赖。一般来说，若β⊆α，则α→β是平凡的，相反，则α→β是不平凡的。

部分依赖：已知α→β，存在α中的真子集可以函数决定β。例如α为(学号，身份证号)，β为(姓名)α中的真子集(学号或者身份证号)可以决定β。

完全依赖：已知α→β，不存在α中的真子集可以函数决定β。例如α为(学号，学校名)，β为(姓名)α中的真子集(单独的学号或者学校名)不能决定β。

传递依赖：若α→β且β→γ，则α→γ。例如α为学号，β为学院，γ为院长。","1"
"168","2020213330","19","0"," 属于第一范式关系的所有属性都不可再分，即数据项不可分。
若某关系R属于第一范式，且每一个非主属性完全函数依赖于任何一个候选码，则关系R属于第二范式。判断一个关系是否属于第二范式：、
非主属性既不传递依赖于码，也不部分依赖于码。
 限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。
第五范式有以下要求：
（1）必须满足第四范式；
（2）表必须可以分解为较小的表，除非那些表在逻辑上拥有与原始表相同的主键。

找出数据表中的所有码；
找出所有主属性和非主属性；
判断所有的非主属性对码的部分函数依赖。","1"
"169","2020213330","20","0","把关系模式R分解成k个关系模式，k个关系模式的的集合就是p={R1（U1），R2（U2），R3（U3），…，Rk（Uk）}，

而U = U1∪U2∪U3∪…∪Uk。

每一个小的关系模式对应的关系（r1，r2，r3，r4，…，rk），它们也相当于R的关系r分别在R1，R2…上的投影，

把这些投影连接起来
数据内容的等价性：
理解：

1.由关系模式R的任意关系r分解连接得到的新关系必然包含关系模式R的关系r。

2.关系模式R的任意关系r分解连接得到的新关系，记为S，S再分解得到的各个关系必然等于原来的ri。

3.由关系模式R的关系r分解连接得到的新关系S再次分解连接得到的关系，其必然跟原来的新关系S相同。
","1"
"170","2020213330","21","0","在需求分析阶段所得到的应用需求应该首先抽象为信息世界的结构，然后才能更改、更准确地用某一数据库管理系统实现这些需求。
概念模型的主要特点：
1. 能真实、充分地反映现实世界，包括事物和事物之间的联系，能满足用户对数据的处理要求，是现实世界的一个真是模型。
2. 易于理解，可以用它和不熟悉计算机的用户交换意见。用户的积极参与是数据库设计成功的关键。
3. 易于更改，当应用环境和应用要求改变时容易对概念模型修改和扩充。
4. 易于向关系、网状、层次等各种数据模型转换。
概念模型是各种数据模型的共同基础，它比数据模型更独立于机器、更抽象，从而更加稳定。描述概念模型的有力工具是E-R模型。
概念结构设计的第一步就是对需求分析阶段收集到的数据进行分类、组织，确定实体、实体的属性、实体之间的联系类型，形成E-R图。","1"
"171","2020213330","22","0","概念结构设计依据对于现实世界的关系的调研、了解、分析而后得到的实体对象有哪些，对象有哪些特征，它们之间的关系是1对1，还是1对多，多对多。上述问题都梳理清楚后，就可以用关系图的方式表现出来概念结构，即实体关系图（E-R图）。逻辑结构设计依据实体关系图可以得到有多少个实体，每个实体包含哪些属性（特征），实体与实体间的关系可通过哪些属性进行关联（这些实体间共有的属性就是主键或外键）。这就得到了关系模式，即：XX关系模式（XX属性1，XX属性2，……）。再根据关系规范化理论，将关系进行优化，消除数据冗余、插入异常、删除异常得到相对高级范式，满足数据的正常处理。
物理结构即将逻辑结构中优化过的关系模式转化成一张张数据库中的关系表，每个属性用合适的类型和长度存储，并设置主键和相关约束，即可完成数据的设计，满足应用程序对于数据的存储、插入、删除要求。","1"
"172","2020213330","23","0","一、数据的载入和应用程序的调试
二、数据库的试运行
三、数据库的运行和维护
1. 数据库的转储和恢复
数据库的转储与恢复是系统正式运行后最重要的维护工作之一。

2. 数据库的安全性、完整性控制
在数据库运行过程中，由于应用环境的变化，对安全性的要求也会发生变化，系统中用户的密级也会改变，需要数据库管理员不断修正以满足用户要求。

3. 数据库性能的监督、分析和改造
在数据库运行过程中，监督系统运行，对监测数据进行分析，找出改进系统性能的方法是数据库管理员的又一重要任务。

4、数据库的重组织与重构造
1. 数据库的转储和恢复
数据库的转储与恢复是系统正式运行后最重要的维护工作之一。

2. 数据库的安全性、完整性控制
在数据库运行过程中，由于应用环境的变化，对安全性的要求也会发生变化，系统中用户的密级也会改变，需要数据库管理员不断修正以满足用户要求。

3. 数据库性能的监督、分析和改造
在数据库运行过程中，监督系统运行，对监测数据进行分析，找出改进系统性能的方法是数据库管理员的又一重要任务。

4、数据库的重组织与重构造
由于数据库应用环境发生变化，增加了新的应用或新的实体，取消了某些应用，有的实体与实体间的联系也发生了变化等，使原有的数据库设计不能满足新的需求，需要调整数据库的模式和内模式。
数据库的重构也是有限的，只能做部分修改。如果应用变化太大，重构也无济于事，说明此数据库应用系统的生命周期已经结束，应该设计新的数据库应用系统了。
","1"
"173","2020213343","22","0","数据库逻辑设计结构不是唯一的。
逻辑设计的结果是唯一的？？","1"
"174","2020213312","21","271","三个冲突","三个冲突"
"175","2020213312","21","514","消除冗余方法","消除冗余方法"
"176","2020213312","22","25","步骤","步骤"
"177","2020213312","22","230","物理结构设计","物理结构设计"
"178","2020213308","18","270","函数依赖：
若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称“X函数确定Y” 或“Y函数依赖于X”，记作X→Y。
平凡函数依赖与非平凡函数依赖：如果X→Y，但Y不属于X，则称X→Y是非平凡的函数依赖若X→Y，但Y属于X,   则称X→Y是平凡的函数依赖。
若X→Y，则X称为这个函数依赖的决定属性组，也称为决定因素。","函数依赖"
"179","2020213308","19","861","范式是符合某一种级别的关系模式的集合v关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。
关系数据库的规范化理论是数据库逻辑设计的工具。
目的：尽量消除插入、删除一场，修改复杂，数据冗余。
基本思想：逐步消除数据依赖中不合适的部分。
实质：概念的单一化。","范式"
"180","2020213308","20","84","关系模式由五部分组成，即它是一个五元组：R(U, D, DOM, F)R：关系名U：组成该关系的属性名集合D：属性组U中属性所来自的域DOM：属性向域的映象集合F：属性间数据的依赖关系集合。","模式分解"
"181","2020213308","21","0","数据库设计是指对于一个给定的应用环境，构造（设计）优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。
目标：为用户和各种应用系统提供一个信息基础设施和高效率的运行环境。","结构设计"
"182","2020213308","22","213","方法：
手工与经验相结合方法、规范设计法、新奥尔良方法、基于E-R模型的数据库设计方法、3NF（第三范式）的设计方法、ODL方法、计算机辅助设计。
数据库设计分6个阶段：
1.需求分析2.概念结构设计3.逻辑结构设计4.物理结构设计5.数据库实施6.数据库运行和维护。","设计"
"183","2020213308","23","155","数据库试运行主要工作包括：1）功能测试§实际运行数据库应用程序，执行对数据库的各种操作，测试应用程序的功能是否满足设计要求§如果不满足，对应用程序部分则要修改、调整，直到达到设计要求2）性能测试§测量系统的性能指标，分析是否达到设计目标§如果测试的结果与设计目标不符，则要返回物理设计阶段，重新调整物理结构，修改系统参数，某些情况下甚至要返回逻辑设计阶段，修改逻辑结构","试运行"
