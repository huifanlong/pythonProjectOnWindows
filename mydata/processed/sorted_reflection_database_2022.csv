uid,content,title,time
2020213241,"1.1 数据库系统概述
1.1.1四个基本概念
数据(Data)数据库(Database)数据库管理系统(DBMS)数据库系统(DBS)

一、数据
（1）数据(Data)是数据库中存储的基本对象
（2）数据的定义：描述事物的符号记录
（3）数据的种类: 文本、图形、图像、音频、视频、学生的档案记录、货物的运输情况等
（4）数据的特点: 数据与其语义是不可分的

二、数据库
（1）数据库的定义：数据库(Database,简称DB)是长期储存在计算机内、有组织的、可共享的大量数据的集合。
（2）数据库的基本特征：数据按一定的数据模型组织、描述和储存；可为各种用户共享；冗余度较小；数据独立性较高；易扩展

三、数据库管理系统
（1）DBMS（DataBase Management System）:位于用户与操作系统之间的一层数据管理软件。是基础软件，是一个大型复杂的软件系统
（2）DBMS的用途:科学地组织和存储数据、高效地获取和维护数据
（3）DBMS的主要功能：数据定义功能；数据组织、存储和管理；数据操纵功能；数据库的事务管理和运行管理；数据库的建立和维护功能(实用程序)

四、数据库管理系统
（1）数据库系统（Database System，简称DBS）：在计算机系统中引入数据库后的系统构成
（2）数据库系统的构成：数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员

1.2 数据模型  
1.2.1 两大类数据模型
（1）在数据库中用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息。通俗地讲数据模型就是现实世界的模拟。
（2）数据模型应满足三方面要求：能比较真实地模拟现实世界、容易为人所理解、便于在计算机上实现
（3）数据模型分为两类（分属两个不同的层次）
1.概念模型也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。	2.逻辑模型和物理模型。逻辑模型主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于DBMS实现。物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。

1.2.2 数据模型的组成要素
数据结构数据操作完整性约束条件

一、数据结构
（1）数据结构：描述数据库的组成对象，以及对象之间的联系
（2）描述的内容
与数据类型、内容、性质有关的对象
与数据之间联系有关的对象数据结构是对系统静态特性的描述

二、数据操作
（1）数据操作：对数据库中各种对象(型)的实例(值)允许执行的操作及有关的操作规则
（2）数据操作的类型：查询、更新(包括插入、删除、修改)

三、数据的完整性约束条件
（1）数据的完整性约束条件：
一组完整性规则的集合。
完整性规则：给定的数据模型中数据及其联系所具有的制约和储存规则
用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。

1.2.3 概念模型
一、信息世界中的基本概念
(1)实体（Entity）客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。
(2)属性（Attribute）实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画。
(3)码（Key）唯一标识实体的属性集称为码。
(4)域（Domain）属性的取值范围称为该属性的域。
(5)实体型（Entity Type）用实体名及其属性名集合来抽象和刻画同类实体称为实体型
(6)实体集（Entity Set）同一类型实体的集合称为实体集
(7) 联系（Relationship）现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。实体内部的联系通常是指组成实体的各属性之间的联系实体之间的联系通常是指不同实体集之间的联系

二、两个实体型之间的联系
1:1联系 1:n联系 m:n联系
实体－联系方法(E-R方法)：用E-R图来描述现实世界的概念模型。E-R方法也称为E-R模型",第一章绪论1.1 数据库系统概述1.2 数据模型,2022-09-11 20:05:09
2020213241,"1.2.4最常用的数据模型
（1）非关系模型
层次模型
网状模型
（2）关系模型  
（3）面向对象模型
（4）对象关系模型
1.2.5层次模型：
（1）层次模型是数据库系统中最早出现的数据模型
（2）层次数据库系统的典型代表是IBM公司的IMS数据库管理系统
（3）层次模型用树形结构来表示各类实体以及实体间的联系
（4）满足下面两个条件的基本层次联系的集合为层次模型：1. 有且只有一个结点没有双亲结点，这个结点称为根结点2. 根以外的其它结点有且只有一个双亲结点
（5）层次模型中的几个术语根结点，双亲结点，兄弟结点，叶结点

优点：
（1）层次模型的数据结构比较简单清晰
（2）查询效率高，性能优于关系模型，不低于网状模型
（3）层次数据模型提供了良好的完整性支持
缺点：
（1）多对多联系表示不自然
（2）对插入和删除操作的限制多，应用程序的编写比较复杂
（3）查询子女结点必须通过双亲结点
（4）由于结构严密，层次命令趋于程序化

多对多联系在层次模型中的表示：用层次模型间接表示多对多联系
方法：将多对多联系分解成一对多联系
分解方法：冗余结点法 虚拟结点法

层次模型的完整性约束条件
（1）无相应的双亲结点值就不能插入子女结点值
（2）如果删除双亲结点值，则相应的子女结点值也被同时删除
（3）更新操作时，应更新所有相应记录，以保证数据的一致性

邻接法：
按照层次树前序遍历的顺序把所有记录值依次邻接存放，即通过物理空间的位置相邻来实现层次顺序
链接法：
用指引来反映数据之间的层次联系
子女－兄弟链接法
层次序列链接法
1.2.6网状模型
网状数据库系统采用网状模型作为数据的组织方式
典型代表是DBTG系统
网状模型满足下面两个条件的基本层次联系的集合：
1.允许一个以上的结点无双亲；2. 一个结点可以有多于一个的双亲。

网状模型与层次模型的区别
（1）网状模型允许多个结点没有双亲结点
（2）网状模型允许结点有多个双亲结点
（3）网状模型允许两个结点之间有多种联系（复合联系）
（4）网状模型可以更直接地去描述现实世界
（5）层次模型实际上是网状模型的一个特例

多对多联系在网状模型中的表示：用网状模型间接表示多对多联系
方法：将多对多联系直接分解成一对多联系
优点：
（1）能够更为直接地描述现实世界，如一个结点可以有多个双亲
（2）  具有良好的性能，存取效率较高
缺点：
（1）结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握
（2）DDL、DML语言复杂，用户不容易使用
1.2.7 关系模型
关系数据库系统采用关系模型作为数据的组织方式
1970年美国IBM公司San Jose研究室的研究员E.F.Codd首次提出了数据库系统的关系模型
计算机厂商新推出的数据库管理系统几乎都支持关系模型

关系（Relation）一个关系对应通常说的一张表
元组（Tuple）表中的一行即为一个元组
属性（Attribute）表中的一列即为一个属性，给每一个属性起一个名称即属性名
主码（Key）表中的某个属性组，它可以唯一确定一个元组。
域（Domain）属性的取值范围。
分量：元组中的一个属性值。
关系模式：对关系的描述关系名（属性1，属性2，...，属性n）学生（学号，姓名，年龄，性别，系，年级）


关系的完整性约束条件实体完整性参照完整性用户定义的完整性
优点：
（1）建立在严格的数学概念的基础上
（2）概念单一
实体和各类联系都用关系来表示
对数据的检索结果也是关系
（3）关系模型的存取路径对用户透明
具有更高的数据独立性，更好的安全保密性
简化了程序员的工作和数据库开发建立的工作
缺点：
（1）存取路径对用户透明导致查询效率往往不如非关系数据模型
（2）  为提高性能，必须对用户的查询请求进行优化增加了开发DBMS的难度
1.3 数据库系统结构
从数据库管理系统角度看，数据库系统通常采用三级模式结构，是数据库系统内部的系统结构
从数据库最终用户角度看（数据库系统外部的体系结构），数据库系统的结构分为:单用户结构主从式结构分布式结构客户／服务器浏览器／应用服务器／数据库服务器多层结构等
型(Type)对某一类数据的结构和属性的说明值(Value)是型的一个具体赋值
模式的定义数据的逻辑结构（数据项的名字、类型、取值范围等）数据之间的联系数据有关的安全性、完整性要求
外模式（也称子模式或用户模式）数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述数据库用户的数据视图，是与某一应用有关的数据的逻辑表示
内模式（也称存储模式）是数据物理结构和存储方式的描述是数据在数据库内部的表示方式
记录的存储方式（顺序存储，按照B树结构存储，按hash方法存储）
索引的组织方式
数据是否压缩存储
数据是否加密
数据存储记录结构的规定
一个数据库只有一个内模式
1.4 数据库系统的组成
数据库数据库管理系统（及其开发工具）应用系统数据库管理员 硬件平台及数据库软件人员",第一章剩下全部,2022-09-14 20:33:07
2020213241,"第二章：关系数据库
2.1  关系数据结构及形式化定义2.2  关系操作2.3  关系的完整性2.4  关系代数2.5  关系演算2.6  小结
2.1  关系数据结构及形式化定义
2.1.1  关系2.1.2  关系模式2.1.3  关系数据库
2.1.1关系
单一的数据结构----关系 现实世界的实体以及实体间的各种联系均用关系来表示
逻辑结构----二维表从用户角度，关系模型中数据的逻辑结构是一张二维表建立在集合代数的基础上
1.域（Domain）2.笛卡尔积（CartesianProduct）3.关系（Relation）
域是一组具有相同数据类型的值的集合。笛卡尔积：给定一组域D1，D2，...，Dn，这些域中可以有相同的。D1，D2，...，Dn的笛卡尔积为：D1×D2×...×Dn＝｛（d1，d2，...，dn）｜diDi，i＝1，2，...，n｝所有域的所有取值的一个组合不能重复
元组（Tuple）：笛卡尔积中每一个元素（d1，d2，...，dn）叫作一个n元组（n-tuple）或简称元组(Tuple)
分量（Component）：笛卡尔积元素（d1，d2，...，dn）中的每一个值di叫作一个分量
基数（Cardinalnumber）：若Di（i＝1，2，...，n）为有限集，其基数为mi（i＝1，2，...，n）
笛卡尔积的表示方法：笛卡尔积可表示为一个二维表表中的每行对应一个元组，表中的每列对应一个域
D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系，表示为R（D1，D2，...，Dn）R：关系名n：关系的目或度（Degree）
元组关系中的每个元素是关系中的元组，通常用t表示。当n=1时，称该关系为单元关系（Unaryrelation）或一元关系当n=2时，称该关系为二元关系（Binaryrelation）
关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域
关系中不同列可以对应相同的域为了加以区分，必须对每列起一个名字，称为属性（Attribute）n目关系必有n个属性
候选码（Candidatekey）若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码简单的情况：候选码只包含一个属性全码（All-key）最极端的情况：关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）
主码若一个关系有多个候选码，则选定其中一个为主码（Primarykey）主属性候选码的诸属性称为主属性（Primeattribute）不包含在任何侯选码中的属性称为非主属性（Non-Primeattribute）或非码属性（Non-keyattribute）

2.1.2  关系模式1．什么是关系模式2．定义关系模式3.  关系模式与关系
关系模式（RelationSchema）是型关系是值关系模式是对关系的描述元组集合(关系)的结构属性构成属性来自的域属性与域之间的映象关系元组语义以及完整性约束条件属性间的数据依赖关系集合
关系模式对关系的描述静态的、稳定的关系关系模式在某一时刻的状态或内容动态的、随时间不断变化的关系模式和关系往往统称为关系通过上下文加以区别
2.1.3  关系数据库
关系数据库在一个给定的应用领域中，所有关系的集合构成一个关系数据库关系数据库的型与值
关系数据库的型:关系数据库模式对关系数据库的描述。关系数据库模式包括若干域的定义在这些域上定义的若干关系模式关系数据库的值:关系模式在某一时刻对应的关系的集合，简称为关系数据库
常用的关系操作查询：选择、投影、连接、除、并、交、差数据更新：插入、删除、修改查询的表达能力是其中最主要的部分选择、投影、并、差、笛卡尔基是5种基本操作关系操作的特点集合操作方式：操作的对象和结果都是集合，一次一集合的方式",第二章 关系数据库,2022-11-08 14:42:54
2020213241,"2.3.1  关系的三类完整性约束实体完整性和参照完整性：关系模型必须满足的完整性约束条件称为关系的两个不变性，应该由关系系统自动支持用户定义的完整性：应用领域需要遵循的约束条件，体现了具体领域中的语义约束
规则2.1实体完整性规则（EntityIntegrity）若属性A是基本关系R的主属性，则属性A不能取空值
实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。(2)现实世界中的实体是可区分的，即它们具有某种唯一性标识。(3)关系模型中以主码作为唯一性标识。(4)主码中的属性即主属性不能取空值。主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性
在关系模型中实体及实体间的联系都是用关系来描述的，因此可能存在着关系与关系间的引用
设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是基本关系R的外码基本关系R称为参照关系（ReferencingRelation）基本关系S称为被参照关系（ReferencedRelation）或目标关系（TargetRelation）
关系R和S不一定是不同的关系目标关系S的主码Ks 和参照关系的外码F必须定义在同一个（或一组）域上外码并不一定要与相应的主码同名当外码与相应的主码属于不同关系时，往往取相同的名字，以便于识别
规则2.2参照完整性规则若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：或者取空值（F的每个属性值均为空值）或者等于S中某个元组的主码值
R和S具有相同的目n（即两个关系都有n个属性）相应的属性取自同一个域R∪S仍为n目关系，由属于R或属于S的元组组成R∪S={t|tR∨tS}
R和S具有相同的目n相应的属性取自同一个域R-S仍为n目关系，由属于R而不属于S的所有元组组成R-S={t|tR∧tS}
R和S具有相同的目n相应的属性取自同一个域R∩S仍为n目关系，由既属于R又属于S的元组组成R∩S={t|tR∧tS}R∩S=R–(R-S）
严格地讲应该是广义的笛卡尔积（ExtendedCartesianProduct）R:n目关系，k1个元组S:m目关系，k2个元组R×S列：（n+m）列元组的集合•元组的前n列是关系R的一个元组•后m列是关系S的一个元组行：k1×k2个元组•R×S={trts|trR∧tsS}",第二章 关系数据库（续1）,2022-11-08 14:47:40
2020213241,"R，tR，t[Ai]设关系模式为R(A1，A2，...，An)它的一个关系设为RtR表示t是R的一个元组t[Ai]则表示元组t中相应于属性Ai的一个分量
若A={Ai1，Ai2，...，Aik}，其中Ai1，Ai2，...，Aik是A1，A2，...，An中的一部分，则A称为属性列或属性组。t[A]=(t[Ai1]，t[Ai2]，...，t[Aik])表示元组t在属性列A上诸分量的集合。A则表示{A1，A2，...，An}中去掉{Ai1，Ai2，...，Aik}后剩余的属性组。
R为n目关系，S为m目关系。tr R，tsS，tr ts称为元组的连接。tr ts是一个n+ m列的元组，前n个分量为R中的一个n元组，后m个分量为S中的一个m元组。
给定一个关系R（X，Z），X和Z为属性组。当t[X]=x时，x在R中的象集（ImagesSet）为：Zx={t[Z]|tR，t[X]=x}它表示R中属性组X上值为x的诸元组在Z上分量的集合
选择又称为限制（Restriction）2)选择运算符的含义在关系R中选择满足给定条件的诸元组σF(R)={t|tR∧F(t)='真'}F：选择条件，是一个逻辑表达式，基本形式为：X1θY1
选择运算是从关系R中选取使逻辑表达式F为真的元组，是从行的角度进行的运算σ
从R中选择出若干属性列组成新的关系πA(R)={t[A]|tR}A：R中的属性列
投影操作主要是从列的角度进行运算但投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）
连接也称为θ连接2）连接运算的含义从两个关系的笛卡尔积中选取属性间满足一定条件的元组RS={|trR∧tsS∧tr[A]θts[B]}A和B：分别为R和S上度数相等且可比的属性组θ：比较运算符连接运算从R和S的广义笛卡尔积R×S中选取（R关系）在A属性组上的值与（S关系）在B属性组上值满足比较关系θ的元组AθBtr ts
等值连接（equijoin）什么是等值连接θ为“＝”的连接运算称为等值连接等值连接的含义从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组，即等值连接为：R    S= {          | trR∧ts S∧tr[A] = ts[B] }  A=Btr ts
自然连接是一种特殊的等值连接两个关系中进行比较的分量必须是相同的属性组在结果中把重复的属性列去掉•自然连接的含义R和S具有相同的属性组BRS= {         | tr R∧ts S∧tr[B] = ts[B] } 
一般的连接操作是从行的角度进行运算。自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。
外连接如果把舍弃的元组也保存在结果关系中，而在其他属性上填空值(Null)，这种连接就叫做外连接（OUTER JOIN）。左外连接如果只把左边关系R中要舍弃的元组保留就叫做左外连接(LEFT OUTER JOIN或LEFT JOIN)右外连接如果只把右边关系S中要舍弃的元组保留就叫做右外连接(RIGHT OUTER JOIN或RIGHT JOIN)。
关系代数运算并、差、交、笛卡尔积、投影、选择、连接、除基本运算并、差、笛卡尔积、投影、选择交、连接、除可以用5种基本运算来表达引进它们并不增加语言的能力，但可以简化表达
关系数据库系统是目前使用最广泛的数据库系统关系数据库系统与非关系数据库系统的区别：关系系统只有“表”这一种数据结构；非关系数据库系统还有其他数据结构，以及对这些数据结构的操作
",第二章 关系数据库（续2）,2022-11-08 14:52:54
2020213241,"第三章关系数据库标准语言SQL
SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言SQL是一个通用的、功能极强的关系数据库语言
3.1.2  SQL的特点1.综合统一集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体。可以独立完成数据库生命周期中的全部活动：定义关系模式，插入数据，建立数据库；对数据库中的数据进行查询和更新；数据库重构和维护数据库安全性、完整性控制等用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。数据操作符统一
非关系数据模型的数据操纵语言“面向过程”，必须制定存取路径SQL只要提出“做什么”，无须了解存取路径。存取路径的选择以及SQL的操作过程由系统自动完成。
非关系数据模型采用面向记录的操作方式，操作对象是一条记录SQL采用集合操作方式操作对象、查找结果可以是元组的集合一次插入、删除、更新操作的对象可以是元组的集合
SQL是独立的语言能够独立地用于联机交互的使用方式SQL又是嵌入式语言SQL能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用
SQL功能极强，完成核心功能只用了9个动词
基本表本身独立存在的表SQL中一个关系就对应一个基本表一个(或多个)基本表对应一个存储文件一个表可以带若干索引存储文件逻辑结构组成了关系数据库的内模式物理结构是任意的，对用户透明视图从一个或几个基本表导出的表数据库中只存放视图的定义而不存放视图对应的数据视图是一个虚表用户可以在视图上再定义视图
SQL的数据定义功能: 模式定义、表定义、视图和索引的定义
一、定义基本表CREATETABLE<表名>（<列名><数据类型>[<列级完整性约束条件>][，<列名><数据类型>[<列级完整性约束条件>]]...[，<表级完整性约束条件>]）；如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。
SQL中域的概念用数据类型来实现定义表的属性时需要指明其数据类型及长度选用哪种数据类型取值范围要做哪些运算
每一个基本表都属于某一个模式一个模式包含多个基本表定义基本表所属模式方法一：在表名中明显地给出模式名Create table “S-T”.Student（......）;   /*模式名为S-T*/Create table “S-T”.Cource（......）;Create table “S-T”.SC（......）; 方法二：在创建模式语句中同时创建表方法三：设置所属的模式
RESTRICT：删除表是有限制的。欲删除的基本表不能被其他表的约束所引用如果存在依赖该表的对象，则此表不能被删除CASCADE：删除该表没有限制。在删除基本表的同时，相关的依赖对象一起删除
基本表定义被删除，数据被删除表上建立的索引、视图、触发器等一般也将被删除
建立索引的目的：加快查询速度谁可以建立索引DBA或表的属主（即建立表的人）DBMS一般会自动建立以下列上的索引PRIMARYKEYUNIQUE谁维护索引DBMS自动完成使用索引DBMS自动选择是否使用索引以及使用哪些索引
ORDERBY子句可以按一个或多个属性列排序升序：ASC；降序：DESC；缺省值为升序当排序列含空值时ASC：排序列为空值的元组最后显示DESC：排序列为空值的元组最先显示
HAVING短语与WHERE子句的区别：作用对象不同WHERE子句作用于基表或视图，从中选择满足条件的元组HAVING短语作用于组，从中选择满足条件的组。
",第三章关系数据库标准语言SQL,2022-11-08 15:27:13
2020213241,"第三章关系数据库标准语言SQL (续1）
连接查询：同时涉及多个表的查询连接条件或连接谓词：用来连接两个表的条件一般格式：[<表名1>.]<列名1>  <比较运算符>[<表名2>.]<列名2>[<表名1>.]<列名1> BETWEEN[<表名2>.]<列名2> AND[<表名2>.]<列名3>连接字段：连接谓词中的列名称连接条件中的各连接字段类型必须是可比的，但名字不必是相同的
等值连接：连接运算符为=
自身连接：一个表与其自己进行连接需要给表起别名以示区别由于所有属性名都是同名属性，因此必须使用别名前缀
外连接与普通连接的区别普通连接操作只输出满足连接条件的元组外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出
左外连接列出左边关系（如本例Student）中所有的元组右外连接列出右边关系中所有的元组
嵌套查询概述一个SELECT-FROM-WHERE语句称为一个查询块将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询
子查询的限制不能使用ORDER BY子句层层嵌套方式反映了SQL语言的结构化有些嵌套查询可以用连接运算替代
不相关子查询：子查询的查询条件不依赖于父查询由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。
集合操作的种类并操作UNION交操作INTERSECT差操作EXCEPT参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同
SELECT[ALL|DISTINCT]  <目标列表达式> [别名] [ ，<目标列表达式> [别名]] ...FROM<表名或视图名> [别名] [ ，<表名或视图名> [别名]] ...[WHERE<条件表达式>][GROUP BY <列名1>[HAVING<条件表达式>]][ORDER BY <列名2> [ASC|DESC]",第三章关系数据库标准语言SQL (续1）,2022-11-08 15:27:30
2020213241,"第三章关系数据库标准语言SQL (续2）
两种插入数据方式1. 插入元组2. 插入子查询结果 可以一次插入多个元组
语句格式INSERTINTO<表名> [(<属性列1>[，<属性列2 >...)]VALUES(<常量1> [，<常量2>]    ...           ) 将新元组插入指定表中
INTO子句 属性列的顺序可与表定义中的顺序不一致 没有指定属性列 指定部分属性列子句 提供的值必须与INTO子句匹配 值的个数 值的类型
语句格式INSERT INTO <表名>  [(<属性列1> [，<属性列2>...  )]子查询； 功能将子查询结果插入指定表中
子查询 SELECT子句目标列必须与INTO子句匹配 值的个数 值的类型
RDBMS在执行插入语句时会检查所插元组是否破坏表上已定义的完整性规则▪实体完整性▪参照完整性▪用户定义的完整性 NOT NULL约束 UNIQUE约束 值域约束
SET子句 指定修改方式 要修改的列 修改后取值 WHERE子句 指定要修改的元组 缺省表示要修改表中的所有元组
三种修改方式1. 修改某一个元组的值2. 修改多个元组的值3. 带子查询的修改语句
RDBMS在执行修改语句时会检查修改操作是否破坏表上已定义的完整性规则 实体完整性 主码不允许修改 用户定义的完整性 NOT NULL约束➢UNIQUE约束 值域约束
三种删除方式1. 删除某一个元组的值2. 删除多个元组的值3. 带子查询的删除语句
视图的特点 虚表，是从一个或几个基本表（或视图）导出的表 只存放视图的定义，不存放视图对应的数据 基表中的数据发生变化，从视图中查询出的数据也随之改变
基于视图的操作 查询 删除 受限更新 定义基于该视图的新视图
语句的格式：DROP  VIEW  <视图名>；▪该语句从数据字典中删除指定的视图定义▪如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除▪删除基表时，由该基表导出的所有视图定义都必须显式地使用DROP VIEW语句删除
视图能够简化用户的操作 2. 视图使用户能以多种角度看待同一数据 3. 视图对重构数据库提供了一定程度的逻辑独立性 4. 视图能够对机密数据提供安全保护 5. 适当的利用视图可以更清晰的表达查询
",第三章关系数据库标准语言SQL (续2）,2022-12-18 01:09:16
2020213241,"第四章数据库安全性
计算机系统安全性▪为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
三类计算机系统安全性问题▪技术安全类▪管理安全类▪政策法律类
非法使用数据库的情况▪编写合法程序绕过DBMS及其授权机制▪直接或编写应用程序执行非授权操作▪通过多次合法查询数据库从中推导出一些保密数据
数据库安全性控制的常用方法▪用户标识和鉴定▪存取控制▪视图▪审计▪密码存储
通过SQL 的GRANT语句和REVOKE语句实现 用户权限组成 数据对象 操作类型 定义用户存取权限：定义用户可以在哪些数据库对象上进行哪些类型的操作 定义存取权限称为授权
一、GRANT GRANT语句的一般格式：GRANT<权限>[,<权限>]...[ON<对象类型><对象名>]TO<用户>[,<用户>]...[WITHGRANTOPTION]; 语义：将对指定操作对象的指定操作权限授予指定的用户
WITH GRANT OPTION子句:▪指定：可以再授予▪没有指定：不能传播
二、REVOKE 授予的权限可以由DBA或其他授权者用REVOKE语句收回 REVOKE语句的一般格式为：REVOKE<权限>[,<权限>]...[ON<对象类型><对象名>]FROM<用户>[,<用户>]...;
DBA：拥有所有对象的所有权限▪不同的权限授予不同的用户 用户：拥有自己建立的对象的全部的操作权限▪GRANT：授予其他用户 被授权的用户▪“继续授权”许可：再授予 所有授予出去的权力在必要时又都可用REVOKE语句收回
数据库角色：被命名的一组与数据库操作相关的权限▪角色是权限的集合▪可以为一组具有相同权限的用户创建一个角色▪简化授权的过程
可能存在数据的“无意泄露” 原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记 解决：对系统控制下的所有主客体实施强制存取控制策略
敏感度标记（Label）▪绝密（Top Secret）▪机密（Secret）▪可信（Confidential）▪公开（Public） 主体的敏感度标记称为许可证级别（Clearance Level） 客体的敏感度标记称为密级（Classification Level）
什么是审计▪审计日志（Audit Log）将用户对数据库的所有操作记录在上面▪DBA利用审计日志找出非法存取数据的人、时间和内容▪C2以上安全级别的DBMS必须具有
审计分为▪用户级审计➢针对自己创建的数据库表或视图进行审计➢记录所有用户对这些表或视图的一切成功和（或）不成功的访问要求以及各种类型的SQL操作▪系统级审计➢DBA设置➢监测成功或失败的登录要求 监测GRANT和REVOKE操作以及其他数据库级权限下的操作
统计数据库▪允许用户查询聚集类型的信息（如合计、平均值等）▪不允许查询单个记录信息 统计数据库中特殊的安全性问题▪隐蔽的信息通道▪能从合法的查询中推导出不合法的信息
实现数据库系统安全性的技术和方法▪存取控制技术▪视图技术▪审计技术 自主存取控制功能▪通过SQL 的GRANT语句和REVOKE语句实现 角色▪使用角色来管理数据库权限可以简化授权过程▪CREATE  ROLE语句创建角色▪GRANT 语句给角色授权",第四章数据库安全性,2022-12-18 01:09:54
2020213241,"数据库的完整性 数据的正确性和相容性 数据的完整性和安全性是两个不同概念 数据的完整性 防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据 防范对象：不合语义的、不正确的数据 数据的安全性 保护数据库防止恶意的破坏和非法的存取 防范对象：非法用户和非法操作
为维护数据库的完整性，DBMS必须：n1.提供定义完整性约束条件的机制n2.提供完整性检查的方法n3.违约处理
关系模型的实体完整性 CREATE  TABLE中用PRIMARY KEY定义 单属性构成的码有两种说明方法 定义为列级约束条件 定义为表级约束条件 对多个属性构成的码只有一种说明方法 定义为表级约束条件
插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。包括： 1. 检查主码值是否唯一，如果不唯一则拒绝插入或修改 2. 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改
关系模型的参照完整性定义 在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码§用REFERENCES短语指明这些外码参照哪些表的主码
用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求vRDBMS提供，而不必由应用程序承担
CREATE TABLE时定义 列值非空（NOT NULL） 列值唯一（UNIQUE） 检查列值是否满足一个布尔表达式（CHECK）
触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程 由服务器自动激活§可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力
定义触发器的语法说明: 1. 创建者：表的拥有者§2. 触发器名§3. 表名：触发器的目标表§4. 触发事件：INSERT、DELETE、UPDATE 5. 触发器类型 行级触发器（FOR EACH ROW）Ø语句级触发器（FOR EACH STATEMENT）
触发条件 触发条件为真 省略WHEN触发条件v7. 触发动作体 触发动作体可以是一个匿名PL/SQL过程块 也可以是对已创建存储过程的调用
触发器的执行，是由触发事件激活的，并由数据库服务器自动执行v一个数据表上可能定义了多个触发器 同一个表上的多个触发器激活时遵循如下的执行顺序： （1）执行该表上的BEFORE触发器； （2）激活触发器的SQL语句； （3）执行该表上的AFTER触发器。
数据库的完整性是为了保证数据库中存储的数据是正确的vRDBMS完整性实现的机制§完整性约束定义机制 完整性检查机制§违背完整性约束条件时RDBMS应采取的动作",第五章数据库完整性,2022-12-18 01:38:01
2020213241,"第六章关系数据理论
关系数据库逻辑设计 针对具体问题，如何构造一个适合于它的数据模式 数据库逻辑设计的工具──关系数据库的规范化理论
完整性约束的表现形式v限定属性取值范围：例如学生成绩必须在0-100之间v定义属性值间的相互关连（主要体现于值的相等与否），这就是数据依赖，它是数据库模式设计的关键
数据依赖v一个关系内部属性与属性之间的约束关系v现实世界属性间相互联系的抽象v数据内在的性质v语义的体现
数据依赖的类型v函数依赖（Functional Dependency，简记为FD）v多值依赖（Multivalued Dependency，简记为MVD）v其他
关系模式R（U, D, DOM, F）简化为一个三元组：R（U, F） 当且仅当U上的一个关系r满足F时，r称为关系模式R（U, F）的一个关系
结论：nStudent关系模式不是一个好的模式。n“好”的模式：不会发生插入异常、删除异常、更新异常，数据冗余应尽可能少原因：由存在于模式中的某些数据依赖引起的解决方法：通过分解关系模式来消除其中不合适的数据依赖
规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
所有关系实例均要满足2. 语义范畴的概念3. 数据库设计者可以对现实世界作强制的规定
主属性与非主属性 包含在任何一个候选码中的属性，称为主属性（Prime attribute）§不包含在任何码中的属性称为非主属性（Nonprime attribute）或非码属性（Non-key attribute）v全码§整个属性组是码，称为全码（All-key）
范式是符合某一种级别的关系模式的集合 关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式 范式的种类：第一范式(1NF)第二范式(2NF)第三范式(3NF)BC范式(BCNF)第四范式(4NF)第五范式(5NF)
各种范式之间存在联系：v某一关系模式R为第n范式，可简记为R∈nNF。v一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化 如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NFv第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能称为关系数据库v但是满足第一范式的关系模式并不一定是一个好的关系模式
采用投影分解法将一个1NF的关系分解为多个2NF的关系，可以在一定程度上减轻原1NF关系中存在的插入异常、删除异常、数据冗余度大、修改复杂等问题。v将一个1NF关系分解为多个2NF的关系，并不能完全消除关系模式中的各种异常情况和数据冗余。
采用投影分解法，把S-L分解为两个关系模式，以消除传递函数依赖：S-D（Sno，Sdept）D-L（Sdept，Sloc）S-D的码为Sno，D-L的码为Sdept。n分解后的关系模式S-D与D-L中不再存在传递依赖
采用投影分解法将一个2NF的关系分解为多个3NF的关系，可以在一定程度上解决原2NF关系中存在的插入异常、删除异常、数据冗余度大、修改复杂等问题。 将一个2NF关系分解为多个3NF的关系后，仍然不能完全消除关系模式中的各种异常情况和数据冗余。
若R∈BCNF 所有非主属性对每一个码都是完全函数依赖§所有的主属性对每一个不包含它的码，也是完全函数依赖§没有任何属性完全函数依赖于非码的任何一组属性
W表示仓库，S表示保管员，C表示商品n假设每个仓库有若干个保管员，有若干种商品n每个保管员保管所在的仓库的所有商品n每种商品被所有保管员保管
关系数据库的规范化理论是数据库逻辑设计的工具  目的：尽量消除插入、删除一场，修改复杂，数据冗余v基本思想：逐步消除数据依赖中不合适的部分§实质：概念的单一化
不能说规范化程度越高的关系模式就越好 在设计数据库模式结构时，必须对现实世界的实际情况和用户应用需求作进一步分析，确定一个合适的、能够反映现实世界的模式v上面的规范化步骤可以在其中任何一步终止
把低一级的关系模式分解为若干个高一级的关系模式的方法不是唯一的v只有能够保证分解后的关系模式与原关系模式等价，分解方法才有意义
三种模式分解等价的定义：1.分解具有无损连接性2.分解要保持函数依赖3.分解既要保持函数依赖，又要具有无损连接性
关系模式R的一个分解ρ={ R1，R2，...，Rn}若R与R1、R2、...、Rn自然连接的结果相等，则称关系模式R的这个分解ρ具有无损连接性（Lossless join）v具有无损连接性的分解保证不丢失信息 无损连接性不一定能解决插入异常、删除异常、修改复杂、数据冗余等问题",第六章关系数据理论,2022-12-18 01:38:53
2020213241,"第七章 数据库设计
数据库设计是指对于一个给定的应用环境，构造（设计）优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。 目标：为用户和各种应用系统提供一个信息基础设施和高效率的运行环境
数据库建设的基本规律 三分技术，七分管理，十二分基础数据 管理 数据库建设项目管理 企业（即应用部门）的业务管理 基础数据 收集、入库 更新新的数据v结构（数据）设计和行为（处理）设计相结合 将数据库结构设计和数据处理设计密切结合
手工与经验相结合方法§设计质量与设计人员的经验和水平有直接关系 数据库运行一段时间后常常不同程度地发现各种问题，增加了维护代价v规范设计法 基本思想：过程迭代和逐步求精
新奥尔良（New Orleans）方法 将数据库设计分为若干阶段和步骤v基于E-R模型的数据库设计方法 概念设计阶段广泛采用v3NF（第三范式）的设计方法 逻辑阶段可采用的有效方法vODL（Object Definition Language）方法 面向对象的数据库设计方法
数据库设计分6个阶段 需求分析 概念结构设计 逻辑结构设计 物理结构设计 数据库实施 数据库运行和维护v需求分析和概念设计独立于任何数据库管理系统v逻辑设计和物理设计与选用的DBMS密切相关
一、数据库设计的准备工作：选定参加设计的人1.系统分析人员、数据库设计人员 自始至终参与数据库设计2. 用户和数据库管理员 主要参加需求分析和数据库的运行维护3.应用开发人员（程序员和操作员） 在系统实施阶段参与进来，负责编制程序和准备软硬件环境
、数据库设计的过程(六个阶段) 1.需求分析阶段 准确了解与分析用户需求（包括数据与处理） 最困难、最耗费时间的一步 概念结构设计阶段 整个数据库设计的关键 通过对用户需求进行综合、归纳与抽象，形成一个独立于具体DBMS的概念模型 
.逻辑结构设计阶段 将概念结构转换为某个DBMS所支持的数据模型 对其进行优化
.数据库物理设计阶段 为逻辑数据模型选取一个最适合应用环境的物理结构（包括存储结构和存取方法）
5.数据库实施阶段 运用DBMS提供的数据库语言（如SQL）及宿主语言，根据逻辑设计和物理设计的结果 建立数据库 编制与调试应用程序 组织数据入库 进行试运行
6.数据库运行和维护阶段 数据库应用系统经过试运行后即可投入正式运行 在数据库系统运行过程中必须不断地对其进行评价、调整与修改 
把数据库设计和对数据库中数据处理的设计紧密结合起来v将这两个方面的需求分析、抽象、设计、实现在各个阶段同时进行，相互参照，相互补充，以完善两方面的设计
详细调查现实世界要处理的对象（组织、部门、企业等）v充分了解原系统（手工系统或计算机系统）v明确用户的各种需求v确定新系统的功能v充分考虑今后可能的扩充和改变
分解处理功能和数据(1)分解处理功能 将处理功能的具体内容分解为若干子功能(2)分解数据 处理功能逐步分解同时，逐级分解所用数据，形成若干层次的数据流图(3)表达方法 处理逻辑：用判定表或判定树来描述 数据：用数据字典来描述3．将分析结果再次提交给用户，征得用户的认可
数据结构反映了数据之间的组合关系。v一个数据结构可以由若干个数据项组成，也可以由若干个数据结构组成，或由若干个数据项和数据结构混合组成。v对数据结构的描述数据结构描述＝｛数据结构名，含义说明，组成:｛数据项或数据结构｝｝",第七章 数据库设计,2022-12-18 01:40:04
2020213241,"数据库设计（续1）
什么是概念结构设计 将需求分析得到的用户需求抽象为信息结构(即概念模型)的过程就是概念结构设计 概念结构是各种数据模型的共同基础，它比数据模型更独立于机器、更抽象，从而更加稳定 概念结构设计是整个数据库设计的关键
概念结构设计的特点(1) 能真实、充分地反映现实世界(2) 易于理解(3) 易于更改(4) 易于向关系、网状、层次等各种数据模型转换
混合策略 将自顶向下和自底向上相结合，用自顶向下策略设计一个全局概念结构的框架，以它为骨架集成由自底向上策略中设计的各局部概念结构
抽象是对实际的人、物、事和概念中抽取所关心的共同特性，忽略非本质的细节，并把这些特性用各种概念精确地加以描述。 概念结构是对现实世界的一种抽象
三种常用抽象1. 分类（Classification） 定义某一类概念作为现实世界中一组对象的类型 抽象了对象值和型之间的“is member of”的语义 聚集（Aggregation） 定义某一类型的组成成分 抽象了对象内部类型和成分之间“is part of”的语义
概括（Generalization） 定义类型之间的一种子集联系 抽象了类型之间的“is subset of”的语义 继承性
两条准则： （1）属性不能再具有需要描述的性质。即属性必须是不可分的数据项，不能再由另一些属性组成 （2）属性不能与其他实体具有联系。联系只发生在实体之间 
两类命名冲突 同名异义：不同意义的对象在不同的局部应用中具有相同的名字 异名同义（一义多名）：同一意义的对象在不同的局部应用中具有不同的名字
两类属性冲突 属性域冲突 属性值的类型 取值范围 取值集合不同 属性取值单位冲突 
三类结构冲突 同一对象在不同应用中具有不同的抽象 同一实体在不同分E-R图中所包含的属性个数和属性排列次序不完全相同 实体之间的联系在不同局部视图中呈现不同的类型
冗余的数据是指可由基本数据导出的数据冗余的联系是指可由其他联系导出的联系v冗余数据和冗余联系容易破坏数据库的完整性，给数据库维护增加困难v消除不必要的冗余后的初步E-R图称为基本E-R图
视图集成后形成一个整体的数据库概念结构，对该整体概念结构还必须进行进一步验证，确保它能够满足下列条件： 整体概念结构内部必须具有一致性，不存在互相矛盾的表达 整体概念结构能准确地反映原来的每个视图结构，包括属性、实体及实体间的联系 整体概念结构能满足需要分析阶段所确定的所有要求
整体概念结构最终还应该提交给用户，征求用户和有关人员的意见，进行评审、修改和优化，然后把它确定下来，作为数据库的概念结构，作为进一步设计数据库的依据
概念结构设计的步骤 抽象数据并设计局部视图 集成局部视图，得到全局概念结构 验证整体概念结构
集成局部视图 1.合并分E-R图，生成初步E-R图 消除冲突–属性冲突–命名冲突–结构冲突 2. 修改与重构 消除不必要的冗余，设计生成基本E-R图–分析方法–规范化理论",第七章 数据库设计（续1）,2022-12-18 01:40:21
2020213241,"数据库设计（续2）
逻辑结构设计的任务 把概念结构设计阶段设计好的基本E-R图转换为与选用DBMS产品所支持的数据模型相符合的逻辑结构 逻辑结构设计的步骤 将概念结构转化为一般的关系、网状、层次模型 将转换来的关系、网状、层次模型向特定DBMS支持下的数据模型转换 对数据模型进行优化
E-R图向关系模型的转换要解决的问题 如何将实体型和实体间的联系转换为关系模式 如何确定这些关系模式的属性和码 转换内容 将E-R图转换为关系模型：将实体、实体的属性和实体之间的联系转换为关系模式。
实体型间的联系有以下不同情况：(1)一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。 转换为一个独立的关系模式 与某一端实体对应的关系模式合并(2)一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。 转换为一个独立的关系模式 与n端对应的关系模式合并
从理论上讲，1:1联系可以与任意一端对应的关系模式合并 但在一些情况下，与不同的关系模式合并效率会大不一样。因此究竟应该与哪端的关系模式合并需要依应用的具体情况而定。 由于连接操作是最费时的操作，所以一般应以尽量减少连接操作为目标
得到初步数据模型后，还应该适当地修改、调整数据模型的结构，以进一步提高数据库应用系统的性能，这就是数据模型的优化 关系数据模型的优化通常以规范化理论为指导
优化数据模型的方法1.确定数据依赖按需求分析阶段所得到的语义，分别写出每个关系模式内部各属性之间的数据依赖以及不同关系模式属性之间数据依赖2.消除冗余的联系对于各个关系模式之间的数据依赖进行极小化处理，消除冗余的联系。3.确定所属范式 按照数据依赖的理论对关系模式逐一进行分析 考查是否存在部分函数依赖、传递函数依赖、多值依赖等 确定各关系模式分别属于第几范式 
按照需求分析阶段得到的各种应用对数据处理的要求，分析对于这样的应用环境这些模式是否合适，确定是否要对它们进行合并或分解。注意：并不是规范化程度越高的关系就越优，一般说来，第三范式就足够了 
定义用户外模式时应该注重的问题包括三个方面：(1) 使用更符合用户习惯的别名(2) 针对不同级别的用户定义不同的View ，以满足系统对安全性的要求。(3) 简化用户对系统的使用 
优化数据模型的方法1. 确定数据依赖2. 对于各个关系模式之间的数据依赖进行极小化处理，消除冗余的联系。3. 确定各关系模式分别属于第几范式。4. 分析对于应用环境这些模式是否合适，确定是否要对它们进行合并或分解。5. 对关系模式进行必要的分解或合并
数据库物理设计的步骤 确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构 对物理结构进行评价，评价的重点是时间和空间效率如果评价结果满足原设计要求，则可进入到物理实施阶段，否则，就需要重新设计或修改物理结构，有时甚至要返回逻辑设计阶段修改数据模型
确定数据存放位置和存储结构的因素 存取时间 存储空间利用率 维护代价这三个方面常常是相互矛盾的
基本原则 根据应用情况将 易变部分与稳定部分分开存放 存取频率较高部分与存取频率较低部分，分开存放
数据库的转储和恢复 在数据库试运行阶段，系统还不稳定，硬、软件故障随时都可能发生 系统的操作人员对新系统还不熟悉，误操作也不可避免 因此必须做好数据库的转储和恢复工作，尽量减少对数据库的破坏。",第七章 数据库设计（续2）,2022-12-18 01:51:56
2020213308,"层次模型
有且只有一个且没有双亲结点
其他节点只有一个双亲节点
特点：
1.结点的双亲是唯一的
2.只能直接处理一对多的实体联系
3.每个记录类型可以定义一个排序字段，也称为码字段
4.任何记录值只有按其路径查看时，才能显出它的全部意义
5.没有一个子女记录值能够脱离双亲记录值而独立存在
存储结构
1 邻接法：按层次结构
2.链接法：子女兄弟链接法 两个指针
间接表示多对多联系
冗余节点法 虚拟节点法
数据操作
查询、插入、删除、更新

网状模型
1. 允许一个以上的结点无双亲；可能有多个根节点
2. 一个结点可以有多于一个的双亲

关系模型
逻辑结构是二维表
列 属性 行 元组
主码 可以为属性组
最基本的规范条件：关系的每一个分量必须是一个不可分的数据项, 不允许表中还有表
优点：
建立在严格的数学概念的基础上
概念单一
实体和各类联系都用关系来表示
对数据的检索结果也是关系关系模型的存取路径对用户透明
具有更高的数据独立性，更好的安全保密性
简化了程序员的工作和数据库开发建立的工作
缺点：
存取路径对用户透明导致查询效率往往不如非关系数据模型
为提高性能，必须对用户的查询请求进行优化增加了开发DBMS的难度",第一章 绪论 第二节课,2022-09-15 21:28:14
2020213308,"反思：
第一节课简单接触了一下数据库的基本概念，打开了之前的认识，数据库这门知识在当下运用得很广泛，而且有良法的运用前景。学习了关于数据库的一些基本概念，感觉和之前所学的数据结构与一些联系，可见这门学科还是比较复杂的，零碎的知识比较多。同时比较考验逻辑思维能力。因此要认真对待这门课程。
知识点：
数据：描述事物的符号记录，是数据库中存储的基本对象。
数据库：数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。
数据库管理系统：位于用户与操作系统之间的一层数据管理软件。可以科学地组织和存储数据、高效地获取和维护数据。
数据库系统：在计算机系统中引入数据库后的系统构成，包括：数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员。
在数据库中用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息。通俗地讲数据模型就是现实世界的模拟。
数据模型分为：
概念模型
逻辑模型和物理模型
数据模型的组成要素
数据结构、数据操作、整性约束条件
数据结构是对系统静态特性的描述
数据操作是对系统动态特性的描述
数据的完整性约束条件：
一组完整性规则的集合。
完整性规则：
给定的数据模型中数据及其联系所具有的制约和储存规则
用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。

",第一章 绪论 第一节课,2022-09-15 22:12:27
2020213308,"反思：
这一章的内容感觉比较模糊，因为很多概念性的东西，他的定义比较专业，难理解，而且好几个概念比较像，很容易搞混。
然后我觉得比较好记的方法就是不要去记概念，而是拿一个例子去分析，并且找出这些概念之间的相同和不同之处，找出他们的包含和被包含关系，这样比较容易分清。

知识点：
关系：是单一的数据结构。现实世界的实体以及实体间的各种联系均用关系来表示
关系模型中数据的逻辑结构是一张二维表。
域：
是一组具有相同数据类型的值的集合。
笛卡尔积：
给定一组域D1，D2，...，Dn，这些域中可以有相同的。D1，D2，...，Dn的笛卡尔
积为：D1×D2×...×Dn＝｛（d1，d2，...，dn）｜diDi，i＝1，2，...，n｝。
关系：
D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系，表示为R（D1，D2，...，
Dn）。
笛卡尔积是所给的所有域的所有取值的一个组合。
关系是所给的所有域的子集。
一个关系可以有多个候选码，但只有一个主码，主码是特殊的候选码。
关系模式;
关系模式是型，是对关系的描述。可以简记为R(U)或R（A1，A2，A3……An）。
关系：关系是值。D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系，
表示为R（D1，D2，...，Dn）。
关系数据库：
在一个给定的应用领域中，所有关系的集合构成一个关系数据库。
关系数据库包括型和值。型：关系数据库模式。值：关系模式在某一时刻对应的关
系的集合。
",第二章 关系数据库 第一节课,2022-09-25 22:40:45
2020213308,"这节课继续学习关系数据库的一些知识。
首先关系的三类完整性约束包括，实体完整性、参照完整性、用户定义的完整性。
实体完整性主要指若属性A是基本关系R的主属性，则属性A不能取空值例：1.主码2.不能取空值。
参照完整性跟关系与关系间的引用有关，比较难的就是判断参照关系和被参照关系。设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是基本关系R的外码。基本关系R称为参照关系。基本关系S称为被参照关系或目标关系。
用户定义的完整性则与具体语境有关，在这里就不过多写了。
其次是关系的运算。
这节课主要学了传统的关系运算，包括：并、交、差、笛卡尔积。相对来说比较简单，和之前学的数学知识有些联系，同时可以根据他的运算规则推算出结果的一些形式。

",第二章 关系数据库 第二节课,2022-10-04 11:04:52
2020213308,"反思：

这节课继续学习了关系运算，主要是专门的关系运算。
专门的关系运算是建立在基本的关系运算上的。相对于基本运算来说，更加复杂且难理解。最关键的是了解每种运算得到的结果是什么，并且记住每种运算的表示符号，并能根据题意灵活运用。其中最难的就是根据题意做题，因为不同的运算方法能够得到相同的结果，所以在思考时就要仔细选择，确定一种运算再顺着走下去。

知识点：
专门的关系运算：

选择：
实际上是从关系R中选取使逻辑表达式F为真的元组。是从行的角度进行的运算。

投影：
实际上是从关系R中选择出若干属性列组成新的关系。是从列的角度进行的运算。
投影结果取消了重复的元组。

连接：
是从两个关系中的笛卡尔积中选取属性间满足一定条件的元组。
等值连接：从关系R和S的广义笛卡儿积中选取A、B属性值相等的那些元组。
自然连接：是一种特殊的等值连接。要求两个关系中进行比较的分量必须是同名的属性组，并且在结果中把重复的属性列去掉。
一般的连接是从行的角度运算，但是自然连接还需要去掉重复组，要同时从行和列的角度运算。

针对自然连接：
悬浮元组：被舍弃的元组。
外连接：把舍弃的元组也保存在结果关系中，而其他属性上填空值。
左外连接及右外连接：只保留左边或右边关系中的悬浮元组。

除运算：
行与列同时进行运算
结果为T，T包含所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中。

关系代数中，运算经过有限次复合后形成的表达式，称为关系代数表达式。",第二章 关系数据库 第三节课,2022-10-11 10:05:24
2020213308,"反思：
这节课是自学课，主要学习SQL语言以及一些基本的语句。
相对于前两章来说，这节的知识更为硬核，或者说更加像编程知识，因为要学习如何用SQL语言来完成一些基本的命令和单表数据查询，就像学一门新的计算机语言一样。好在SQL语言相对来说更见的简洁明了，没有特别严苛的语法要求，比较适合我。

知识总结：
SQL：结构化查询语言，是关系数据库的标准语言，是一个通用的、功能极强的关系数据库语言。
特点：
1.综合统一:集数据定义语言，数据操纵语言，数据控制语言功能于一体。可以独立完成数据库生命周期中的全部活动。用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。数据操作符统一。
2.面向过程：无须了解存取路径。存取路径的选择以及SQL的操作过程由系统自动完成。
3.SQL采用集合操作方式,操作对象、查找结果可以是元组的集合。一次插入、删除、更新操作的对象可以是元组的集合.
4.SQL是独立的语言能够独立地用于联机交互的使用方式。
5.SQL又是嵌入式语言SQL能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用。
6.SQL功能极强，完成核心功能只用了9个动词。

模式：
创建
CREATE SCHEMA <模式名> AUTHORIZATION <用户名>[<表定义子句>|<视图定义子句>|<授权定义子句>]
删除
DROP SCHEMA <模式名> <CASCADE|RESTRICT>
CASCADE:   删除模式的同时把该模式中所有的数据库对象全部删除
RESTRICT:如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。当该模式中没有任何下属的对象时才能执行。

基本表：
定义基本表CREATETABLE<表名>（<列名><数据类型>[<列级完整性约束条件>][，<列名><数据类型>[<列级完整性约束条件>]]...[，<表级完整性约束条件>]）；
如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。
修改基本表：
ALTERTABLE<表名>[ADD<新列名><数据类型>[完整性约束]][DROP<完整性约束名>][ALTERCOLUMN<列名><数据类型>]；
删除基本表DROP TABLE <表名>［RESTRICT| CASCADE］；
RESTRICT：删除表是有限制的。欲删除的基本表不能被其他表的约束所引用如果存在依赖该表的对象，则此表不能被删除。
CASCADE：删除该表没有限制。在删除基本表的同时，相关的依赖对象一起删除。

索引
RDBMS中索引一般采用B+树、HASH索引来实现。
B+树索引具有动态平衡的优点
HASH索引具有查找速度快的特点
DROPINDEX<索引名>；删除索引时，系统会从数据字典中删去有关该索引的描述。

数据查询：
SELECT[ALL|DISTINCT]<目标列表达式>[，<目标列表达式>] ...
FROM <表名或视图名>[，<表名或视图名> ] ...
[WHERE<条件表达式>]
[GROUPBY<列名1>
[HAVING<条件表达式>]]
[ORDERBY<列名2>[ASC|DESC]]；

1.SELECT子句的<目标列表达式>可以为：算术表达式字符串常量函数列别名
  列别名：SELECT Sname NAME；
2.消除取值重复的行：如果没有指定DISTINCT关键词，则缺省为ALL
   SELECT DISTINCT Sno；
3.WHERE Sage NOT BETWEEN 20 AND 23；
4.WHERE Sdept NOT IN('IS'，'MA'，'CS');
5.WHERE Sno LIKE‘200215121'；
6.WHERE  Cname LIKE  'DB\\_%i_ _' ESCAPE ' \\‘；ESCAPE '＼' 表示“＼”为换码字符
7.WHERE  Grade IS NULL
8.WHERE Sdept= 'CS' AND Sage<20；
9.ORDERBY子句可以按一个或多个属性列排序升序：ASC；降序：DESC；缺省值为升序
ORDER BY Sdept，Sage DESC；
10.聚集函数：
计数COUNT（[DISTINCT|ALL]*）COUNT（[DISTINCT|ALL]<列名>）
计算总和SUM（[DISTINCT|ALL]<列名>）
计算平均值AVG（[DISTINCT|ALL]<列名>）
最大最小值MAX（[DISTINCT|ALL]<列名>）MIN（[DISTINCT|ALL]<列名>）
11.分组
     SELECT Sno
     FROM SC
     GROUP BY Sno 
     HAVING COUNT(*)>3；
HAVING短语与WHERE子句的区别：
WHERE子句作用于基表或视图，从中选择满足条件的元组
HAVING短语作用于组，从中选择满足条件的组。
",第三章第一节,2022-10-30 12:37:09
2020213308,"反思：
今天的数据库课继续学习数据查询，主要是关于多表的基本语句。相对于单表来说，多表的查询更加的复杂，最核心的思想就是连接。找出不同表中相同的属性来连接。其次，就是几种特殊的语句，其中最主要的就是嵌套语句，最能体现结构化思想。值得一提的是，数据库中查询同一种结构实际上有多种方法，但是每种方法的运行速度不同，这就需要我们熟悉各种结构的逻辑，从而选出更加高效的算法。

知识点： 
1.
连接查询：同时涉及多个表的查询；
连接字段：连接谓词中的列名称。连接条件中的各连接字段类型必须是可比的，    但名字不必是相同的。
2.
自身连接：一个表与其自己进行连接，需要给表起别名以示区别。
由于所有属性名都是同名属性，因此必须使用别名前缀。
SELECT  FIRST.Cno，SECOND.Cpno
FROM  Course  FIRST，Course  SECOND
WHERE FIRST.Cpno = SECOND.Cno；
3.
外连接：
普通连接操作只输出满足连接条件的元组。外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出。
左外连接：列出左边关系中所有的元组。右外连接：列出右边关系中所有的元组。
SELECT Student.Sno，Sname，Ssex，Sage，Sdept，Cno，Grade
FROM  Student  LEFT OUT JOIN SC ON (Student.Sno=SC.Sno)；
4.
复合条件连接：WHERE子句中含多个连接条件，多用AND连接。
5.
嵌套查询概述
一个SELECT-FROM-WHERE语句称为一个查询块。
将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。
注意事项：
子查询的限制：不能使用ORDER BY子句。
层层嵌套方式反映了SQL语言的结构化，有些嵌套查询可以用连接运算替代。
分为：
不相关子查询：子查询的查询条件不依赖于父查询。由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。
相关子查询：子查询的查询条件依赖于父查询。首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询。
6.
嵌套查询：
一、带有IN谓词的子查询
二、带有比较运算符的子查询
三、带有ANY（SOME）或ALL谓词的子查询
四、带有EXISTS谓词的子查询
       1. EXISTS谓词，带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值   “true”或逻辑假值“false”。若内层查询结果非空，则外层的WHERE子句返回真值若内层查询结果为空，则外层的WHERE子句返回假值。由EXISTS引出的子查询，其目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义2. NOT EXISTS谓词。若内层查询结果非空，则外层的WHERE子句返回假值。若内层查询结果为空，则外层的WHERE子句返回真值。
7.
集合操作：
并操作UNION，交操作INTERSECT，差操作EXCEPT。
参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同。
 SELECT *
 FROM Student
 WHERE Sdept= 'CS'
 UNION
 SELECT *
 FROM Student
 WHERE Sage<=19；
 UNION：将多个查询结果合并起来时，系统自动去掉重复元组。
 UNION ALL：将多个查询结果合并起来时，保留重复元组
8.
SELECT语句的一般格式：
SELECT[ALL|DISTINCT]  <目标列表达式> [别名] [ ，<目标列表达式> [别名]] ...
FROM<表名或视图名> [别名] [ ，<表名或视图名> [别名]] ...
[WHERE<条件表达式>]
[GROUP BY <列名1>
[HAVING<条件表达式>]]
[ORDER BY <列名2> [ASC|DESC]

",第三章第二节,2022-10-30 12:37:59
2020213308,"反思：
今天继续学习第三章的内容，上节课学习的是数据查询，主要是对数据进行搜索，而这节课学习数据更新则要对数据进行一定的改动，相当于要修改数据，这在数据库中也是很重要的一项功能。
知识点：
数据更新主要包括插入，修改和删除数据。

插入数据
两种插入数据方式
1. 插入元组
INSERT
INTO<表名> [(<属性列1>[，<属性列2 >...)]  
VALUES(<常量1> [，<常量2>]    ...           )
可以将新的元祖插入表中。
对于INTO：◼属性列的顺序可与表定义中的顺序不一致◼没有指定属性列◼指定部分属性列
VALUES：提供的值必须与INTO子句匹配，包括值的个数和值的类型。

2. 插入子查询结果
INSERT 
INTO <表名>  [(<属性列1> [，<属性列2>...  )]
子查询；
将子查询结果插入指定表中。注意SELECT子句目标列必须与INTO子句匹配。

 修改数据
UPDATE  <表名>
SET  <列名>=<表达式>[，<列名>=<表达式>]...
[WHERE <条件>]；
修改指定表中满足WHERE子句条件的元组。
注意：SET子句，指定修改方式，要修改的列，修改后取值。
          WHERE子句，指定要修改的元组，缺省表示要修改表中的所有元组。
共三种修改方式
1. 修改某一个元组的值2. 修改多个元组的值3. 带子查询的修改语句

删除数据

DELETE
FROM<表名>
[WHERE<条件>]；
删除指定表中满足WHERE子句条件的元组。
注意WHERE子句，指定要删除的元组，缺省表示要删除表中的全部元组，表的定义仍在字典中。
共三种删除方式1. 删除某一个元组的值2. 删除多个元组的值3. 带子查询的删除语句

关于视图：
视图，虚表，是从一个或几个基本表（或视图）导出的表。
只存放视图的定义，不存放视图对应的数据。
基表中的数据发生变化，从视图中查询出的数据也随之改变。
视图的作用：
1. 视图能够简化用户的操作
2. 视图使用户能以多种角度看待同一数据
3. 视图对重构数据库提供了一定程度的逻辑独立性
4. 视图能够对机密数据提供安全保护
5. 适当的利用视图可以更清晰的表达查询",第三章第三节,2022-11-12 17:32:40
2020213308,"这次的实验是建立在第一次实验上，对构造的数据库进行数据查询。相对而言，这次实验中的查询都比较简单，个人觉得对自己最难的是英文单词不认识，无法把题目与原数据库的内容连接起来，所以只能先查字典搞清楚单词的意思再进行下一步。
1.是个单表的查询，只需要提取出其中的三列，比较简单。
2.这道题有个小陷阱，他实际上是有两个题目要求，最近一周内的数据，加上总价大于1000的。第二个条件比较好写，主要是关于最近一周这个条件，刚开始我不知道怎么表示，后来在网上搜索之后发现有一些数据公式可以使用：
GetDate() 函数
GetDate() 函数用于返回当前的时间和日期，返回值样式举例：2013/10/29 9:11:05
DateDiff() 函数
DateDiff() 函数返回“开始日期”与“结束日期”之间的差值（如：年、天数等）。
返回值类型：
DateDiff() 函数返回值类型为：Long（长整型），范围从 -2,147,483,648 到 2,147,483,647。
语法：
DateDiff(参数 , 开始日期 , 结束日期)
DateAdd() 函数
DateAdd() 函数用于在指定日期增加（或减去）参数设定的间隔。
DateAdd(“d”，-7，‘2022-11-07’) 可以计算出开始日期
DateAdd(“d”，-7，‘2022-11-07’)<Date
语法： 
DateAdd(参数 , 加（减）间隔 , 指定日期) 
 Convert() 函数
作用：Convert() 函数用来将日期转换为指定样式的新数据类型。
语法：
Convert(数据类型(长度) , 需转换日期 , 样式参数)
3.这道题主要是一个双表连接再加上一个分组的SUM函数，注意在第一行SELECT后面，第一类的列名是编号，第二列是一个函数，这样如果直接运行的话，结果是正确的，但是第二列会没有列名，因此可以在函数后面加一个列名，代表将这个属性命名，这样可以使结果更加的清晰。
4.这一题仍然运用的是双表的连接加上一个分组，注意分组有个要求条件，然后将符合条件的输出。
5.这一题主要运用不相关嵌套查询，通过已知条件查询一个结果，而这个结果又是题目要求查询的条件。又因为子查询结果只能有一个，所以可以直接用等于。
6.这道题主要就是两个表的连接加上一个比较的条件。
7.同上。
8.这道题是多表，三个表的连接，加上一个比较条件，相对来说也比较简单。
总结：
此次实验主要是最基础的查询，相对来说比较简单，但是出现很多不注意的细节会导致出错，比如中英文输入等等，因此还需要多注意。
",第三章第四节,2022-11-12 17:45:59
2020213308,"数据库的完整性
数据的正确性和相容性
数据的完整性：
防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据
防范对象：不合语义的、不正确的数据
数据的安全性：
保护数据库防止恶意的破坏和非法的存取
防范对象：非法用户和非法操作

为维护数据库的完整性，DBMS必须：
n1.提供定义完整性约束条件的机制
n2.提供完整性检查的方法
n3.违约处理

包括：实体完整性、参照完整性、用户定义的完整性
实体完整性：
插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。
包括：
1. 检查主码值是否唯一，如果不唯一则拒绝插入或修改
2. 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改
进行全表扫描

关系模型的参照完整性定义
在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码
用REFERENCES短语指明这些外码参照哪些表的主码

参照完整性违约处理
1. 拒绝执行•默认策略
2. 级联操作
3. 设置为空值•对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值
列约束
CREATE TABLE时定义
列值非空（NOT NULL）
列值唯一（UNIQUE）
检查列值是否满足一个布尔表达式（CHECK）
列上上的约束条件检查和违约处理：
插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足；
如果不满足则操作被拒绝执行。
行约束
在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制。
插入元组或修改属性的值时，RDBMS检查元组上的约束条件是否被满足。如果不满足则操作被拒绝执行。

SQL支持域的概念，并可以用CREATE DOMAIN语句建立一个域以及该域应该满足的完整性约束条件。
",数据库完整性,2022-12-11 18:10:25
2020213308,"计算机系统安全性：是指为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
主要分为三种：▪技术安全类▪管理安全类▪政策法律类。
目前两种安全标准简介：
TCSEC/TDI标准的基本内容：从四个方面来描述安全性级别划分的指标1.安全策略2.责任3.保证4.文档。
CC：提出国际公认的表述信息技术安全性的结构。把信息产品的安全要求分为1.安全功能要求2.安全保证要求。CC文本组成：简介和一般模型、安全功能要求、安全保证要求。
数据库安全性：
非法使用数据库的情况：1.编写合法程序绕过DBMS及其授权机制2.直接或编写应用程序执行非授权操作3.通过多次合法查询数据库从中推导出一些保密数据。
数据库安全性控制的常用方法：
1.用户标识和鉴定：系统提供的最外层安全保护措施
2.存取控制：定义用户权限、合法权限检查，一起组成了DBMS的安全子系统。分为自主存取控制DAC（通过SQL 的GRANT语句和REVOKE语句实现）和强制存取控制MAC（(1)仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体(2)仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体）。
3.视图：把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护。
4.审计
5.密码存储",数据库安全性,2022-12-11 18:23:36
2020213308,"数据库逻辑设计的工具──关系数据库的规范化理论。
关系模式由五部分组成，即它是一个五元组：R(U, D, DOM, F)R：关系名U：组成该关系的属性名集合D：属性组U中属性所来自的域DOM：属性向域的映象集合F：属性间数据的依赖关系集合。
完整性约束的表现形式:
限定属性取值范围,定义属性值间的相互关连（主要体现于值的相等与否）。
数据依赖：一个关系内部属性与属性之间的约束关系，现实世界属性间相互联系的抽象，数据内在的性质，语义的体现。
分为：函数依赖、多值依赖、其他。
当且仅当U上的一个关系r满足F时，r称为关系模式R（U, F）的一个关系。
规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
函数依赖：
若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称“X函数确定Y” 或“Y函数依赖于X”，记作X→Y。
平凡函数依赖与非平凡函数依赖：如果X→Y，但Y不属于X，则称X→Y是非平凡的函数依赖若X→Y，但Y属于X,   则称X→Y是平凡的函数依赖。
若X→Y，则X称为这个函数依赖的决定属性组，也称为决定因素。
若X→Y，Y→X，则记作X←→Y。
若Y不函数依赖于X，则记作X→Y。
完全函数依赖与部分函数依赖：
在R(U)中，如果X→Y，并且对于X的任何一个真子集X’，都有X’不依赖 Y, 则称Y对X完全函数依赖。若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖。
传递函数依赖：
在R(U)中，如果X→Y，(Y 不属于X) ,Y不依赖X、 Y→Z，则称Z对X传递函数依赖。注: 如果Y→X，即X←→Y，则Z直接依赖于X。
范式是符合某一种级别的关系模式的集合v关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。
关系数据库的规范化理论是数据库逻辑设计的工具。
目的：尽量消除插入、删除一场，修改复杂，数据冗余。
基本思想：逐步消除数据依赖中不合适的部分。
实质：概念的单一化。",关系数据理论,2022-12-11 20:10:19
2020213308,"设K为R<U,F>中的属性或属性组合。若K  U，则K称为R的侯选码。若候选码多于一个，则选定其中的一个做为主码。
主属性与非主属性：
包含在任何一个候选码中的属性，称为主属性。
不包含在任何码中的属性称为非主属性或非码属性）
全码：整个属性组是码，称为全码。
关系模式R 中属性或属性组X 并非R的码，但X是另一个关系模式的码，则称X是R 的外部码，也称外码。
主码与外部码一起提供了表示关系间联系的手段。
范式是符合某一种级别的关系模式的集合。
关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。
1个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化。
1.如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。
2.若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF。
3.若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。
4.关系模式R<U，F>∈1NF，若X→Y且Y ÍX时X必含有码，则R<U，F> ∈BCNF。等价于每一个决定属性因素都包含码。
5.关系模式R<U，F>∈1NF，如果对于R的每个非平凡多值依赖X→→Y（Y ÍX），X都含有码，则R∈4NF。
若R∈BCNF 的一些性质：所有非主属性对每一个码都是完全函数依赖§所有的主属性对每一个不包含它的码，也是完全函数依赖§没有任何属性完全函数依赖于非码的任何一组属性。
多值依赖：设R(U)是一个属性集U上的一个关系模式，X、Y和Z是U的子集，并且Z＝U－X－Y。关系模式R(U)中多值依赖X→→Y成立，当且仅当对R(U)的任一关系r，给定的一对（x，z）值，有一组Y的值，这组值仅仅决定于x值而与z值无关。
数据依赖的公理系统
对于满足一组函数依赖F 的关系模式R<U，F>，其任何一个关系r，若函数依赖X→Y都成立, （即r中任意两元组t，s，若tX］=sX］，则tY］=sY］），则称F逻辑蕴含X →Y。
Armstrong公理系统：自反律、增广律、传递率。
三种模式分解等价的定义：1.分解具有无损连接性2.分解要保持函数依赖3.分解既要保持函数依赖，又要具有无损连接性。
若要求分解具有无损连接性，那么模式分解一定能够达到4NF。
若要求分解保持函数依赖，那么模式分解一定能够达到3NF，但不一定能够达到BCNF。
若要求分解既具有无损连接性，又保持函数依赖，则模式分解一定能够达到3NF，但不一定能够达到BCNF。",范式和规范化,2022-12-13 16:17:45
2020213308,"数据库设计是指对于一个给定的应用环境，构造（设计）优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。
目标：为用户和各种应用系统提供一个信息基础设施和高效率的运行环境。
方法：
手工与经验相结合方法、规范设计法、新奥尔良方法、基于E-R模型的数据库设计方法、3NF（第三范式）的设计方法、ODL方法、计算机辅助设计。
数据库设计分6个阶段：
1.数据需求分析：包括信息要求、处理要求、安全性与完整性要求。结构化分析方法：自顶向下、逐层分解分析系统。
数据项是不可再分的数据单位。
数据字典是关于数据库中数据的描述，是元数据，而不是数据本身v数据字典在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善。
2.概念结构设计：形成一个独立于具体DBMS的概念模型。描述概念模型的工具§E-R模型。通常以中层数据流图作为设计分E-R图的依据。
设计概念结构的四类方法：自顶向下、自底向上、逐步扩张、混合策略（将自顶向下和自底向上相结合）。
数据抽象：分类、聚集、概括。
视图集成的两种方式：多个分E-R图一次集成、逐步集成：用累加的方式一次集成两个分E-R图。合并、修改与重构。
冲突的种类：属性冲突、命名冲突、结构冲突。
冗余的数据是指可由基本数据导出的数据。冗余的联系是指可由其他联系导出的联系。消除不必要的冗余后的初步E-R图称为基本E-R图。
3.逻辑结构设计：将概念结构转换为某个DBMS所支持的数据模型。
转换内容：将E-R图转换为关系模型：将实体、实体的属性和实体之间的联系转换为关系模式。
一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。
一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。
一个m:n联系转换为一个关系模式。
三个或三个以上实体间的一个多元联系转换为一个关系模式。
具有相同码的关系模式可合并。
关系数据模型的优化通常以规范化理论为指导。并不是规范化程度越高的关系就越优。
按照需求分析阶段得到的各种应用对数据处理的要求，对关系模式进行必要的分解，以提高数据操作的效率和存储空间的利用率。常用分解方法：水平分解、垂直分解。
设计用户子模式：
(1) 使用更符合用户习惯的别名(2) 针对不同级别的用户定义不同的外模式 ，以满足系统对安全性的要求。(3) 简化用户对系统的使用。
4.物理结构设计：为关系模式选择存取方法(建立存取路径)，设计关系、索引等数据库文件的物理存储结构（时间和空间效率）
对同一个关系要建立多条存取路径才能满足多用户的多种应用要求
DBMS常用存取方法：索引方法：目前主要是B+树索引方法、经典存取方法，使用最普遍。聚簇方法、HASH方法。
确定数据存放位置和存储结构的因素：存取时间、存储空间利用率、维护代价。
易变部分与稳定部分分开存放、存取频率较高部分与存取频率较低部分，分开存放。
5.数据库实施：包括建立数据库、编制与调试应用程序、组织数据入库、进行试运行
数据的载入（数据装载方法：人工方法、计算机辅助数据入库）、应用程序的编码和调试。
在原有系统的数据有一小部分已输入数据库后，就可以开始对数据库系统进行联合调试，称为数据库的试运行。
试运行：功能测试、性能测试
6.数据库运行和维护。
在数据库运行阶段，对数据库经常性的维护工作主要是由DBA完成的。",数据库设计,2022-12-14 11:26:49
2020213310,了解并学习到数据、数据库、数据库系统的基本概念、特点与之间的联系；数据模型与概念模型的基本概念与组成部分：概念模型是对信息世界建模，用E-R模型描述现实世界的概念模型；数据模型通常有数据结构、数据操作和数据的完整性约束条件组成。,绪论,2022-09-11 14:33:06
2020213310,"数据、数据库、数据库管理系统、数据库系统的概念：数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合；数据库管理系统是位于操作系统与用户之间的一层数据管理软件；数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。
 网状数据库及层次数据库的优缺点；
关系数据库的特点：关系数据库建立在严格的数学概念的基础上，要求关系必须是规范化的，关系的每一个分量必须是一个不可分的数据项，操作对象和操作结果都是关系。关系模型把存储路径向用户隐蔽起来，大大提高了数据的独立性，提供了用户生产率。",《常见的数据模型》,2022-09-19 22:11:47
2020213310,"关系模型的三个组成部分：数据结构、数据操作、数据的完整性约束；
域：一组具有相同数据类型的值的集合；笛卡尔积：域上面的一种集合运算；关系：D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系；元组：笛卡尔积中每一个元素（d1，d2，...，dn）叫作一个n元组或简称元组；属性：关系中不同列可以对应相同的域，为了加以区分，必须对每列起一个名字，称为属性；
主码：若一个关系有多个候选码，则选定其中一个为主码；
候选码：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码；
关系模式：对关系的描述；
关系：D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系；
关系数据库：在一个给定的应用领域中，所有关系的集合构成一个关系数据库。",《关系数据库》第一、二节,2022-09-19 22:14:30
2020213310,"关系的完整性：①实体完整性：若属性A是基本关系R的主属性，则属性A不能取空值；参照完整性：若属性或属性组F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中的每个元组在F上的值必须为：（1）空值，F的每个属性值均为空值；（2）S中某个元组中的主键值（主码值）。用户定义的完整性：针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。
关系代数中传统的集合运算：并（U）；差（-）;交（∩）;笛卡尔积（×）;计算包括N1，N2个元组de1两个关系式四种运算方式的最大、最小元组的数目以及列的数目。",《关系数据库》第三、四节,2022-09-29 22:05:33
2020213310,"等值连接和自然连接的区别与联系.
区别：等值连接不要求两个关系中进行比较的分量是相同的属性组，而只要可以进行相
等比较即可，是从行进行的一种运算。而自然连接要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的属性列去掉，是从行和列进行的一种运算。
联系：等值连接是关系的广义笛卡尔积的子集。自然连接是一种特殊的等值连接。即两者都是两个关系连接之后的产物。
",关系数据库（续）,2022-10-31 14:37:33
2020213310,"结构化查询语言，是关系数据库的标准语言；
 SQL的特点：集数据定义语言（DDL），数据操纵语言（DML），数据控制语 言（DCL）功能于一体。 一、可以独立完成数据库生命周期中的全部活动：定义关系模式，插入数据， 建立数据库； 二、对数据库中的数据进行查询和更新；数据库重构和维护数据库安全性、 完整性控制等； 三、用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运 行； 四、数据操作符统一。 SQL的基本概念： 一、基本表：①本身独立存在的表；②SQL中一个关系就对应一个基本表；③ 一个 (或多个)基本表对应一个存储文件；④一个表可以带若干索引； 二、存储文件：逻辑结构组成了关系数据库的内模式、物理结构是任意的，对 用户透明； 三、视图：从一个或几个基本表导出的表；数据库中只存放视图的定义而不存 放视图对应的数据；视图是一个虚表；用户可以在视图上再定义视图。
",关系数据库标准语言SQL,2022-10-31 14:39:30
2020213310,"SQL的数据定义功能: 模式定义、表定义、视图和索引的定义；
关系可以有三种类型：基本关系(又称基本表)、査询表和视图表。 基本表是实际存在的表，它是实际存储数据的逻辑表示；查询表是査询结果对应的表；视图表是由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。 视图是一种虚拟的表，是一个为了简化复杂查询语句的书写，另外也提高了数据库一定的安全性。 查询是利用sql语句按照用户的需求自定义查询，更加灵活，查一次用一次。select查询的是一个结果集（元组的集合），视图是一个虚标。",关系数据库标准语言SQL,2022-10-31 15:03:12
2020213310,"单表查询：SQL提供了SELECT语句进行数据查询 SELECT [ALL | DISTINCT]<目标列表达式>[,<目标列表达式>]··· FROM<表名或视图名>[,<表名或视图名>···] | (SELECT语句>)[AS]<别名> [WHERE<条件表达式>] [GROUP BY<列名1>[HAVING<条件表达式>]] [ORDER BY<列名2>[ASC | DESC]]; 整个SELECT语句的含义是，根据WHERE子句的条件表达式从FROM子句指定的基本表、视图或派生表中找出满足条件的元组，再按SELECT子句中的目标列表达式选出元组中的属性值形成结果表。 如果有GROUP BY子句，则将结果按<列名1>的值进行分组，该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。如果GROUP BY子句带HAVING短语，则只有满足指定条件的组才予以输出。 如果有ORDER BY子句，则结果还要按<列名2>的值的升序或降序排序。 SELECT语句既可以完成简单的单表查询，也可以完成复杂的连接查询和嵌套查询。
连接查询：连接查询是关系数据库中最主要的查询，主要包括内连接、外连接和交叉连接等。通过连接运算符可以实现多个表查询。 在关系数据库管理系统中，表建立时各数据之间的关系不必确定，常把一个实体的所有信息存放在一个表中。当检索数据时，通过连接操作查询出存放在多个表中的不同实体的信息。 连接操作给用户带来很大的灵活性，他们可以在任何时候增加新的数据类型。为不同实体创建新的表，然后通过连接进行查询。 内连接是一种最常用的连接类型。内连接查询实际上是一种任意条件的查询。使用内连接时，如果两个表的相关字段满足连接条件，就从这两个表中提取数据并组合成新的记录，也就是在内连接查询中，只有满足条件的元组才能出现在结果关系中。 如果在一个连接查询中，涉及到的两个表都是同一个表，这种查询就称为自连接查询。同一张表在FROM字句中多次出现，为了区别该表的每一次出现，需要为表定义一个别名。 自连接是一种特殊的内连接，它是指相互连接的表在物理上为同一张表，但可以在逻辑上分为两张表。 内连接的查询结果都是满足连接条件的元组。但有时我们也希望输出那些不满足连接条件的元组信息。
嵌套查询：在SQL语言中，一个 SELECT-FROM-WHERE 语句称为一个查询块。将一个查询块嵌套在另一个查询块的 WHERE 子句或 HAVING 短语的条件中的查询称为 嵌套查询。例如： SELECT Sname /*外层查询或父查询*/ FROM Student WHERE Sno IN (SELECT Sno /*内层查询或子查询*/ FROM SC WHERE Cno='2'); SQL语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。",SQL查询,2022-10-31 16:21:34
2020213310,"1、连接是关系型数据库的主要特点。连接查询是关系型数据库中最主要的查询，主要包括内连接、外连接等 ⑴连接查询：也可以叫跨表查询，需要关联多个表进行查询
2、通过连接运算符可以实现多个表查询
3、在关系数据库管理系统中，表建立时各数据之间的关系不必确定，通常把一个实体的所有信息存放在一个表中
    ⑴当查询数据时，通过连接操作查询出存放在多个表中的不同实体信息
    ⑵当两个或多个表中存在相同意义的字段时，便可以通过这些字段对不同的表进行连接查询
1、在实际开发中，如果把所有数据都放在一个表中的话，那么这个表就会显得非常臃肿，不利于表、数据的维护等
2、因此，一般一个业务都会对应多张表，比如：学生和班级，起码两张表
3、这种情况下，大部分的情况都不是从单表中查询数据的，一般都是多张表联合查询取出最终的结果
    ⑴比如：这里要查询学生班级的信息，那么就会涉及到两张表，需要将两张表以一定的方式关联起来，然后进行查询。这种就是连表查询
4、连接查询总的来说，就是：将多张表连接起来进行查询，最终查询出来的数据可以来自于不同的表
    ⑴同时查询不同表中的数据",连接查询,2022-11-24 12:02:02
2020213310,"子查询也称“内部查询”或者“嵌套查询”，是指将一个 SELECT 查询（子查询）的结果作为另一个 SQL 语句（主查询）的数据来源或者判断条件。
子查询可以嵌入 SELECT、INSERT、UPDATE 和 DELETE 语句中，也可以和 =、<、>、IN、BETWEEN、EXISTS 等运算符一起使用。
子查询常用在 WHERE 子句和 FROM 子句后边：
当用于 WHERE 子句时，根据不同的运算符，子查询可以返回单行单列、多行单列、单行多列数据。子查询就是要返回能够作为 WHERE 子句查询条件的值。
当用于 FROM 子句时，一般返回多行多列数据，相当于返回一张临时表，这样才符合 FROM 后面是表的规则。这种做法能够实现多表联合查询。",嵌套查询,2022-11-24 12:04:39
2020213310,"数据更新包括数据的插入、修改、删除三类操作。
1.单行数据插入的一般形式为：
INSERT INTO 表名（列名1，列名2，…，列名n）
VALUES（常量1，常量2，…，常量n）
其中：表名为要插入数据的目录表；在新记录中，列名1的值是常量1，列名2的值是常量2，…，列名n的值是常量n。INTO子句中没有出现的目录表属性列额，在新数据中，将默认为空值。
数据插入也可以将子查询结果及多条数据记录批量插入目标录。一般格式如下：
INSERT INTO 表名（列名1，列名2，…，列名n）
数据修改的关键词是UPDATE，一般格式为：
UPDATE 表名
SET 更新内容
WHERE 更新条件
其中，SET子句中的更新内容是以“属性名=表达式”的形式出现的。
数据删除的关键词是DELETE，一般格式为：
DELETE
FROM表名
WHERE 删除条件
其中，DELETE子句删除表中的数据，并不影响表的结构。
",数据更新,2022-11-24 13:53:51
2020213310,"数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。
系统安全保护措施是否有效是数据库系统主要的性能指标之一。
编写合法程序绕过数据库管理系统及其授权机制
直接或编写应用程序执行非授权操作
通过多次合法查询数据库从中推导出一些保密数据
在一般计算机系统中，安全措施是一级一级层层设置的。
系统首先根据用户标识鉴定用户身份，合法用户才准许进入计算机系统
数据库管理系统还要进行存取控制，只允许用户执行合法操作
操作系统有自己的保护措施
数据可以以密码形式存储到数据库中",数据库安全性,2022-11-24 14:05:58
2020213310,"关系模型中有完整性要求：
实体完整性
参照完整性
用户自定义完整性
不正当的数据库操作，如输入错误、操作失误、程序处理失误等
数据库完整性管理的作用
防止和避免数据库中不合理数据的出现。
DBMS应尽可能地自动防止DB中语义不合理现象。
如DBMS不能自动防止，则需要应用程序员和用户在进行数据库操作时处处加以小心，
每写一条SQL语句都要考虑是否符合语义完整性，这种工作负担是非常沉重的，因此应尽可能多地让DBMS来承担。",数据库完整性概念和分类,2022-11-24 14:11:58
2020213310,"对于基本表的约束分为列约束和表约束
约束是限制用户输入到表中的数据的值的范围，一般分为列级约束与表级约束。
列级约束有六种：主键Primary key、外键foreign key 、唯一 unique、检查 checck 、默认default 、非空/空值 not null/ null
表级约束有四种：主键、外键、唯一、检查
列约束是对某一个特定列的约束，包含在列定义中，直接跟在该列的其他定义之后，用空格分隔，不必指定列名；
表约束与列定义相互独立，不包括在列定义中，通常用于对多个列一起进行约束，与列定义用’,’分隔，定义表约束时必须指出要约束的那些列的名称。完整性约束的基本语法格式为：
[ CONSTRAINT <约束名> ] <约束类型>
约束名：约束不指定名称时，系统会给定一个名称。
列级约束与表级约束的区别
如果完整性约束涉及到该表的多个属性列，必须定义在表级上，否则既可以定义在列级也可以定义在表级。
简而言之：
列级约束:列级约束是行定义的一部分，只能应用于一列上。
表级约束:表级约束是独立于列的定义，可以应用在一个表中的多列上。",表完整性与列完整性,2022-11-24 14:17:30
2020213310,"DDL触发器：针对数据库 ，在创建一个表或者修改，删除时会触发DDL这样一个触发器，这个触发器可以防止对数据库架构进行某些更改，希望数据库中发生某种情况以响应数据库架构中的更改，要记录数据架构中的更改或者事件。
2.DML触发器：数据操作语言，它包含三种触发器分别是：
（1）INSERT触发器
（2）UPDATE触发器
（3）DELETE触发器",触发器,2022-11-24 14:22:55
2020213312,主要学习了E-R图，课本、上课要求、考核方式等，云课堂讨论了两个问题。,第一节课（第2周）,2022-09-11 22:34:38
2020213312,"1.复习了四个概念
2.数据模型：概念模型——>逻辑模型——>物理模型
3.非关系模型包括层次模型、网状模型
4.层次模型一对多时，有邻接和链接法，链接又分为子女-兄弟和层次序列（先序广度优先，邻接同），多对多分解为多个一对多
5.关系模型规范化：不允许表中有表；完整性约束条件：实体完整性、参照完整性、用户定义的完整性
6.模式映像类似于三级模式的转换过程
",二,2022-09-13 15:53:14
2020213312,"1.关系（二维表）横着是元组，竖着是属性（注意和域的区别，不同属性可以相同域）
2.候选码可以唯一标识元组（可以多个属性），全码即所有属性都是候选码，候选码中选定一个为主码。候选码中的属性为主属性，其他为非主属性或非码属性
3.笛卡尔积的子集才有意义（笛卡尔积是每个域各取一个值的所有组合）
4.关系模式是型，关系是值
5.关系模式（关系的描述）可以形式化地表示为：
    R（U，D，DOM，F）
R关系名
U组成该关系的属性名集合
D属性组U中属性所来自的域
DOM属性向域的映象集合
F属性间的数据依赖关系集合
6.关系代数语言用对关系的运算来表达查询要求；关系演算语言用谓词来表达查询要求，包括元组关系演算语言、域关系演算语言。SQL都可",三,2022-09-19 15:30:33
2020213312,"关系代数中传统的集合运算：
前三个运算要求R和S具有相同的目（属性个数），且相应属性取自同一个域
1.并，结果仍为n目关系，由属于R或属于S的元组组成
2.差，由属于R而不属于S的所有元组组成（注意R和S的位置）
3.交，由既属于R又属于S的元组组成，R∩S=R-(R-S）
4.（广义）笛卡尔积，n目关系R和m目关系S的笛卡尔积是一个n+m列的元组的集合。若R有k1个元组，S有k2个元组，则关系R和关系S的笛卡尔积有k1*k2个元组（即互相组合）",四,2022-10-14 10:18:06
2020213312,"专门的关系运算：
1.选择：选出满足给定条件的元组（一般选属性或属性组等于某一值）
2.投影：选出若干属性列组成新的关系（如果有重复行删除）
3.连接：从两个关系的笛卡尔积中选取属性间满足一定条件的元组。如果关系为相等，就是等值连接。等值连接中比较同名属性组并把重复列去掉，就是自然连接，被舍弃的元组称为悬浮元组。外连接，左/右外连接，P55.
4.除运算P55看书体会，重点记忆",五,2022-10-14 10:56:32
2020213312,"1.理论知识：，查询DQL，控制DCL，操纵DML，定义DDL，数据库管理系统DBMS。数据库的三级模式中的基本对象有模式、表、视图和索引等，其中模式和视图无修改。
2.（只记录重点和注意点，语法公式书上画红）模式和基本表的删除时有CASCADE和RESTRICT之分，CASCADE有联想、强制删除之意，RESTRICT则表示限制、保护。
3.语句的通用格式中<>表示要填入格式中阐述的内容，同时真正写语句时不加<>，而[]内表示可选的内容，需要就填。
4.数据查询：一般格式P89。DISTINCT可以删去重复内容，WHERE中放条件，GROUP BY可以实现分组。
5.巧用聚集函数P97，看例3.46的分组方法。
6.嵌套循环用（）
7.EXISTS一般做谓词后跟子查询，不返回数据，只产生逻辑真假值。
WHERE EXISTS
(SELECT...)
重点看例3.62理解
8.集合查询即连接两个SELECT，和平时的并交差意义一样。",六（没上课，自学）+七,2022-10-30 18:59:30
2020213312,"1.数据更新，分为插入，修改，删除。
2.插入元祖，注意列和值对应，如果没有给出属性列，要给出全部列的值。还可以插入子查询结果。用INSERT
3.可以修改一个或多个元组的值，WHERE中写条件找到要修改的元组，可以是子查询。用UPDATE
4.删除类似修改。
5.视图能够简化用户操作，丰富用户看数据的角度，对重构数据库提供了一定逻辑独立性，能够提供安全保护，还可以更清晰地表达查询。
6.视图是虚表，可以理解为从原来的表上筛选了一些信息表达，像一个指针，更新视图会更新它的来源的表。但要注意有的不允许更新和不可更新的视图。语句格式在P121
7.学习了SQL Server的建表等简单操作。",八（10.31）,2022-11-07 12:40:28
2020213312,"1.数据库的不安全因素有三个，书P133，TCSEC和CC两种标准
2.存取控制分为两种，自主存取控制和强制存取控制
3.自主存取控制语句：GRANT授权，例4.4授权单独列，还有注意WITH GRANT OPTION；REVOKE收回。创建权限（即GRANT语句中TO后面的那个“操作者/用户”，有三种，CONNECT RESOURSE DBA
4.角色是权限的集合，可以把几种操作授予几个用户，书上P146、147例子
5.强制存取控制，四个密级次序，两个规则。图4.5先自主存取控制检查，再强制存取控制检查，都通过才可以存取",九为复习，十,2022-11-21 12:17:42
2020213312,"1.实体完整性，不需要写检查和动作，出错时系统拒绝。设置方法和前面所学相同。
2.参照完整性，违约处理可以有NO ACTION（默认），CASCADE，和设置为空值。
3.用户定义的完整性，分为属性上的约束条件如NOT NULL，UNIQUE，CHECK和元组上的约束条件，不满足条件系统则拒绝。
4.还可以为完整性约束命名，这样方便以后删除。语句为CONSTRAINT 名字 条件
5.触发器表示动态操作时的检查与动作。P169一般格式，重点看后两页的例子和详解。FOR EACH ROW 可以对应使用引用NEWROW和OLDROW，AS后相当于起了一个别名；FOE EACH STATEMENT对应NEWTABLE和OLDTABLE。",十一,2022-11-21 18:47:22
2020213312,"一，关系数据理论之规范化
1.关系的五元组表示
R（U，D，DOM，F）分别表示
关系名，属性，域，映像，依赖
2.数据依赖的类型有函数依赖，多值依赖和其他。
函数依赖分类：平凡与非平凡，完全与部分，传递（具体看书或PPT）
3.范式
1NF→消除非主属性对码的部分函数依赖→2NF→消除非主属性对码的传递函数依赖→3NF→消除主属性对码的部分和传递函数依赖→BCNF→消除非平凡且非函数依赖的多值依赖→4NF
二，数据库设计之概念结构设计
1.描述概念模型的工具是E-R模型（E-R图）
2.四种方法：自顶向下，自底向上，逐步扩张，混合策略
3.局部视图设计
三种常用抽象：分类（型和值，is member of），聚集（对象内部，is part of），概括（类型之间，is subset of）
两条准则：属性不可再分，联系只发生在实体之间
4.视图的集成，合并
冲突：属性，命名，结构",十二，十三，线上自学,2022-12-05 16:41:33
2020213313,第一章第一节,本节课学了第一章第一节，有四个部分：数据库系统概述，数据模型，数据库系统结构，数据库系统的组成。数据库系统概述学习了四个基本概念：数据，数据库，数据库管理系统，数据库系统。数据模型学习了两大类数据模型，数据模型的组成要素。概念模型中，我们了解了信息世界中的基本概念以及两个实体型之间的联系，以及学会用E-R来表示联系。,2022-09-12 15:40:25
2020213313,本节课学习了数据模型，以及数据模型的组成要素。重点学习了层次模型，网状模型，关系模型等几个模型。,第一章第二节,2022-09-12 15:45:25
2020213313,"这节课学习了关系数据结构及形式化定义与关系操作。
其中关系的数据结构——关系模型有关的基本概念如：域，笛卡尔积，关系的属性与主码，候选码。
还学习了关系的基本操作有哪些，以及关系数据语言的分类。",第二章第一节第二节,2022-10-30 22:05:24
2020213313,"这节课讲了关系的三类完整性约束：实体完整性，参照完整性和用户定义的完整性。
还讲了关系运算中的传统的集合运算，如：并，差，交，补。",第二章第三节,2022-10-30 22:10:00
2020213313,本节课讲了专门的关系运算，包括选择，投影，连接，除运算等。并学习了如何表示各种运算，以及如何运算。,第二章第四节,2022-10-30 22:16:05
2020213313,"本节课讲述了关系数据库SQL的产生与发展，SQL的特点以及SQL的基本概念，还讲述了数据库的数据定义功能：模式定义与删除、表定义删除与修改、视图和索引的建立与删除。其中特别明确了CASCADE与RESTRICT的区别。
还讲了数据查询中的单表查询。",第三章第一节第二节第三节,2022-10-30 23:19:41
2020213313,本节课学了数据查询中的连接查询，嵌套查询，集合查询与基于派生表的查询以及SELECT语句的一般格式。其中连接查询分为等值连接，非等值连接，自身连接，外连接，与多表连接。以及相关子查询与非相关子查询的概念。带有IN ALL ANY EXSITS 的子查询。,第三章第四节,2022-10-31 00:04:08
2020213313,"本节课学了数据更新与视图。其中数据更新包括插入数据，修改数据与删除数据。其中需要注意的是删除数据中DELETE与DROP不同，DROP是删除表的定义，而DELETE是删除表中的数据，表的定义仍存在字典中。
视图学习了视图的定义，删除，查询与更新，以及视图的作用。
其中视图的查询可采用视图消解的办法，即把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询。视图的更新最终要转换为对基本表的更新。",第三章第五节与第六节,2022-10-31 16:27:32
2020213313,这节课巩固了数据查询的相关知识，通过做题加深了如何用语句实现数据查询。,第三章巩固习题课,2022-11-12 16:35:30
2020213313,"这节课学习了数据库的安全性。计算机安全性的概述，如计算机安全性的标准，如TCSEC,CC标准。数据库安全性控制的常用方法。如用户标识与鉴定，存取控制，视图，审计以及密码储存。其中关于存取控制，有自主存取控制与强制存取控制。自主存取控制的方法通过SQL 的GRANT语句和REVOKE语句实现，定义存取权限称为授权。使用角色来管理数据库权限可以简化授权过程，CREATE  ROLE语句创建角色，GRANT 语句给角色授权。
",第四章第一节,2022-11-20 10:17:22
2020213313,这节课学习了数据库的完整性，数据库的完整性是指数据的正确性和相容性。数据的正确性是指数据是符合现实世界语义，反映当前实际状况的；数据的相容性是指数据库的同一对象在不同关系表中的数据是符合逻辑的。维护数据库的完整性，数据库管理系统必须实现如下功能：提供定义完整性约束条件的机制，提供完整性检查的方法，进行违约处理。其中关系模型的实体完整性在CREATE TABLE 中用PRIMARY KEY 定义。有两钟说明方法，一是定义为列级约束条件，另一种是定义为表级约束条件。触发器是用户定义在关系表上的一类由事件驱动的特殊过程：由服务器自动激活，可以实施为更为复杂的检查和操作，具有更精细和更强大的数据控制能力。,第五章第一节,2022-11-28 16:54:05
2020213313,"这节课我们学习了关系数据理论。针对具体问题，如何构造一个适合于它的数据模式，数据库逻辑设计的工具──关系数据库的规范化理论。关系模式的形式化定义，数据依赖的定义，关系模式的简化表示，数据依赖对关系模式的影响以及分解关系模式。以及关系模式的规范化，规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
",第六章,2022-11-28 17:05:11
2020213313,这节课学习了数据库设计概述以及需求分析，包括数据库设计的特点，方法，基本步骤，设计过程中的各级模式。数据库设计分为6个阶段：需求分析、概念结构设计，逻辑结构设计，物理结构设计，数据库实施，以及数据库运行和维护。还有需求分析的任务和方法以及数据字典。,第七章第一节,2023-01-01 19:48:30
2020213313,这节课主要学习了概念结构设计以及逻辑结构设计。如何进行概念结构的设计以及主要步骤。如何实现E-R图向关系模型的转换，其转换原则与转换内容:逻辑结构设计的步骤包括：将概念结构转化为一般的关系、网状、层次模型；将转化来的关系、网状、层次模型向特定DBMS支持下的数据模型转换；对数据模型进行优化；设计用户子模式。,第七章第二节,2023-01-01 21:27:01
2020213313,"这节课主要学习了数据库的物理设计以及实施和维护。数据库物理设计的步骤：确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构；对物理结构进行评价，评价的重点是时间和空间效率。还有数据库物理设计的内容和方法，关系模式存取方法选择，以及确定数据库的储存结构，评价物理结构。数据库的实施与维护包括数据的载入和应用程序的调试，数据库的试运行以及数据库的运行和维护。
",第七章第三节,2023-01-01 21:31:38
2020213315,本节课老师向我们阐述了数据库的大部分基础概念并通过几个实例和让我们自己动手画E-R图更加清晰了解部分概念。内容不多也并不复杂，期待老师后续的教授。,第一章 绪论 （1）,2022-09-13 11:05:39
2020213315,本节课老师着重介绍了数据库常用的几个数据模型，课间的小测也让我回顾并加深了对本章节内容的记忆，课下也学习了本章的自学部分，感觉难度有些提升。,第一章 绪论 （2）,2022-09-13 11:09:37
2020213315,本节课的学习中关系模型的储存还需进一步自学了解。,第二章 关系数据库 （1）,2022-10-10 20:08:40
2020213315,本节课我们学习了基本的关系操作并了解了关系的完整性。,第二章 关系数据库 （2）,2022-10-10 20:09:25
2020213315,本节课我们学习了传统的集合运算并差交和笛卡尔积，课下还需努力掌握。,第二章 关系数据库 （3）,2022-10-10 20:10:39
2020213315,本节课我们学习了专门的关系运算，难度有些许提升。,第二章 关系数据库 （4）,2022-10-10 20:11:23
2020213316,大致了解了数据库系统以及数据模型中的概念模型。如四个基本概念，包括什么是数据，什么是数据库系统等，还有了解了E-R图该如何表示概念模型,绪论1.1，1.2,2022-09-05 16:49:44
2020213318,"数据：描述事物的符号记录
数据库：长期储存在计算机内、有组织的、可共享的大量数据的集合。
数据库管理系统：位于用户与操作系统之间的一层数据管理软件。
数据库系统：包括数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员

数据模型：概念模型、逻辑模型和物理模型
数据模型要素：数据结构、数据操作、完整性约束条件
概念模型：实体、属性、码、域、实体型、实体集、联系
表示方法：ER图
",第一章反思,2022-09-12 12:31:22
2020213318,"数据库中的非关系模型包含层次模型和网状模型，层次模型就是数据结构中的树，而网状模型则是图，层次模型是一种特殊的网状模型。
关系模型中数据的逻辑结构是一张二维表，列是属性，行是元组。
能够保证数据库系统中的数据具有较高的逻辑独立性的是外模式/模式映像。",第二课反思,2022-09-19 00:35:28
2020213318,"域是一组具有相同数据类型的值的集；笛卡尔积是所有域的所有取值的不能重复的组合，D1，D2，...，Dn的笛卡尔积为：D1×D2×...×Dn＝｛（d1，d2，...，dn）｜diDi，i＝1，2，...，n｝；D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系，表示为R（D1，D2，...，Dn），关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域；
关系中的每个元素是关系中的元组；关系中不同列可以对应相同的域，为了加以区分，必须对每列起一个名字，称为属性。
若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码；若一个关系有多个候选码，则选定其中一个为主码。
关系模式是型，包含元组集合(关系)的结构、元组语义以及完整性约束条件、属性间的数据依赖关系集合；关系是值；关系模式是对关系的描述，关系模式在某一时刻的状态或内容；在一个给定的应用领域中，所有关系的集合构成一个关系数据库",第三课反思,2022-09-26 12:08:53
2020213318,"数据库需满足三类完整性约束：实体完整性、参照完整性、用户定义的完整性。前两者是关系的两个不变性，应该由关系系统自动支持。
实体完整性：
若属性A是基本关系R的主属性，则属性A不能取空值。
参照完整性：
若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：取空值（F的每个属性值均为空值）或者等于S中某个元组的主码值。
关系代数运算：并、差、交、笛卡尔积。",第四课反思,2022-10-10 12:13:57
2020213320,"这一次课程主要学习了各种传统的集合运算。由于以前中学的数学学习的知识，再加上这一部分之前在网上认真预习过，所以学起来还是比较轻松的。这些运算包括并、差、交和笛卡尔积。
R并S是由属于R或者属于S的所有元素组成的。
R差S是由属于R而不属于S的所有元素组成的。
R交S是由既属于R又属于S的所有元素组成的。
",第二章关系数据库 2.4关系代数,2022-10-03 15:16:12
2020213322,"本节课首先学习了层次模型，它的数据库系统典型代表为IBM的IBS，由于曾经学习过数据结构，所以层次模型内的很多概念都很熟悉，比如说双亲结点、根结点、兄弟结点、叶结点，而层次模型中有查询、插入、删除、更新四种操纵，儿层次模型也有一些约束条件，双亲结点是一个关键。随后还介绍了层次模型的不同存储结构，包括普通的子女-兄弟链接法和以前序遍历的层次序列链接法，层次模型的优点主要是简单，而缺点主要是多对多难表示以及数据操作较复杂。
其次是网状模型，它允许结点的双亲结点个数大于等于0，其中它的数据结构表示方法以实体型、属性、联系构成，它用于表示多对多的联系，而其优点是更好描述现实世界与更高的效率，而缺点是结构复杂不易于用户掌握。
最后是关系模型，它的数据结构由关系、元组、属性，其中一些主码、域、关系模式的概念需要认真理解记忆，包括关系模式下对应的术语，要注意的是关型模型中不允许表中有表，以及记住关系的完整性三个约束条件：实体完整性、参照完整性、用户定义的完整性，关系模型优点是概念单一且存储路径透明但查询效率低",第一章-2,2022-09-19 12:50:16
2020213322,这节课首先介绍了有关数据库的几个基本概念，比如数据、数据库、DBMS和DBS，比较新颖的是DBMS和DBS，了解他们的功能。此外还有数据模型的构成，如何去理解完整性约束条件。此外，这节课最重点的地方我认为是信息世界中的概念，包括了实体、属性和码等，如何看待两个实体型之间的联系，辨别到底是一对一、一对多还是多对多，最后介绍的E-R方法和E-R图很有趣，在画E-R图时要注意很多东西，包括用什么样的框和线，实体型和属性之间的联系以及联系名的起法，自己真正实践时，要注意从局部画起，并注意不同局部图存在相同属性时，它们的属性名要相同，避免出现冲突，且实体型的属性要统一一致。,第一章-1,2022-09-19 12:50:34
2020213322,"本节课进入第二章，学习关于关系数据结构的内容。首先是域（相同数据类型值的集合）、笛卡尔积（域取值的组合->每一个元素为n元组，元素值为分量，以二维表表示，行为元组列为域）、关系（与域有关，其子集为关系，同样可用二维表表示）。
接着在关系的各种概念中，要重点注意码的概念：候选码是能唯一标识元组的属性组，全码表示所有属性组都可以成为候选码，主码是候选码选其一，主属性为候选码存在的属性。
基本关系中，要注意几个特征（列同域、元组候选码不同、分量为值不为表）；关系模式R(U,D,DOM,F)是对关系的描述，一静一动。
在关系数据库（某一时刻的关系的集合）中，关系操作有常见的查询（选择、投影、并、差、笛卡尔积）、数据更新，其操作特点是“集合操作”，对象结果都是集合。",第二章-1,2022-10-30 15:17:37
2020213322,"在关系数据库中，有型与值两个概念，关系数据库模式包括若干域的定义和域上的若干关系模式，值则指的是关系模式某一时刻对应的关系集合。
接下来是有关关系的三类完整性：实体完整性、参照完整性和用户定义的完整性。实体完整性中，基本关系R的主属性不能取空值，这个基本表通常对应现实中的实体集；对于参照完整性而言，F为R中非码属性，与关系S住吗对应，则F为R外码，R为参照关系，S为被参照关系，（例子：专业号为学生关系的外码，这里要注意他们都定义在同一域，而R上的F值必须是空值或S中主码值，如专业号要么空值未分配专业，要么对应专业关系的专业号）；用户定义的完整性指的是针对某一具体关系数据库的约束条件需要满足语义要求。
接着是有关关系代数基本运算，这里多看例子进行理解.",第二章-2,2022-10-30 21:03:12
2020213322,"本次课程主要学习专门的关系运算，首先要理解各种符号。
象集可以理解为求同一关系另一属性组中相同对应值的集；选择σ，以行的角度考虑，比如查询信息系的学生σSdept='IS'(Student)；投影π，以列的角度考虑，比如查询学生姓名和系πSname，Sdept(Student)；连接   ，将两个关系连接起来，分为自然连接（相同属性组不含重复属性列）、一般链接（不同惯性的属性不同，要区分），等值连接（要求比较的属性相同），外连接（左右边舍弃元组保留），除（去除A中含B属性的元组，即象集，这里要好好看例子）",第二章-3,2022-11-06 10:36:17
2020213322,本次重点学习了SQL的数据查询，涉及了很多例子，大致分为几类：①查询列（某些属性，可以更改列名）②选择元组（查询某系学生，年龄小于某个值学生、有不及格的学生DISTINCT）③集合查询（WHERE xx IN、LIKE NOT LIKE、空值查询④ORDER BY、GROUP BY分组⑤聚集函数（SUM COUNT AVG MAX）。此外还有关于连接的运算（等值连接‘=’，自身链接【注意起别名】，外连接，复合条件连接），EXISTS的使用，带谓词的子查询以及它们之间的含义表达式转换。一看不算很难，但要根据题目具体条件进行一步步拆解，嵌套或连接，更要学会如何去进行函数的转换。,第三章-2,2022-11-06 11:03:48
2020213322,"本次课学习有关数据更新的相关知识，包括了插入数据、修改数据和删除数据三个概念。首先是插入数据，它有两种方式（元组、子查询结果），它使用INSERT INTO表VALUES常量的形式进行插入，要求VALUES提供的值要和INTO语句个数类型匹配；而插入子查询结果类似于嵌套，不提供VALUES而是直接加入SELECT语句实现插入，两种方式都需要RDBMS进行用户完整性规则检查。其次是修改数据，它的功能是修改表中满足WHERE条件的元组，格式UPDATE表名SET A=B WHERE条件，其中，修改的时候，可以在SET语句进行单独修改，也可以整列修改（e.g. age=age+1),同样，修改数据操作也可以实现嵌套。最后是删除数据，方式是DELETE FROM表WHERE条件，如果条件缺失则是删除全部元组，但是表定义存在，同样，删除操作可以多种修改。
此外还有视图的学习，视图由基本表到处，只存放定义，随数据改变而变，有关视图的操作有定义、查询、更新。建立视图为CREATE VIEW视图名AS子查询，而子查询不允许ORDER BY和DISTINCT的存在，而允许GROUP BY的使用，如果SELECT跟带的是*，则要求表属性的结构需对应，如果原表进行了列的增删，那么新表就会不对称；删除视图为 DROP VIEW 视图名，它用于在字典中删除指定视图，也包括了CASCADE。查询视图跟表查询语句类似，前提还要进行视图的子查询定义。更新视图的格式是UPDATE视图 SET更改属性 WHERE条件，但要注意有些视图不可更新。最后，视图能够简化用户的操作，对重构数据库提供逻辑独立性，对数据提供安全保护并利于清晰的表达查询。",第三章-3,2022-11-12 15:02:57
2020213322,"本节课探讨了数据库的安全性，首先安全性是由共享的特点引申的，这个共享不能是无条件的共享。计算机考虑的安全性（技术安全、管理安全、政策法律）主要保护硬件、软件和数据，有TCSEC/TDI和CC标准。
有关数据库的安全性。首先是会有非法使用数据库的情况，绕过DBMS进行操作或多次合法查询推导保密数据。对于数据库的安全性控制，①用户标识与识别：这是系统提供最外层的安全保护措施，以核对口令鉴别身份，但容易被窃取②存取控制：定义用户权限并进行检查，这构成了DBMS安全子系统，包含自处存取控制DAC和强制存取控制MAC③自主存取控制：通过GRANT和REVOKE实现，由数据对象和操作类型组成，通过授权决定用户在哪些数据库进行哪些类型的操作，缺点是存在无意泄露，数据本身并无安全性标记④有关授权和回收（GRANT SELECT ON TABLE Student TO U1即把S表授权给U1）（GRANT ALL PRIVILIGES\\UPDATE(Sno）(TO PUBLIC)(WITH GRANT OPTION即允许再授权)(REVOKE类似，要注意回收的时候是级联收回)⑤数据库角色：角色是权限的集合，可以简化授权的过程。（CREATE ROLE R1````TO R1````GRANT R1 TO WHO）⑥强制存取控制方法，有更高的安全性，会进行数据敏感度标记（许可证级别和密级)，只有许可证大于密级才可读取，许可证等于密级才可写。
有关视图机制，即把要保密的数据对无权存取的用户隐藏。",第四章,2022-11-23 10:40:46
2020213322,"本章讲述了数据库的完整性。完整性防止的是不合乎语义的数据，DBMS提出了三个操作维护数据库的完整性：①提供定义完整性约束条件机制②提供完整性检查方法③违约处理。
实体完整性在单属性中可以用列级（定义属性同时定义主码）或表级约束条件（先定义属性后定义主码）说明，多属性中只能用表级约束条件说明，在进行主码更新操作时，RDBMS会检查主码是否唯一以及是否为空。
参照完整性即外码FOREIGN KEY，一般进行表级完整性定义，在检验时会考虑是否破坏完整性执行拒绝、级联删除、空值操作。
用户定义的完整性体现在语法中的NOT NULL、UNIQUE、CHECK标识，违反则会被拒绝执行，且CHECK可以定义元组上的约束条件（e.g:SSEX=F OR SNAME NOT LIKE 'Ms.%'),此外还有CONSTRAINT语句约束。如果要修改约束条件，可以使用ALTER TABLE和DROP语句
触发器是用户定义在关系表上的一类由事件驱动的特殊过程，它由服务器自动激活并且可以进行更为详细复杂的检查与操作，目前有三种触发器（定义、激活、删除触发器）。定义触发器由所有者创建，以INSERT、DELETE、UPDATE进行触发（行级触发器和语句级触发器）；激活触发器由触发事件激活，并由数据库服务器自动执行；删除触发器则用到了DROP TRIGGER xxx ON xxx.",第五章,2022-11-28 21:57:26
2020213322,"本章讲述了有关关系数据理论。首先先回顾了几个概念：关系、关系模式、数据依赖，在这些关系模式中，存在一些冗余的关系模式会导致数据的插入错误，因此需要进行关系模式的分解，即进行规范化。
函数依赖的概念要结合具体例子理解，例如学生SC中SNO和CNO决定成绩是非平凡函数依赖，而SNO,CNO决定SNO是平凡函数依赖，另外还有部分函数依赖，即主码中的单一属性也能决定非主属性，传递函数依赖即一传一传一，且前两部分不互传。
范式是符合某一种级别的关系模式的集合，有（1NF,2NF,3NF,BCNF,4NNF,5NF)，这些NF之间是后者包含前者。1NF要求原子不可再分，2NF要求非主属性完全依赖于码，3NF要求非主属性不传递依赖，BCNF要求主属性对不包含它的码也是完全函数依赖，4NF要求不允许有非平凡且非函数依赖的多值依赖。
总而言之，关系数据库的规范化是尽量消除插入、删除异常、修改复杂冗余数据，逐步消除数据依赖中不适合的部。",第六章,2022-12-18 12:02:23
2020213322,本章与数据库设计有关，目标是为用户和各种应用系统提供一个信息基础设施和高效率的运行环境，一结构设计和行为设计相结合，用过经验和规范设计方法实现过程迭代，数据库设计分6个阶段（需求分析、概念结构设计、逻辑结构设计、物理结构设计、数据库实施、数据库运行和维护），里面重点是有关需求的分析以及概念结构的设计，此外还有数据结构相关理论知识需要一步一步细啃,第七章,2022-12-18 12:02:35
2020213323,在学这门课之前，我只接触过安卓开发中的Room数据库，只浅显地了解了下实体/操作方法/实体集的使用。学习这门课之后，我对数据库有了更加全面、科学以及系统的认知，原来数据库还有这么多知识和设计，更加加深了我对数据库的理解。,绪论,2022-09-10 10:27:48
2020213323,"主要学习了层次模型、网状模型和关系模型，系统全面地分析了每个模型的特点和区别，让我对数据库的认知而不仅仅是停留在“表格”的阶段。
虽然大体的认知还是能够理解的，但是有很多高度抽象的概念让人捉不着头脑，需要反复多看，多理解才能比较好地消化这些知识。",绪论 第二节课,2022-09-13 13:59:30
2020213323,在学习本章之前我对关系模型的理解还只停留在常见的二维表，本章知识则从更严谨的角度解释了关系数据库。本节课主要学习的内容是关系数据结构及形式化定义和关系操作，重点内容是码的相关概念和区分，以及型和值的关系和区别,第二章 关系数据库,2022-09-20 14:04:56
2020213323,"主要内容：关系完整性和关系代数。其中关系完整性包括实体完整性，参照完整性和用户定义的完整性。
重点内容：
1⃣️参照完整性-关系的引用；外码对于参照关系来说是非主码的、引用自被参照关系的；对于被参照关系来说是主码，是确实存在的。
2⃣️关系代数中传统运算：并/差/交/笛卡尔积 之间的区别
",2.2/2.3,2022-09-27 14:00:23
2020213323,"主要内容：关系代数概述、传统的集合运算、专门的关系运算
重点内容：专门的关系运算
①选择：在关系R中选择满足给定条件的诸元组； 
      σSdept='IS'(Student)【Sdept='IS'是条件】
②投影：从R中选择出若干属性列组成新的关系；
      πSname，Sdept(Student)
③连接：从两个关系的笛卡尔积中选取属性间满足一定条件的元组
特殊：等值连接/自然连接；外连接，左/右外连接
④除：元组在X上分量值x的象集Yx包含S在Y上投影的集合
",2.4 关系代数,2022-10-29 17:19:12
2020213323,"主要内容：SQL的特点、数据定义/查询。
重点内容：数据定义/查询/更新。
①定义：模式定义与删除/基本表的定义删除和修改/索引的建立与删除；
②查询：单表查询；",第三章 关系数据库标准语言SQL,2022-10-29 17:23:01
2020213323,"重点内容：连接查询/嵌套查询/集合查询/Select语句的一般形式;
①连接查询：同时涉及多个表的查询。
②嵌套查询：将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询。（ANY/ALL/EXISTS）。
③集合查询：并/交/差。


",第三章 关系数据库标准语言SQL (续1）,2022-10-29 17:25:49
2020213323,"对查询语句进行了三十道练习。
易错点：DISTINCT ，汉字占两个字符，转义字符，HAVING 语句，多种关键词的配合使用",查询语句习题2,2022-11-14 09:14:19
2020213323,"主要内容：数据库安全性控制、视图机制
重点内容：用户标识与鉴别、存取控制、自主存取控制方法、授权与回收GRAND/REVOKE、数据库角色、强制存取控制方法",第四章 数据库安全性,2022-11-21 09:16:45
2020213323,"主要内容：实体完整性、参照完整性、用户自定义的完整性、完整性约束命名字句、触发器。
重点内容：前三种完整性定义以及对应的违约处理；触发器的定义、激活、删除。",第五章 数据库完整性,2022-11-28 10:02:27
2020213323,"主要内容：函数依赖、码、范式以及2NF、3NF、BCNF、规范化小结；
重点内容：各种范式的区别以及关系—R属于第一范式；每一个非主属性完全函数依赖于任何一个候选码；每一个非主属性不传递依赖于码；决定因素只有码。根据需求选择合适范式，并非范式越高越好
",第六章 关系数据理论,2022-12-06 11:15:06
2020213323,数据库设计的步骤：需求分析、概念结构分析、逻辑结构分析、数据库的物理设计、数据库实施和维护。其中重点掌握的是：概念结构设计的方法和步骤—熟练掌握ER图来进行设计，并时刻注意两条准则；以及E-R图向关系模型的转换,第七章 数据库设计,2022-12-16 20:17:57
2020213326,这节课学了数据库中的几个基础定义，比如1.1中数据库的4个基础概念，1.2中的两类数据模型，对数据库系统的组成有了基本的了解，它包括数据库、数据库管理系统（及其应用发开工具）、应用程序和数据库管理员，但是由于前期关于计算机的知识比较薄弱，对应用系统、软件系统等的概念有点模糊；这节课中，最重要的知识点是绘制E-R图，它能很好地解释实体之间的关系，但是在绘画的过程中要思虑周全，同一个物品的命名要统一。,第一章 绪论,2022-09-11 23:13:59
2020213326,这节课我们主要学习三个常见的数据模型，分别是层次模型、网状模型和关系模型。其中，层次模型和数据结构中的二叉树很相似，双亲结点、子结点等等的数量都需要注意，网状模型允许有多个双亲结点。这三个模型各有优点和缺点，在数据库的应用中，要分清楚不同的特征。,第一章 绪论 9.12,2022-09-18 22:21:30
2020213326,这节课介绍了关系模型的三个组成部分，分别是关系数据结构、关系操作集合和关系完整性约束。1.在关系数据结构中，有几个名词的含义需要重点记忆，例如笛卡尔积、元组、域、关系和属性。其中，关系其实理解为一个二维表，元组就是笛卡尔积中的每一个元素，属性是关系中的每一列。然后还介绍了关系中的主码和候选码。若一个关系中有多个候选码，则选定其中一个为主码。2.在关系操作中，是数据结构中的知识点，查询、更新、删除等。3.这节课中的关系数据库中的型和值我有点混乱，课后找一些课后资源来观看。,第二章 关系数据库 9.19,2022-09-25 23:15:49
2020213326,这节课介绍了关系数据库中的关系完整性约束和传统的关系代数。在关系完整性约束中，实体完整性和参照完整性是关系模型必须满足的两个完整性约束条件，而用户定义的完整性则依靠用户自己定义约束条件。其中学到了“外码”、“主属性”、“引用”等的概念，每个完整性约束都有相应的规则，需要熟记。接下来学习了传统的集合运算，“交”、“并”、“差”、“笛卡尔积”这四个的运算需要熟练演算，我比较容易混的是“交”和“并”的符号，“交”代表交朋友，范围变大，“并”代表能玩到一起的人，范围变小，这样应该挺好记的。,第二章 关系数据库——关系完整性约束、传统的关系代数 9.26,2022-10-03 21:10:17
2020213326,这节课在上节课传统的关系运算的基础上学习了专门的关系运算。首先，先学习了几个基本的概念，分量、属性列和属性组、目、象集，其中，象集的概念在下面的运算学习中也有涉及，这个概念我经常会忘记，需要多加注意。接下来学习了四个运算，选择、投影、连接、除，其中，选择是在关系R中选择满足给定条件的诸元组，投影是从R中选择出若干属性列组成新的关系，连接是从两个关系的笛卡尔积中选取属性间满足一定条件的元组，这个用上了上节课学的计算笛卡尔积的知识，连接里面常用的连接运算是等值连接和自然连接，这两个的区别和联系需要记住，这四个关系运算的方法在综合运算上我还不够熟悉，需要在课后多找些题目练习。,第二章关系数据库——专门的关系运算10.10,2022-10-28 19:55:14
2020213326,老师在这节课开始回顾了一下上节课自学的内容，发现我对上节课自学的内容掌握得不是很好，没有明白SQL语言的用处和实际用法。接着老师着重讲解了SQL语言的几种查询方法，单表查询、连接查询、嵌套查询、聚合查询，里面包含了一些重要的知识点，比如几种差用的查询条件，DISTINCT的用处，空值查询，HAVING的运用环境，连接查询里面的普通连接、自然连接等。其中，我对带exists谓词的查询很容易搞混，不太明白其中的嵌套关系以及容易陷入死循环，需要在课后多加研究学习。,第三章关系数据库的标准语言——数据查询10.24,2022-11-13 16:18:26
2020213326,今天这节是线上自学课，进入了第三章SQL语言的初步学习。这章的知识点包括了SQL的概述、学生-课程数据库中的三个基本表，分别是学生S，课程C，选修情况SC，这三个表在后面的学习中经常用到。还有学习了数据的定义，分为数据库和基本表的定义；数据的查询，单表查询、连接查询、嵌套查询、聚合查询；还有数据的更新。SQL是一个通用的、功能极强的关系数据库语言。SQL功能极强，完成核心功能只用了9个动词，数据查询SELECT，数据定义CREATE，DROP，ALTER数据操纵INSERT，UPDATEDELETE数据控制GRANT，REVOKE。,第三章关系数据库标准语言——预习10.17,2022-11-13 16:18:39
2020213326,本节课学习了视图的相关知识，包括了视图的概念、基于视图的操作：定义视图、查询视图、更新视图以及视图的作用。视图的特点是虚表，是从一个或几个基本表（或视图）导出的表，只存放视图的定义，不存放视图对应的数据，基表中的数据发生变化，从视图中查询出的数据也随之改变。因此，有关视图的操作都和基本表的操作非常类似，只要掌握好基本表的相关操作，查询的几种不同方式的综合运用，在视图中就没有太大的问题。同时，这节课也进行了上机操作，但是软件里面的一些术语我还不太明白，比如服务器、引擎等等，不明白它的登入设置。下课后要在网上找多一些资料看看。,第三章关系数据库的标准语言——视图10.31,2022-11-13 18:34:30
2020213326,这次课是习题课，从SQL语言最基本的学生-课程数据库三个表出发，将基本表的几种查询方式结合起来综合运用，考察了大家关于查询语句的灵活运用能力、综合分析能力，要在一道题中看到这道题背后的知识点，选择一种或多种逻辑思维。但是我自己在做题的时候，可能考虑的方面比较多，有点害怕，不敢下手，不知道该选择哪一种方式最恰当。需要多做题，多检测自己。,第三章关系数据库的标准语言——习题课11.7,2022-11-13 18:57:40
2020213326,这一章节学习了数据库的安全性，数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改和破坏。在这一章节里面，最重要的两个知识点是数据库安全性控制和视图机制，在数据库安全性控制中，有自主存取控制和强制存取控制技术，强制存取控制技术的两条规则可以防止自主存取控制技术的漏洞，防止信息泄露和篡改。而视图机制则可以把要保密的数据对无权存取的用户隐藏起来，从而自动对数据提供一定程度的保护。在这一章节中，我对数据库安全还没有实际的操作，还知识停留在理论概念上的理解。,第四章数据库安全性——新课11.14,2022-11-14 15:33:29
2020213326,"这一章节老师带领我们更进一步地学习了数据库的完整性，在前几个章节的基础上更进一步的学习。数据库的完整性是为了保证数据库中存储的数据是正确的，在关系系统中，最重要的是完整性约束，是指主键的值唯一且不为空，另一个是参照完整性，是指外键的系列操作，其他完整性约束条件都可以归为用户定义的完整性。
对于违反完整性的操作一般的处理是采用默认的方式，如拒绝执行，在实验课上的动手实操上屡屡报错就体现了这一点。
实现数据库完整性的一个重要方法是触发器。但是，触发器的功能很强大，除了数据库完整性之外，还有更加广泛的应用系统的一些业务流程和控制流程。",第五章数据库完整性——新课11.21,2022-11-30 14:36:39
2020213326,"这节课开始了新的一个章节“关系数据理论”，本节课主要学习的是两个知识点，一个是问题的提出，这个主要是阐明了关系规范化理论研究的实际背景，讲述为什么我们学习的关系模式的写法和规范，如果不这样写，写作不规范，则会存在以下几个问题：数据冗余、更新异常、插入异常、删除 异常等问题。第一个是规范化中的数据依赖，有平凡的函数依赖和非平凡的函数依赖，有完全函数依赖和部分函数依赖，以及传递函数依赖。
对于本章节中的范氏问题我还仍有点疑惑，将在课后继续观看视频讲解。",第六章关系数据理论——11.28,2022-11-30 14:56:59
2020213327,"一、上节课我们介绍了关系代数中的传统的集合运算，而这节课主要介绍的是专门的关系运算。有很多新的概念和运算符，相对传统的运算来说更难、更复杂。
二、1. 选择：选择是选择满足给定条件的元组，是一个单目运算符，从行的角度进行的运算。
2. 投影：投影是从指定关系选取若干属性，是单目运算符，从列的角度进行的运算；进行投影运算时需要注意取消重复的行。
3. 连接：连接是双目运算，从两个关系的笛卡儿积中选属性间满足一定条件的元组；需要注意等值连接和自然连接的区别与联系；还需要了解内连接和外连接。
4. 除：除是一个双目运算，是同时从行和列角度进行运算，与象集、投影等概念有关，需要花时间理解。
三、这节课讲述的专门的关系运算常常出现在综合性的题目中，需要对每一个概念进行深入的了解和掌握后，多做一些综合性案例，同时还需要将课本上的例子反复琢磨。",第二章第三次课（10.10）,2022-10-29 10:34:02
2020213327,"    在第一章的绪论中，我了解到了有关数据库的基本内容，知道了数据库的基本概念和数据模型的基本组成以及数据库系统结构等相关知识。
    ①我知道了数据库在生活中的重要用途，各类网站、app等都离不开数据库的应用。②我了解到了数据库的四个基本概念：数据、数据库、数据库管理系统以及数据库系统的区别和定义和基本功能。③我知道了数据库中是用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息，也简单地了解了概念模型、逻辑模型、物理模型；同时，还详细学习了数据模型的组成要素。④详细学习了概念模型，对实体、属性等概念有了更深一步的了解。还学习了E-R图的基本表示和画法。
    在这节课中，我第一次开始真正地了解数据库，和之前所想象的数据库有很大的区别，发现有特别多需要去理解的概念和模型。在之后的学习需要多花时间去理解这些概念。",第一章第一次课（9.5）,2022-10-29 10:38:47
2020213327,"一、这节课主要学习了数据模型中非关系模型的层次模型、网状模型以及关系模型的相关知识和概念。其中，关系模型是最重要的一种数据模型，需要重点去理解和掌握。
二、1. 层次模型：需要理解层次模型的基本定义；还需要掌握和理解它的数据结构和存储结构，这方面的知识对我来说是比较难的部分；还需要掌握它的优缺点等。 2. 网状模型：需要学会区别网状模型和层次模型，同时也是要理解它的数据结构、存储结构、优缺点等知识。 3.  关系模型：需要先理解关系、元组、属性、主码等相关术语，同样也要掌握它的数据结构、存储结构、优缺点、模型的操纵与完整性约束等知识。
三、这节课需要掌握和区分三种数据模型；特别是需要理解它们的数据结构、存储结构等知识，需要运用到结点、双亲等数据结构的内容，需要花时间去理解和掌握。",第一章第二次课（9.12）,2022-10-29 10:39:01
2020213327,"一、这节课主要学习了关系数据库中一些相关定义和知识，着重学习了关系数据结构及形式化定义的内容。这一部分内容有很多概念、定义需要去理解和区分掌握。
    二、1. 关系：关系模型的数据结构只包含单一的数据结构——关系。在理解关系模型的基础上我们需要了解并掌握域、笛卡尔积、元组等相关概念。而对于关系，不仅需要了解它的相关知识和定义，还需要理解关系的表示：关系也是一个二维表，需要理解表中的元素对应的是什么；同时，还需要理解码的概念和应用，这些概念对我来说有些容易混淆，需要加强理解和记忆。
  2. 关系模式：关系的描述成为关系模式，关系模式需要刻划出完整性约束条件；同时，我们要学会区分和了解关系和关系模式的定义。
  3. 关系数据库：要了解关系数据库的型和值。
    三、这节课学的更多是偏向于概念、定义的理解，它们之间相互联系又有所不同，需要花时间去理解。作为之后学习关系数据库的基础，应该要将它们的定义熟记于心同时要学会区分它们之间的不同。
",第二章第一次课（9.19）,2022-10-29 10:39:07
2020213327,"一、这节课主要学习了关系的完整性和关系代数中的传统的集合运算，其中参照完整性的概念较复杂，需要重点去理解。
二、1. 关系的完整性：实体完整性和参照完整性是关系模型必须满足的完整性约束条件，是关系的两个变性。
2.实体完整性要注意主码中的属性不能取空值；参照完整性要注意理解主码、外码、参照关系、被参照关系等概念；而用户定义的完整性则需要根据不同的应用环境来决定
3.传统的集合运算：是从行的角度来进行，有并、差、交、笛卡尔积，其中笛卡尔积的运算需要多加注意。
三、这节课中参照完整性的相关知识较难理解，涉及到主码和外码的知识还需要结合书上的例子进行进一步的理解和体会。",第二章第二次课（9.26）,2022-10-29 10:40:15
2020213327,"一、这节课主要是学习了关系数据库标准语言SQL的一些基本概念和功能。
二、1. SQL的特点：①综合统一 ②高度非过程化 ③面向集合的操作方式 ④以同一种语法结构提供多种使用方式 ⑤语言简洁，易学易用。
2.SQL的数据定义功能包括：模式定义、表定义、视图和索引的定义。
3.要掌握模式的定义与删除、基本表的定义、删除与修改、索引的建与删除等知识。
4.数据查询中单表查询的相关知识和重难点。
三、这次课的内容相对较基础，需要掌握SQL的优点和特点，需要特别注意的是单表查询中有一些需要注意的概念和应用。",第三章第一次课（10.17）,2022-10-31 10:35:24
2020213327,"一、这节课主要学习了SQL语言强大的查询功能，学习了连接查询、嵌套查询、集合查询等知识。
二、1 连接查询：连接查询是关系数据库中最主要的查询，包括等值与非等值连接查询、自身连接查询、外连接查询等，这些知识都非常重要，需要熟记语法格式与概念理解。
2.嵌套查询：需要区分和掌握各类子查询：带有IN谓词、带有比较运算符、带有ANY或ALL谓词、带有EXISTS，可以根据例题反复研究，要将这几个子查询熟练于心。
3.集合查询：集合操作的种类并操作UNION交操作INTERSECT差操作EXCEPT；注意：参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同。
三、这节是本章的重难点，需要熟练使用SQL语言完成复杂查询，同时需要学会综合运用几个查询。",第三章第二次课（10.24）,2022-10-31 10:55:14
2020213327,"一、这节课主要学习了数据更新的三种操作和视图的定义、操作及作用等知识。
  二、（一）数据更新：
1. 插入数据：有两种插入数据的方式：①插入元组（语句是INSERT INTO VALUES），需要注意values后面的值和属性列之间的对应关系。②插入子查询结果（语句是INSERT INTO 子查询），就相当于把子查询中每一行的值当作了value。
2.修改数据：修改指定表中满足WHERE子句条件的元组（语句是UPDATE SET WHERE），可以修改某一个元组或多个元组的值，还有带子查询的修改语句。
3.删除数据：（语句是DELETE FROM WHERE），WHERE子句指定要删除的元组，缺省表示要删除表中的全部元组，表的定义仍在字典中。
 （二）视图：1. 视图与基本表不同，它是一个虚表。 2. 数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍然存放在原来的基本表中。 3. 基本表数据改变，视图查询出的数据相应改变。 4. 视图一经定义，也可以和基本表一样被查询、被删除。 5. 可以在一个视图之上再定义一个新的视图，但是对视图的更新操作则有一定的限制。
  三、数据更新是SQL语言中重要的操作，需要进行掌握和区分各类操作的语句，视图则是一个重要的概念，适当地利用视图可以更加清晰地表达查询。",第三章第三次课（10.31）,2022-11-06 21:32:06
2020213327,"一、这次课主要从习题出发，通过做大量习题来掌握和巩固数据库的相关知识和概念。主要考察了SQL的数据查询功能，内容较为综合。  
二、1. 习题的前半部分主要是单表查询，针对比较、确定范围、集合等知识，同时帮助我们掌握了字符匹配、空值、多重条件、排序的知识。①字符匹配要注意LIKE的使用方法；%的使用方法，%可以和任意个字符进行匹配；以及查询全名为n个汉字时的语法规则和\\转码字符的用法。②涉及空值的查询要注意IS NULL不能用=代替。③多重条件查询要注意优先级，AND的优先级高于OR。④排序用ORDER BY子句，DESC是降序，ASC是升序。  
2.习题的中间部分主要学习了聚集函数的使用和对查询结果分组的知识。①聚集函数要注意各个函数的用法和定义，同时，聚集函数只能用于SELECT子句和GROUP BY中的HAVING子句。②GROUP BY子句将查询结果按某一列或多列的值分组，值相等的为一组。  
3.习题的后半部分主要复习了多表查询，如连接查询、嵌套查询，这些题目更综合，需要先分析思路再写语句，还需要在课后多加练习来巩固。 ",第三章第四次课——习题课（11.7）,2022-11-23 00:25:29
2020213327,"一、这节课讲的是数据库安全性的知识，是更偏理论性的知识，需要去理解整个知识框架。    
二、（一）1. 数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。 2. 需要了解数据库的三类计算机系统安全性问题，同时需要了解安全标准如TCSEC、CC、TCSEC/TDI标准等。 （二）1. 计算机系统中，安全措施是一级一级层层设置的。 2. 须掌握数据库安全性控制常用方法：用户标识和鉴定、存取控制、视图、审计、密码存储。要掌握它们各自的常用方法。 （三）1. 自主存取控制功能通过SQL 的GRANT语句和REVOKE语句实现，需要掌握这两种语句的用法。 2. 数据库使用角色来管理数据库权限可以简化授权过程，CREATE ROLE语句创建角色，GRANT 语句给角色授权。 3. 强制存取控制（NAC）要注意主体、客体和相应的规则。 （四）视图机制可以对数据提供一定程度的安全保护。   
三、这节课主要实现数据库系统安全性的技术和方法，有很多需要理解和掌握的理论知识，需要花时间去理解。",第四章第一次课（11.14）,2022-11-23 01:20:52
2020213327,"一、这节课主要是讲数据库完整性，需要和第四章的安全性进行区分。本章的数据库完整性主要是指狭义的完整性即语义完整性，是之前学习的一个拓展，包括之前所设计到的实体完整性、参照完整性、用户定义的完整性；还学习了触发器和完整性约束命名子句的知识。   
二、1. 数据库的完整性是为保证数据库中存储数据是正确的。 2. 实体完整性定义：CREATE TABLE中用PRIMARY KEY定义；检查和违约处理：主要检查主码值是否唯一和主码的各个属性是否为空。 . 参照完整性定义：与外码及其参照的主码有关。 3. 用户定义的完整性：针对某一具体应用，RDBMS提供，而不必由应用程序承担；包括属性和元组上的约束条件定义、检查、违约处理。 4. 完整性约束命名子句：包括CONSTRAINT约束和修改表中的完整性限制的内容。 5. 触发器：要掌握定义（注意触发条件、触发事件、触发动作体等）、激活和删除触发器的语句用法。   
三、这节课需要了解数据库完整性与安全性的区别，触发器的概念及作用；需掌握什么是数据库完整性，如何用SQL语言定义完整性约束，违反完整性约束时如何进行违约处理的知识。",第五章第一次课（11.21）,2022-11-23 02:20:53
2020213327,"一、本节课主要学习了关系数据库理论的相关知识，重点在于规范化相关知识的学习和理解。
二、1. 回顾了关系、关系模式等基本概念。 2. 数据依赖：①定义属性值间的相互关系，是数据库模式设计的关键；②数据依赖的类型主要分为函数依赖、多值依赖和其他，主要学习函数依赖。 3. 规范化可以通过分解关系模式来消除其中不合适的数据依赖，以解决数据冗余、插入异常等问题。 4. 函数依赖：简单来说就是Y由X决定，所以Y依赖于X；要学会区分非平凡和平凡函数依赖的区别，主要区别在于Y是否属于X；要区分完全函数依赖和部分函数依赖以及了解传递函数依赖。 5. 码：回顾主码、候选码、主属性、非主属性、全码等相关概念和定义；外部码是在关系模式中可以看到的，与主码一起提供了表达关系间联系的手段。 6. 范式：符合某一种级别的关系模式的集合，包括1NF、2NF、3NF、BCNF、4NF等，模式分解的过程就是规范化的过程。 7. 要了解每一个范式的定义、要求，需要非常熟悉，以便于后续的分解和区分。 8. 一般到BCNF的规范性就比较高了，所以一般用到BCNF，不是范式越高越好，而是要选一个合适的范式。
三、本节课的主要回顾学习了一些基本的概念，如函数依赖、码等；最难的点在于范式的区分和分解，这些知识相对来说更抽象，需要花时间再去练习。",第六章第一次课（11.28）,2022-12-14 22:46:09
2020213327,"一、本节课的内容主要是关于数据库设计，重点在于概念结构设计。
二、1. 概念结构设计：将需求分析得到的用户需求抽象为信息结构的过程。 2. 概念结构设计的过程就是E-R图构建的过程，所以必须要熟练掌握E-R图的设计。 3. 概念结构设计的方法：自顶向下、自低向上、逐步扩张、混合策略。4. 数据抽象（通过属性）：三种抽象：分类、聚集、概括。 5. 画E-R图的步骤，先画局部E-R图，再进行合并，需要确定实体之间的联系及其类型。 6. 视图集成的两种方式：多个分E-R图一次集成、逐步集成。 7. 集成局部E-R图的步骤：①合并②修改与重构：需要消除冲突。 7. 逻辑结构设计主要就是将设计好的基本E-R图转换为与选用DBMS产品所支持的数据模型相符合的逻辑结构。主要掌握E-R图向关系模型的转换，还要了解优化数据模型的方法。 8. 在物理设计阶段根据DBMS特点和处理的需要，进行物理存储安排，设计索引，形成数据库内模式。
三、本节课关于数据库设计最重要的就是掌握E-R图的构建，是较为综合的知识，需要对前面的内容进行充分的理解和掌握后，才能得心应手地设计出符合条件的E-R图。",第七章第一次课（12.5）,2022-12-28 19:31:27
2020213328,"一、内容整理
  第一节课主要是数据库的理论概念上的基础知识。主要包括了四个基本概念：数据、数据库、数据库管理系统和数据库系统；数据模型：概念模型与物理/逻辑模型和其数据操作。
二、难点关注
  这节课对我来说的重难点主要是理解数据库系统整个的运行逻辑，也就是前面数据、数据管理系统、操作系统等是如何能构成一个完整数据库系统并运行的。第二个难点主要是概念模型，尤其是ER图里当统一模型在两张局部图中有不同代表时如何归为统一。
三、课程感悟
  这节课让我对所有学习的数据库有了一个基本的具象化认识，让我第一次意识到原来所谓“数据库”想要稳定的操作运行背后需要依靠计算机逻辑把不同的属性和内容归类处理，建立内在和外在联系，数据库也绝不仅仅是简单的一块虚拟的储存地，其背后有强大的逻辑规则。",第一章第一节,2022-09-11 21:16:52
2020213329,了解了数据库的相关定义和数据库在数媒专业以及生活中的应用。,第一章——第一节课,2022-09-12 08:46:21
2020213329,了解了网状，层次和关系模型的特点和优缺点。对于数据模型的相关概念也有了一定的理解。,第一章——第二节课,2022-09-19 13:19:31
2020213329,了解了域、笛卡尔积、关系、元组、属性等概念，以及互相之间的关系和区别。对于主码和候选码的关系也有了更清楚的了解。,第二章——第一节课,2022-10-10 13:09:07
2020213329,练习了传统的的集合运算，对于具有相同目的两个关系的传统集合运算较为熟练。,第二章——第二节课,2022-10-10 13:12:49
2020213329,了解了SQL基础知识点，学会了SQL的数据定义语句和数据的查询。,第三章-第一节课,2022-10-31 13:07:00
2020213329,掌握了数据查询的嵌套查询，区分了相关子查询和不相关子查询。,第三章——第二节课,2022-10-31 13:09:18
2020213329,这节课我们复习了查询的语句，包括单表查询、连接查询和嵌套查询，通过老师的讲解，我改正了自己的错误，同时对于知识点的熟练程度有所提升。,第三章——第三节课,2022-11-14 13:10:45
2020213329,本节课学习了数据库的安全性，了解到实现数据哭系统安全性的技术和方法有很多，对数据库管理系统提供的安全措施也有了一定的认识。,第四章,2022-12-21 12:04:58
2020213329,本节课开始学习数据库的完整性，了解到了完整性和安全性的区别。,第五章——第一节课,2022-12-21 12:12:57
2020213329,熟悉了用户定义的完整性以及完整性约束的相关语句。也了解了触发器的相关知识。,第五章——第二节课,2022-12-21 12:16:05
2020213329,了解了函数依赖的相关概念，对于三大范式的相关知识点有了一定的掌握。,第六章,2022-12-21 12:18:38
2020213329,本章学习数据库的设计，ER图的相关知识点有更深刻的了解，对于数据库的实施和维护有了一定的了解。,第七章,2022-12-21 12:20:09
2020213330,在看视频的过程中产生了各种各样的疑问和不解，并且在做题中充分的反应出来，但是在查看题目为什么做错的时候，也获得了各种各样的收获，希望能在以后的学习中更加的仔细充分地学习、,1,2022-09-12 00:03:21
2020213330,"数据操作集合操作，操作对象和操作结果都是关系，即若干元组的集合
关系的每一个分量必须是一个不可分的数据项，不允许表中还有表",2,2022-09-26 00:08:44
2020213331,"第一节课主要学习了第一章的1.1-1.2.3，由于目前绪论部分，且课上老师结合许多例子进行讲解，因此1.1部分数据库系统概述学习起来并不困难。对于1.2数据模型，之前在学习《数据结构》时老师也进行过简要概述，现在深入下去也没有太多的阻碍。
但是在1.2.3概念模型中，我在课上掌握了“E-R方法”的理论知识，但是实际运用起来并不熟练，一旦实体复杂起来，就很容易出错。受教学时间限制，我并未在课上解决此问题，因此我在课后重温了ppt，并在课本和网上找了很多例子进行练习，现在已经能熟练绘制“E-R图”了。
在课前预习中，对于课程1、2、4、5学习得较为顺利，但是对于课程3关系的完整性约束中外码和参照完整性规则的理解还有些模糊，单看定义和视频中老师举的例子有些难以理解。",第一章绪论 反思,2022-09-08 15:55:23
2020213331,"这节课主要学习了第一章中的层次模型、网状模型和关系模型三种数据模型，且进行了一个简单的课堂测验并由老师进行讲解。
对于课程学习，之前的《数据结构》课程也对这三种模型进行了一定的介绍，再加上这一次提前预习了课本，有了一定的基础，因此，在课堂上这三种模型学习起来并不困难。其中，网状数据模型的存储结构较为复杂，但课上老师举例说明后（学生/选课/课程的网状数据库实例），也弄懂了。
对于课堂测验，由于这次课堂测验选择题的答案都能在课本和ppt上找到，所以这一次并没有错题。",第二节课 反思,2022-09-13 16:47:21
2020213331,"这节课主要学习了第二章的2.1关系数据结构及形式化定义和2.2关系操作，之后进行了一个课堂测验并由老师进行讲解。
对于课程的学习，因为之前视频预习涉及到这一部分，所以理解起来并不困难。对于课堂测验，因为这次课堂测验的题目依旧是偏理论，且课本和ppt上都有，所以并无错题。",第三节课 反思,2022-09-24 11:59:13
2020213331,"这节课主要学习了2.3关系完整性和2.4.1传统的集合运算，且进行了一个简单的课堂测验并由老师进行讲解。
对于课程的学习，在之前的视频预习中，我对外码和参照完整性还不太理解，经过本次课堂上老师举的实例，我对这两者的定义和运用以及有了较为全面的了解，并、差、交和笛卡尔积理解起来比较容易，没有遇到难点。
对于课堂测验，经过课程学习后做起来较为轻松，并没有错题。",第四节课 反思,2022-09-29 10:17:06
2020213331,"这节课主要学习了2.4.2专门的关系运算，且进行了一个课堂测验并由老师进行讲解。
对于课程的学习，投影、连接和除运算但从定义上理解起来比较困难，但是结合实例思考之后就能够理解掌握了，目前对于只需要使用一种运算的习题解决起来较为快速，但是多种运算结合起来之后，弄清楚其中的逻辑并写出对应的关系代数就较为花费时间。
对于课堂测验，虽然对这四种关系运算已经有了一定的理解，但实际运用起来还比较困难，由于运用起来并不熟练，两道大题花费的时间较长，且每道题的关系代数答案并不唯一，课上并没有完全理解每个答案的计算过程，下去之后还需要进行课后复习，并多练习一些关于这四种关系运算的题目。",第五节课 反思,2022-10-10 16:40:23
2020213331,本周进行线上学习，主要学习内容是对SQL的整体概述以及基本语句的用法介绍，单看基本语句的定义和一般格式有些难以理解，但是书上针对每个语句都有大量的例题，结合例题后整体上容易理解了很多。习题也较为简单，前两道大题在课本和PPT上就能找到，第三大题将本次的学习内容与第二章的关系运算结合了起来，在做题的同时还对第二章这一部分的内容进行了复习。,第六节课 反思,2022-10-31 10:38:04
2020213331,本周主要对上节课的自学内容进行了简单的复习，并学习了3.4.2连接查询，随后完成了一个课堂测验，并将上周和本周的习题一起进行讲解。结合例题以及老师的讲解，本节内容学习起来并不困难。对于课堂测验，上周的习题并没有出现大的错误，这周的习题对带有EXISTS谓词的子查询并没有完全把握，还需要课后进行复习。,第七节课 反思,2022-10-31 10:47:08
2020213331,本周主要学习了3.5数据更新和3.7视图，并完成了习题以及第一次实验。相比数据查询，数据更新和视图更容易理解一些，对于第三章的第三次习题，前几个小题都能顺利完成，但是对于最后两个小题，也就是嵌套查询（特别是含EXISTS的嵌套查询），理解并运用起来还是有一些困难。对于实验一，第一次实验较为简单，并没有遇到困难，需要注意的是要正确创建表级和列级完整性约束，由于完整性约束的限制，被引用的表要先创建，不然SQL就会报错，因此，创建表的时候应该先捋清每个表格之间的关系，确定创建表的顺序，再进行表的创建。,第八节课 反思,2022-10-31 21:21:41
2020213331,本周主要进行了习题训练并在第二节课完成了实验二，经过前几次的习题训练以及课后的反复复习。对于课堂练习，这一次关于查询的习题正确率明显提高，除了第七题要注意两个下划线对应一个汉字外，其他习题都没有什么错误。对于第二次实验，对查询这一块的知识点以及有了较为全面的掌握，除了第二题对date类型的数据比较陌生需要先在网上查找相关的函数了解外，其他题都没有出现大的问题，因此，此次试验完成得很顺利。,第九节课 反思,2022-11-07 16:44:05
2020213331,本周主要学习了第四章的4.2数据库安全控制并进行了第三次实验。第四章的知识点都是偏向于理论，因此学习起来并不苦难。对于实验三，因为涉及到各种嵌套查询，这次的实验整体上比上周的难，IN嵌套查询和单层EXISTS嵌套查询都没有太大的问题，在完成第三、第四题双层EXISTS嵌套查询和FROM子句中的嵌套查询时遇到了一些问题，第四题主要是一开始没有理解题意，因此理解后做起来并没有问题，费时最久的是第三题，对双层EXISITS嵌套查询理解起来哦还是有一些困难，需要多加练习。,第十节课 反思,2022-11-14 16:33:51
2020213331,本周进行了第五章的学习，实体完整性、参照完整性和用户定义的完整性在之前的课程中已经进行了一定的学习，触发器在其他课程中也有所了解，因此这节课学习起来并不困难。本周还进行的数据库的第四次实验，主要考察了对数据的插入、修改和删除的操作，数据更新整体上比数据查询要简单，因此本周完成实验花费的时间整体上要比上周少上很多。但完成第四题花费了较长的时间，起初并没有理解如何利用一个表中的数据修改另一个表中的数据，但是联想到上周实验题中的“FROM子句中的嵌套查询”与这一题有一些相似，进行一些修改好做出了这一道题。本次实验并没有过于复杂的嵌套，再加上课上的学习和课后的复习，这五道题的理解并完成并不难实现。,第十一节课 反思,2022-11-21 16:48:28
2020213331,"本周进行了第六章关系数据理论的学习，主要学习了6.1问题的提出和6.2规范化，第六章偏向于理论，学习起来并不困难。同时，本周还进行了数据库第五次实验，实验主要练习了创建视图相关的SQL语句操作。创建视图的时候如果可以省略列名，则视图列名使用选择的属性列列名；也可以指定列名（创建视图时指定，与属性列一一对应）。
WITH CHECK OPTION表示视图里面所有的元组都要满足WHERE子句中的条件，无论时修改前还是修改后都必须遵从此规则。透过视图进行的插入、更新或删除操作，都需要符合视图定义中的谓词条件。使用WITH CHECK OPTION需要视图中有WHERE子句，否则该语句是多余的。
对视图的操作，本质上是对表的操作，而在建立视图时进行运算得到的新的列，表中并不存在的，无法通过视图直接进行修改。",第十二节课 反思,2022-11-29 22:29:54
2020213331,"1.SQLServer中没有函数索引，在某些场景下查询的时候要根据字段的某一部分做查询或者经过某种计算之后做查询，如果使用函数或者其他方式作用在字段上之后，就会限制到索引的使用，不过我们可以间接地实现类似于函数索引的功能。
2.这次实验主要练习索引和用户权限相关的SQL语句操作。定义不同用户对于数据的操作权限，创建用户后将对应的权限赋予用户即可。",第六次实验 反思,2022-12-09 17:34:32
2020213331,"1.本周主要进行了触发器的定义及使用，由于SQL的版本不同，定义触发器的格式也有所不同，对于SQL SERVER定义触发器的格式需要进行额外的学习。
2.只要学会了触发器的定义方法以及每个表之间的逻辑关系，实现起来困难不大。
3.SQL SERVER中没有“before triggers”。但是仍然可以通过一起使用“inserted”和“deleted”表来跟踪对表进行的更改。当更新导致触发器触发时,“inserted”表存储新值,“deleted”表存储旧值。",第七次实验 反思,2022-12-17 20:53:58
2020213331,"1.本次实验主要完成了用户自定义的完整性约束条件，其中有NULL/NOT NULL约束（列值是否非空），DEFAULT约束（定义默认值），UNIQUE约束（列值唯一）和CHECK约束（检查列值是否满足一个条件表达式）。
2.对有CHECK的表进行插入、更新等操作时，需要满足CHECK中的条件，否则将执行出错。",第八次实验 反思,2022-12-17 20:54:16
2020213335,"  第一节课主要学习了数据库的几个基本概念和两类数据模型。
 
  在数据，数据库，数据库管理系统和数据库系统四个概念中，最难理解的是数据库管理系统，概念中的定义它为一种计算机基础软件，当时无法理解整个计算机系统的架构，自然也不太清楚数据库管理系统所处的位置。课下查阅资料之后，理解到软件系统分为系统软件和应用软件，而数据库管理系统同操作系统一起，属于系统软件，共同架构在硬件系统之上。

  在数据模型中，其分类很好理解，数据库的体系结构就是三层模式两级映射。对于其中的概念模型，理解起来并不困难，但是对于“E-R方法”的实际运用，还是比较困难，尤其是实体联系之间的关系较为复杂的时候，在拆解合并时，就容易出现纰漏，导致数据冗余。",第1章 绪论,2022-09-10 11:16:01
2020213335,"这节课主要就是学习了三种逻辑模型：层次模型、网状模型这两种非关系模型和一个关系模型。了解了层次模型和网状模型的构成条件，以及二者之间的区别与联系。层次模型其实就是一种特殊的网状模型。这两种非关系模型都有其独特的优缺点，但相比较关系模型来说，对于两个实体之间多对多的关系表示还是十分复杂。关系模型对比之下就比较明晰，也是现在通行的数据模型，片面的理解一下，关系模型就是一张二维表。
之后是自学部分的数据库系统结构和数据库系统的组成。其实在第一节课，就已经讲述过数据库系统的组成，所以学起来并不困难。数据库系统结构，简单来说就是三层模式两级映射。这两级映射完美地保证了数据的相对独立性，两级映射分别对应着数据的逻辑独立性和物理独立性。两级映射的存在大大降低了后续应用程序开发和维护的难度。",第1章 绪论 （第二次课）,2022-09-17 14:01:11
2020213335,"这节课的主要学习内容是关系数据库及其相关概念。总体学习框架为：关系、关系模式、关系数据库。本节课的学习难度不是很大，多的是定义概念性的东西。域、笛卡尔积、元组、属性等基础概念的学习，需要细心区分它们的限制条件和相关作用。本节课占比比较多的是有关码的概念，需要区分码、超级玛、候选码、主码的概念。四者按顺序呈现包含关系，码包括超级玛、超级玛包括候选码、候选码包括主码。
对于关系、关系模式、关系数据库、关系数据库的值、型，主要有以下几点总结。关系模式是型，关系是值。关系模式是对关系的描述。关系是关系模式在某一时刻的状态或内容。关系模式是静态的、稳定的，而关系是动态的、随时间不断变化的，因为关系操作在不断地更新着数据库中的数据。关系数据库是在一个给定的应用领域中，所有关系的集合构成一个关系数据库。关系数据库的型是关系数据模式，是对关系数据库的描述。关系数据库的值是关系模式在某一时刻对应的关系的集合。",第二章 关系数据库,2022-09-24 10:37:34
2020213335,这节课主要学习了2.3关系的完整性和2.4关系代数。2.3中学习了实体完整性、参照完整性、用户定义的完整性三个概念的定义和相关规则。其中参照完整性是相对复杂的部分，需要理解清楚关系之间的引用关系，以及外码的概念与限制，外码可以不与主码同名，但一般为了方便识别，通常还是会使用相同的名字。2.4中首先学习了传统的集合运算，并、差、交、笛卡尔积四种运算。这一部分同高中数学中的集合运算概念十分相似，所以学习和应用起来并没有什么困难。这里的重点是在理解和区分各个关系代数表达式，以及学会根据具体的情况，计算在使表达式有意义的情况下，可以得到的最大、最小元组的数目以及列的数目。,第二章 关系数据库,2022-09-28 11:49:11
2020213335,这节课主要学习的是专门的关系运算，分别是选择、投影、连接和除。选择又称为限制，不改变属性个数，即列的数量，他是从关系R中选择使得逻辑表达式为真的元组，是从行角度的运算。而投影操作则是从列的角度进行的运算，投影之后会减少列的数量，且为避免重复行可能还会删除某些元组。连接运算，是一种基于笛卡尔积的选择运算。主要运用是等值连接和自然连接。自然连接是一种特殊的等值连接，两个关系比较的分量必须是相同的属性组，且有相同的域，在完成操作之后还会将重复的属性删除。自然连接也称为内连接，此外还有外连接。根据选择的主表不同，氛围左外连接和右外连接。而除运算，算是比较复杂的运算。它可以由前面的几种运算结合表示，但是比较繁琐。除运算主要解决的是“查询...全部/所有的...”问题。他是一个同时从行和列角度进行的综合运算。这节课从例题出发，讲解了各种运算的使用场景，根据实际问题，结合使用各种运算，领会内部的逻辑原理。,第二章 关系运算,2022-10-31 14:14:12
2020213335,这次课程采取线上学习的方式，主要学习了SQL的整体概述和SQL基本语句的用法与介绍。了解到了SQL的特点，SQL的综合统一、高度非过程化、面向集合的操作方式、以同一种语法结构提供两种使用方式、语法简洁、易学易用了解到SQL还可以作为嵌入式语言存在。之后学习了基本语句，分为DDL、DML、DCL，目前学习的大多处于DDL阶段。在执行DROP操作时，还需要注意RESTRCT和CASCADE的区别。同时结合上节课学的关系代数和关系演算，更进一步的了解两种方式之间的转换。可以用综合统一的SQL表达式完成上节课使用关系代数完成的操作，了解到关系代数是数据库的底层操作，但却不是所有数据库管理系统通用的语言。,第三章  关系数据库标准语言SQL,2022-10-31 14:29:17
2020213335,"第七次
这节课主要是复习上节课学习的3.3数据定义并学习3.4数据查询的内容。数据查询分为单表查询、连接查询、嵌套查询和集合查询。单表查询比较基础，主要学习SELECT、FROM、WHERE语句的使用，之后的的多表查询就相对来说比较复杂，分为连接查询、嵌套查询和集合查询。同时在学习的过程中完成对相关子查询和不相关子查询两个概念的辨别。数据查询内容主要是基于习题展开的，通过对习题的讲解和分析，更加深入的了解和熟悉语句的使用。在某些特殊情况下，需要使用DISTINCT，并且可以采取连接查询和嵌套查询两种查询方式。通过例题的讲解和习题的练习，对二者进行区分。",第三章  关系数据库标准语言SQL,2022-10-31 14:38:33
2020213335,本节课学习了3.5数据更新和3.6视图的内容。数据更新中的插入、修改、删除等操作。语法都比较相似，且用法比较简单，但在进行数据更新时，要注意完整性约束的问题，一般系统会进行完整性检查，如果不符合约束条件将不会执行操作。视图需要理解的核心便是，视图并不是实际的表，它是一个虚拟表，它只存储数据的定义，并不引入数据。在对视图进行查询操作时，实际上是对表进行查询操作，系统会利用视图实例法或者视图消解法完成二者的转换。视图的引入，有利于用户从多个方面观察数据，也能够更加明了的看到所需的数据。同时，因为视图处在三级模式的外模式内，保证了数据的独立性。视图不引入数据的特点，也给表内数据做出了安全性的保证。但是需要注意，对于视图，一般不进行更新操作，因为这极易影响基表中的数据。对于视图的更新，一般采取删除重建的方式，由于视图并不引入数据，相对也更加安全简捷可靠。,第三章  关系数据库标准语言SQL,2022-10-31 23:23:59
2020213335,本节课主要是练习数据库的查询语句，讲解两次的习题。习题涵括范围比较广，但比较基础，很适合查漏补缺。在习题里，进一步掌握了转义字符的使用，和字符匹配LIKE关键字的使用，同时注意到ESCAPE关键字完成的转义作用。对同一道题，学会运用嵌套和多表连接两种方法来解决问题。,第三章 关系数据库标准语言SQL,2022-11-07 20:18:40
2020213335,本节课主要学习了数据库安全性问题，理论性较强。主要介绍了数据库的不安全因素、安全标准和安全性保护措施。学习了GRANT、REVOKE语句，用以向用户授予或者收回对数据的权限操作。同时还有[WITH GRANT OPTION]子句，即规定获得某种权限的用户还可以把这种权限再授予其他的用户。需要注意好语句的使用和意义。,第四章  数据库安全性,2022-11-14 20:36:05
2020213335,"本节课完整学习了第五章数据库完整性的内容。了解了关系数据库管理系统完整性实现的机制，包括完整性约束定义机制、完整性检查机制和违背完整性约束条件时关系数据库管理系统应采取的动作等。主要通过四元组（O,P,A,R）来实现，其中O为数据集合,P为谓词条件,A触发条件,R为相应动作，一般情况下，A,R,为默认值，我们只需要定义O,P关系即可。对于静态约束而言，一般分为域完整性约束和关系完整性约束，主要通过NONT NULL,UNIQUE,PRIMARY KEY,CHECK,ON DELETE子句实现，CHECK后面通常跟着判断语句。域完整性是作用于单列的，而关系完整性则是作用于多列的。对于动态约束而言，主要通过触发器方法来实现，触发器可以实现动作体的检查，完成动态过程的约束，可以定义是BEFORE还是AFTER这个瞬间，灵活性较高。",第五章 数据库完整性,2022-11-26 15:12:26
2020213335,由于疫情影响，这节课采取的时线上学习的方式，结合云课堂中的课件和讲解视频学习第六章关系数据理论。复习了一下关系、关系模式、关系数据库和关系数据库的模式这四个概念。引入了数据依赖的概念，同时就数据依赖可能带来的数据冗余和操作异常问题，提出解决方案--分解关系模式从而消除其中不合视的数据依赖。学习了规范化的概念，区分了平凡函数依赖和非平凡函数依赖、完全函数依赖和部分函数依赖，以及传递函数依赖的概念。,第六章 关系数据理论,2022-11-29 21:52:09
2020213335,这一礼拜对规范化进行了更加深入的学习，了解了范式的概念以及分类，还有如何进行模式分解。函数依赖关系很多情况下是由具体语义决定的。  范式指规范了（满足了一定要求）的关系模式，范式按照规范等级分为1NF、2NF、3NF、BCNF、4NF等。第一范式要求关系R的所有属性都是不可再分的基本数据项，第二范式则是在第一范式的基础上，消除了部分依赖形成的，即每一个非主属性都完全函数依赖于码，第三范式则是进一步消除了传递依赖，使得每一个非主属性既不部分依赖于码也不传递依赖于码。BC范式与第三范式之间存在着充分不必要的关系，BC范式是修正了的第三范式。BC范式要求任何决定因素必须包含码。,第六章 关系数据理论,2022-12-18 18:48:47
2020213335,数据库在进行设计时，最好将其设计为BCNF模式集，但是并不意味着不符合安抚范式要求的设计是错误的设计，还需根据具体情况分析权衡，好的模式设计应当符合表达性、分离性和最小冗余性的原则，做到数据等价和语义等价，最大程度的实现分离独立，根据实际情况尽可能地减小冗余。,第六章 关系数据理论,2022-12-18 18:49:00
2020213335,数据库设计需要经过规划、需求分析、概念设计（E-R图、UML图）、逻辑设计（范式）、物理设计、数据库的实现和数据库的运行与维护几个阶段，反应的是从现实世界到信息世界再到机器世界的过程。这章节的重点在于概念设计的E-R模型和逻辑设计的范式。我们需要根据实际情况，精确的将现实世界的联系对应好我们的数据库，我们需要解决好局部E-R模型到全局E-R模型的转换，消除属性冲突、结构冲突和命名冲突的问题，在对整体进行优化，消除冗余。,第七章 数据库设计,2022-12-18 18:49:20
2020213336,本节课主要学习了数据库系统以及两类数据模型的相关知识。数据库包含了数据、数据库、数据库管理系统和数据库系统四个基本概念。描述事物的符号记录称为数据，数据库则是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库管理系统是位于用户与操作系统之间的一层数据管理软件。数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。这四个基本概念是了解数据库基本概念的基础。此外，还学习了关于数据模型的知识。在数据库系统中，数据模型是其核心与基础，根据模型应用的不同目的，通常将数据模型分为两类——概念模型和逻辑模型。概念模型是现实世界到信息世界的第一层抽象，能够将现实生活中的事物抽象到信息世界。在信息世界中，涉及到实体、属性、码、实体性、实体集、联系等概念，清楚这些概念，才能准确的绘制出E-R图。对于第一次接触这些概念的我来说，一开始的确不太理解这些专有名词，但是通过老师的两个E-R图的实例，就更好理解了。,第一章绪论第一节课,2022-09-13 11:17:07
2020213336,本节课主要介绍了数据库中几种主要的逻辑数据模型——层次模型、网状模型以及关系模型。层次模型和网状模型统称为格式化模型。满足有且只有一个结点没有双亲结点（根结点），根以外的其他结点有且只有一个双亲结点则为层次结构，层次结构的形状就像树一样，和数据结构中的树形结构很相似。网状模型允许一个以上的结点无双亲，并且一个结点可以有多余一个的双亲。网状模型的形状就和它的名字一样，像网一样。层次模型和网状模型的优缺点都很明显，层次模型的数据结构简单清晰，查询的效率更高，但是不适合处理结点间多对多的联系，网状模型虽然对于多对多的联系处理起来比较方便，但它的结构比较复杂，用户不容易使用。关系模型是最重要的一种数据模型，它以二维表的形式表示实体与实体间的联系，它建立在严格的数学概念的基础上，具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作。本节课的内容还比较好理解，课后习题也加深了对于这三种模型的印象。,第一章绪论第二节课,2022-09-13 12:51:12
2020213336,"本节课主要介绍了关系数据结构及形式化定义以及关系操作的相关知识，在了解关系数据结构之前，需要知道一些基础知识，首先，要了解关系的相关概念，域是一组具有相同数据类型的值的集合，也就是取值范围，笛卡尔积为D1×D2×...×Dn，即分别从域D1、D2 …… Dn中选取一个元素记为d1、d2 …… dn组成的集合，一个域允许的不同取值个数称为这个域的基数，笛卡尔积可表示为一张二维表，表中每一行对应一个元组，表中的每一个值来自一个域。D1×D2×...×Dn的子集叫做在域D1、D2 …… Dn上的关系，n是关系的目或度，n=1时称为单元关系。在关系的相关概念中，要分清楚候选码、主码、全码的概念，关系中的某一属性组的值能唯一的标识一个元组，而其子集不能，则该属性组被称为候选码，主码是候选码中选定的其中一个，当关系模式的所有属性是这个关系模式的候选码，则称为全码。基本关系具有六条性质：1.每一列中的数据来自同一个域，是同一类型的数据；2.不同的列可以出自同一个域，称其中的每一列为一个属性；3.列的顺序无所谓；4.行的顺序无所谓；5.分量必须取原子值，不可再分；6.任意两个元组的候选码不能相同。关系模式是对于关系的描述，可被表示为R(U,D,DOM,F)。在一个给定的应用领域中，所有关系的集合构成一个关系数据库。关系数据库的型称为关系数据库模式，关系数据库的值是关系模式在某一个时刻对应的关系的集合，通常称为关系数据库。关系常用的关系操作包括查询、操作和插入、删除、修改操作。查询操作可分为选择、投影、连接、除、并、差、交、笛卡尔积等。选择、投影、并、差、笛卡尔积是五种基本操作。这节课的内容主要是那几种码那里比较容易混淆，书上给的概念比较难懂，通过一些例子去理解会更容易。",第二章关系数据库第一节课,2022-09-23 15:44:25
2020213336,本节课主要介绍了关系的三类完整性约束以及传统的集合运算——并、差、交、笛卡尔积的相关知识。关系模型中共有三类完整性约束：实体完整性、参照完整性以及用户定义的完整性三种。实体完整性是指基本关系R的主属性A不能取空值。参照完整性是指基本关系R在外码F上的值必须等于另一个基本关系S中某个元组的主码值或者取空值，其中外码指的基本关系R的一个或一组属性F，并且F与基本关系S的主码Ks相对应，可以理解为在基本关系R中的属性F（不是主码）同时在另一基本关系S中作为主码，这时F就被称作R的外码。用户自定义的完整性就比较好理解了，即用户根据自身需求或是语义来规定属性的取值范围，如性别一类只能取男或女，这就是用户自定义的完整性。关系代数的运算中传统的集合运算还是比较好理解的，并和交的操作都和高中数学中集合的并集以及交集一致，不过需要注意的是在关系模式中，集合的最小操作单位是元组，将两个集合中的元组通过集合操作形成另一个元组的集合。差操作和数学中的也一样，减去相同的元组，但要注意被减去的元组是哪个。笛卡尔积则可以用排列组合的思想来理解，将每个元组看做一个整体，分别从两个关系的集合中选取一个元组，组成一个新的集合。这节课比较难理解的地方就是外码以及参照完整性规则，这个地方书上写的概念比较绕，不太好理解。,第二章关系数据库第二节课,2022-10-01 13:28:05
2020213336,"本节课主要学习了四种专门的关系运算——选择、投影、连接、除运算。选择运算即选择关系R中满足给定条件的元组，选择运算是对行进行的运算。投影运算是从关系R中选择出若干属性列组成新的运算，投影运算是从列的角度进行的运算，需要注意的是投影操作后需要将完全相同的行删去。连接运算是从两个关系的笛卡尔积中选取属性满足一定条件的元组。连接运算中还有两个比较重要的概念——等值连接和自然连接。等值连接就是选取两个关系中属性相同的元组，并保留重复项。自然连接则需要将等值连接的结果删去重复项。如果将被舍弃的元组（悬浮元组）也保留在结果关系中，而在其他属性上填Null，这种连接叫做外连接，只保留左边关系R的悬浮元组就叫做外连接，只保留右边关系S中的悬浮元组就叫做外连接。除运算比较难理解，经过除运算后得到的结果是包含被除关系S的所有属性值的关系R中的属性（该属性不包含S中的属性）。在计算时，采用象集的方式进行，象集是除去某一属性后剩余的属性组，对于给定关系R（X,Y）和S(Y,Z)，除运算即元组在X上的分量值x的象集Yx包含S在Y上投影的集合。除运算对于“至少”“全部”等问题比较适用。经过本节课的学习，我对这些关系运算有了更深的理解，能够看懂老师课上写的式子以及解题的思路，但是自己做题还是不太明白要怎么写，不太熟练，还要多练习一下。",第二章关系数据库第三节课,2022-10-10 23:19:22
2020213336,本节课主要在线下自学了关系数据库标准语言SQL的相关知识、数据定义以及数据的单表查询。结构化查询语言（SQL）是关系数据库的标准语言，也是一个通用的、功能极强的关系数据库语言。SQL集数据查询、数据操纵、数据定义和数据控制功能为一体，具有综合统一、高度非过程化的、面向集合的操作方式、以同一种语法结构提供多种使用方式的，既是独立的语言，又可作为嵌入式语言以及语言简洁，易学易用的特点。支持SQL的关系数据库管理系统同样支持关系数据库三级模式结构（外模式、模式以及内模式三级模式），其中外模式包括若干视图和部分基本表，模式包括若干基本表，内模式包括若干存储文件。SQL的数据定义功能包括模式定义、表定义、视图和索引的定义。创建模式、表、视图或索引使用的均为CREATE关键字，删除使用DROP关键字，修改使用的是ALTER关键字。SQL不提供修改模式定义和修改视图定义的操作，要想修改模式定义或视图定义，只能将其删除并重建。一个关系数据库管理系统的实例中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。在删除表时要注意，CASCADE（级联）表示再删除模式的同时把该模式中所有数据库对象全部删除，RESTRICT表示只有当该模式中没有任何下属对象时才能删除。在定义表时，需要指明数据类型，不同的属性赋予不同的数据类型，并写出对应的完整性约束。在修改基本表时，可以用ADD子句或DROP子句增加或删除列，无论表中原来是否已经有数据，新增加的列一律为空值。建立索引是加快查询速度的有效手段，可以UNIQUE索引（索引的每一个索引值只对应唯一的数据记录）或是CLUSTER（聚簇索引）。查询表可以使用SELECT语句，对于重复行，可以使用DISTINCT消除，ORDER BY语句可用于排序。本节课的内容比较多，对于模式、表、视图或索引的创建，一开始看的时候对于字符还不太理解，结合例子会更好理解。,第三章第一节课,2022-11-03 22:37:10
2020213336,本节课主要学习了数据的连接查询、嵌套查询、集合查询以及SELECT语句的一般形式。连接查询可以将多个表之间进行连接，也可以将自身进行连接，但是在进行自身连接时，需要将原表重新命名成两个不同的表。嵌套查询即将外层查询条件换成另一个查询（子查询），但是子查询中不能使用ORDER BY语句。当子查询的查询条件不依赖于父查询时，称为不相关子查询，否则为相关嵌套查询。使用EXISTS语句的查询表示若内层查询结果非空，则外层的WHERE子句返回真值，否则返回假值，NOT EXISTS则相反。集合操作主要包括并操作UNION、交操作INTERSECT和差操作EXCEPT。本节课的内容是上节课的延续，和上节课内容差不多，上课时复习了上节课的相关知识，有利于本节课知识的学习。,第三章第二节课,2022-11-03 23:47:26
2020213336,本节课主要在线上学习了数据的插入、修改以及删除操作以及视图的定义、查询、更新以及作用。数据插入采用的是INSET语句，在赋值时，值和属性列需要一一对应，对于INTO语句中没有指定的属性列，其余列将会自动取空集。修改数据操作使用的是UPDATE语句，将所需修改的值放入SET语句中，修改条件放入WHERE中。删除数据使用的是DELETE语句，用于删除某一具体属性。定义视图采用的是CREATE VIEW-AS语句，WITH CHECK OPTION表示对视图进行UPDATE、INSET和DISTINCT操作时要保证更新、插入或删除的行满足视图定义中的谓词条件。视图不仅可以建立在一个或多个已定义好的视图上或建立在基本表与视图上。用带有聚集函数和GROUP BY子句的查询来定义视图，这种视图称为分组视图，但是WHERE子句中不能使用聚集函数作为条件表达式，此时可以将WHERE语句换成HAVING语句。更新视图语句与数据更新的语句差不多，但是要注意不是所有视图都是可更新的，各个系统对于视图更新的相关规定不尽相同。合理使用视图能够简化用户的操作，还可以使用户能从多种角度看待同一数据，对重构数据库提供了一定程度的逻辑独立性，对机密数据提供安全保护，还可以更加清晰地表达查询。本节课还介绍了数据库软件的使用，加深了对SQL语言的理解。,第三章第三节课,2022-11-03 23:47:42
2020213336,本节课主要是练习课，复习了SQL数据查询语言的写法，包括单表连接、IN的用法、LIKE的用法、NULL的用法、ORDER BY 的用法、聚集函数、GROUP BY子句、连接查询以及嵌套查询的相关知识。单表查询、IN的用法、LIKE的用法以及NULL的用法等都比较容易就能理解，也很快就能使用它们写SQL语句，ORDER BY 子句、聚集函数和GROUP BY子句由于之前没怎么用，因此还不太熟悉他们的用法，尤其是将这几种用法结合起来用时，还是不太清楚该如何下手。还有自身连接也不太熟悉，经常无法反应过来是自身连接，所以自身连接我通常会选择使用嵌套查询，这样会比较好理解，虽然语句比较多。,第三章第四节课,2022-11-07 23:42:32
2020213336,本节课主要学习了数据库的安全性，数据库的安全性控制包括用户身份鉴别、存取控制、自助存取控制方法、授权、数据库角色以及强制存取控制方法。用户身份鉴别包括静态口令鉴别、动态口令鉴别、生物特征鉴别以及智能卡鉴别。存取控制机制主要包括定义用户权限和合法权限检查两部分。SQL主要通过GRANT语句和REVOKE语句来实现自助存取控制，GRANT语句用于授予用户对数据的操作权限，指定WITH GRANT OPTION子句则该用户可以将该种操作权限授予其他用户，但不允许循环授权。REVOKE语句用于收回用户操作权限，如果使用CASCADE则会将该用户及其授予他人的权限一并收回。数据库中的角色是权限的集合，可以简化授权的过程。强制存取控制规定，当主体的密级高于或等于客体时，可以读取数据，只有当主体密级小于或等于客体密级时才能对数据进行写入，提高了数据的安全性。视图机制是通过把保密数据对无权存取的用户隐藏起来，从而自动对数据提供一定程度的安全保护。这节课的内容比较简单，比较容易就能理解。,第四章第一节课,2022-11-14 23:58:22
2020213336,本节课主要学习了数据库的完整性相关知识，为维护数据库的完整性，数据库管理系统需要必须能够提供定义完整性约束条件的机制以及能够进行完整性检查，当用户的操作违背了完整性约束条件时需要能够采取一定的动作。数据库中关系模型的完整性在CREATE TABLE中用PRIMARY KEY定义，定义实体完整性后，数据库管理系统将会自动检查主码值是否唯一以及主码的各个属性是否为空。参照完整性在CREATE TABLE中用FOREIGN KEY短语定义外码，用REFERENCES短语指明外码参照的主码。当插入或删除元组，修改外码值时均有可能破坏参照完整性规则，当用户操作不符合参照完整性规则时，系统可以采取拒绝操作级联操作或设置为空值。在CREATE TABLE中定义属性的同时，还可以由用户自定义属性或元组上的约束，往表中插入或修改属性值或元组时，需检查这些约束条件是否满足，不满足则操作被拒绝执行。触发器是用户定义在关系表上的一类由事件驱动的特殊过程，SQL使用CREATE TRIGGER命令建立触发器，AFTER或BEFORE是触发的时机。本节课涉及到的数据库完整性约束在前面的课程中也有提到，理解起来并不难，但是代码的编写上还不太熟悉。,第五章第一节课,2022-11-27 11:09:21
2020213336,本节课主要在线下自学了数据库关系模式的规范化相关知识。首先是函数依赖，对于任意R的一个关系r，X的每一个具体值，Y都有唯一值与之对应，则X决定函数Y，或Y函数依赖于X，记作X→Y。关系数据库 中的关系模式需要满足一定的要求，满足不同程度要求的为不同范式。满足最低要求无重复列的关系模式为第一范式，消除部分依赖后则为第二范式，消除传递依赖以及部分依赖后则为第三范式。满足所有非主属性对每一个码都是完全函数依赖，所有主属性对每一个不包含它的码也是完全函数依赖以及没有任何属性完全函数依赖于非码的任何一组属性的关系模式称为BCNF范式，满足BCNF范式的关系模式必定是3NF，但满足3NF范式的关系模式不一定是BCNF范式。一个低一级的范式的关系模式通过模式分解可以转换为一个高一级范式的关系模式，这个过程叫做规范化。数据库关系模式的规范化有点复杂，关于范式的分类我大概已经清楚了，但是具体如何进行范式的规范化这部分还是不太明白。,第六章第一节课,2022-12-02 17:38:35
2020213336,本节课主要学习了数据库设计的技术和方法。数据库设计是指对于一个给定的应用环境，设计优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足用户的应用需求。数据库设计包括需求分析阶段、概念结构设计阶段、逻辑结构设计阶段、物理结构设计阶段、数据库实施阶段以及数据库运行和维护阶段。需求分析阶段就是了解和分析用户需求，是整个设计过程的基础。概念结构分析则是将需求分析阶段得到的用户需求抽象为信息结构，用E-R图表示各子系统并进行集成。在集成过程中，各子系统的E-R图可能会产生属性冲突、命名冲突以及结构冲突，集成时需要将这些冲突消除。逻辑结构设计的任务就是把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理产品所支持的数据模型相符合的逻辑结构，即外模式的设计。物理结构设计即为给定逻辑数据模型选取一个最合适的物理结构的过程，即内模式的设计。数据库的实施阶段包括数据的载入以及以及应用程序的编码和调试，在试运行时先输入小部分数据进行调试，待合格后再大批量输入数据。数据库的运行和维护工作主要由数据库管理员完成的，主要包括数据库的转储和恢复，数据库的安全性、完整性控制，数据库性能的监督、分析和改造以及数据库的重组织和重构造，这是一个长期的任务。本节课内容比较简单，比较好理解。,第七章第一节课,2022-12-07 20:59:16
2020213337,"绪论的学习主要包含了大量基本概念学习，需要记忆和理解的东西就多，首先要分清楚数据，数据库，数据库管理系统，数据库系统之间的区别和关系，数据是最基础的，数据库是数据的集合，数据库管理系统是位于用户与操作系统之间的一层数据管理软件，而数据库系统是数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。
还了解了两种数据模型，概念模型、逻辑模型和物理模型。概念模型用于数据库设计，逻辑模型用于数据库管理系统的实现，物理模型是描述数据在系统内部的表示方式和存取方法，或在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的。
   其中大部分概念都还可以了解，我认为其中的实体（entity），实体型（entity type），实体集（entity set），属性（attribute），码（key）的概念和理解还是比较重要，只有理解他们之间的关系，在绘制E-R图时才不容易出错。实体之间的关系也是很多，一对一，一对多，多对多，这也是要理解的，要理解他们之间的关系，我是通过举例子进行理解的，这样方便理解也容易记忆点。

",绪论,2022-09-07 00:23:40
2020213337,通过第二节课的巩固和学习，这次伴随课本的学习，可以更好的在学习的同时，做好笔记，同时对于自己不理解的知识，以及想深入学习的知识都可以在课本上进行详细的学习。这次课程的学习更好的复习了上节课学习的概念，也了解三种重要的逻辑模型：层次模型，网状模型，关系模型，其中层次模型和网状模型属于非关系模型。层次模型是数据库系统中最早出现的数据模型，采用树形结构来表示各类实体以及实体间的联系，和数据结构中的二叉树有相像之处。作为最早的数据模型，存在一定的缺陷，通过上节课我们了解到，实体型之间的联系有一对一联系（1:1），一对多联系（1:n），多对多联系（m:n），层次模型只能直接处理一对多的实体联系，对于多对多联系表示不自然。于是便有了网状模型，网状模型可以更直接地去描述现实世界，但是结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂。关系模型中数据的逻辑结构是一张二维表，对于实体型之间的联系则都可以进行表现，且建立在严格的数学概念的基础上;概念单一:实体和各类联系都用关系来表示;对数据的检索结果也是关系;易于理解，不足的是存取路径对用户透明导致查询效率往往不如非关系数据模型;但依旧不影响关系模型被广泛使用。课后的习题练习，也很好的巩固了对知识的吸收，纠正了学习中对知识的理解错误，总而言之，挺好的,绪论2,2022-09-13 10:43:24
2020213337,关系数据库是目前主流数据库之一。在之前的课堂，初步学习了解了关系模型和它的基本模型，这次主要学习了数据模型的三要素，关系模型主要包括：关系数据结构，关系操作集合和关系完整性三部分。对于关系数据库来说，它的数据结构比较简单，是单一的数据结构与，就是一张扁平的二维表，同时还需要了解其中域，笛卡尔积，关系三者之间的联系和区别。也要了解候选码，主码以及全码之间的区别，候选码是关系中某一属性组的值能唯一地标识一个元组，而子集不能，可以有多个，而主码则是候选码中选一个，全码则是所有属性作为候选码。关系模式是关系的描述，关系是关系模式的某一时刻的状态，关系模式是静态的，稳定的，而关系是动态。一开始我对于这两个概念并不是特别了解，后面通过看书上的一个例子了解啦：“学生关系模式在不同的学年，学生关系是不同的”。关系操作是对数据进行操作，包括查询操作和插入，删除，修改操作两个大部分，其中查询操作是关系操作中最主要的部分，关系操作的特点是集合操作方式，即操作的对象和结果都是集合。对于关系的完整性约束包括三类：实体完整性，参照完整性和用户定义的完整性。  实体完整性要求每个数据表都必须有主键，而作为主键的所有字段，其属性必须是独一及非空值，因为现实世界中的实体是可以相互区分、识别的。参照完整性是定义建立关系之间联系的主关键字与外部关键字引用的约束条件，参照的完整性要求关系中不允许引用不存在的实体。用户自定义完整性是针对某一具体关系数据库的约束条件，实际上就是指明关系中属性的取值范围，防止属性的值与应用语义矛盾。,关系数据库,2022-09-25 11:15:25
2020213337,本节课主要学习了关系的完整性，主要包括实体完整性和参照完整性和用户自定义完整性。其中实体完整性和参照完整性是关系模型必须要满足的完整性约束条件，是关系的两个不变形，而用户定义的完整性，如其名，是用户自己定义的约束条件。这节课引入了具体例子来进行介绍，深化了上节课引入的有关完整性的知识。在关系模型的实体及实体之间的联系都是用关系来描述的，存在着关系与关系之间的应用，这样就要了解主码和外码，在前面学习了主码是什么，主码要求：非空，唯一性。外码则是如果一个关系的一个属性，该属性不为候选吗，是另一个关系的主码，则这个属性就是外码，外键（外码）的作用是使亮哥 关系表形成关联，外键只能引用外表中的列的值或使用空值。主码和外码必须定并义在同一个域上，外码并不要与相应的主码同名。然后学习了关系代数运算，包括传统的集合运算和专门的关系运算，集合运算有：并，差，交，笛卡尔积，比较运算就不做多解释，专门的运算关系有选择，投影，连接和除。并，差，交都要求两个关系具有相同的n个属性，且相应的属性取自同一个域。对于笛卡尔积的话，就是R：n目关系，k1个元组和S：m目关系，k2个元组。R和S做笛卡尔积R*S后，结果就是（m+n）列和K1*k2个元组的集合，其中前n列是关系R的一个元组，后m列是关系S的一个元组,关系数据库2,2022-10-14 14:47:51
2020213337,本节课讲述的是上次未讲解完的专门运算，包括选择，投影，连接和除运算。首先了解了关系模式的表达方式，即R（A1，A2，...，An），其中R为关系名，A1-An则表示属性。通常以t表示R的一个元组，以t[Ai]表示t元组相应属性Ai的一个分量。然后还了解了R中属性列或属性组的表达方式以及元组t在属性列A上诸分量的集合表达方式和元组之间连接的表达。还了解象集的定义，象集是R中属性组X上值为x的诸元组在Z上分量的集合。连接完这些概念后，具体学习了专门的关系运算，选择就是在关系R中选择满足给定条件（限制）的诸元组，返回结果是元组集合，是从行的角度进行的运算。投影则是选择出若干属性列组成新的关系，是从列的角度进行运算，但投影之后取消了原关系中的某些列，所以有可能还要取消某些元组，因为要避免重复行的出现。连接运算则是从两个关系R和S的广义笛卡尔积中选取（R关系）在A属性组上的值与（S关系）在B属性组上值满足比较关系的元组。连接中还有等值连接，比较关系为“=”的连接运算为等值运算，其含义为从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组。等值运算中还有特殊的等值运算：自然运算，其要求两个关系中进行比较的分量必须是相同的属性组，且在结果中把重复的属性列去掉。其中还要区分外连接，左外连接和右外连接,关系数据库3,2022-10-14 16:34:44
2020213337,"这次的学习采用的是线上自主学习，通过学习课件，了解到SQL语言的特点和功能和基本语句的用法，SQL的功能主要是数据查询，数据操纵，数据定义以及数据控制，可理解为对表中数据的定义，查询，修改等操作。特点包括综合统一（集一系列功能于一体），高度非过程化（只需要告诉系统做什么，不需要指明怎么做），面对集合的操作方式（操作对象，查找结果都是集合），以同一种语法结构提供多种使用方式（SQL即是独立语言，又是嵌入式语言）, SQL的关系数据库三级模式结构，模式包括外模式（若干视图），模式（若干基本表），内模式（若干存储文件）。要注意的是其中，一个关系对应一个基本表，一个或多个基本表对应一个存储文件，一个表可以带多个索引，索引存储在存储文件中。其次学习的便是SQL.语音的基本语句用法，数据查询：SELECT，数据定义：CREATE，DROP，ALTER，数据操纵：INSERT，UPDATE，DELETE，数据控制：GRANT，REVOKE。语法主要就是这几个动词的用法，整体上还是很简单的",关系数据库标准语言SQL1,2022-11-08 15:37:42
2020213337,这节课老师对上节课的内容进行了补充讲解，对一些重难点讲解了一下，随后讲解了连接查询，连接查询就是对同时涉及多个表的查询，主要有嵌套循环法，排序合并法（常用于连接），索引连接法（通过连接字段建立索引）。在其中要分清楚等值和非等值连接，其实也挺容易分辨，就是有‘=’的就是等值连接，其他的连接运算就是非等值连接。自身连接就是自己与自己进行连接，但需要给表起别名进行区别，且所有属性前要使用别名前缀。其次便是外连接和普通连接的区别，普通连接操作只输出满足连接条件的元组，但外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出。左外连接列出左边关系中的所有元组，右外连接则反之。其次就是要分清楚，非相关子查询和相关子查询，非相关子查询的执行不依赖与外部的(父)查询，它是先执行子查询，其结果不显示，而是传递给外部查询，作为外部查询的条件使用。相关子查询的执行依赖于外部（父）查询，它是（1）从外层查询中取出一个元组，将元组相关列的值传给内层查询。（2）执行内层查询，得到子查询操作的值。（3）外查询根据子查询返回的结果或结果集得到满足条件的行。（4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕.,关系数据库标准语言SQL2,2022-11-08 23:54:32
2020213337,在之前的前两次课，学习了关系数据库的定义以及数据的查询，这节课讲解了数据的更新，数据的更新主要包括三部分：插入数据，修改数据，删除数据。其中插入数据有两种方式，一种插入元组。一种是插入子查询结果（可以一次插入多个元组），动词为INSERT，INTO子句中属性列的顺序可以与表定义的顺序不一致，但VALUES子句提供的值必须与INTO子句匹配。插入子查询时，SELECT子句目标列必须与INTO子句匹配。修改数据的动词为UPDATE，包含SET子句和WHERE子句（非必要），可以修改一个元组，也可以修改多个元组，还可以带子查询的修改语句。删除数据的动词是DELETE，子句包含FROM和WHERE（非必要），同样有三种，一个和多个以及带子查询的删除语句。其中插入数据和更新数据会检查修改操作是否破坏表上已定义的完整性规则。还需要了解到视图其实是虚表，是从一个或多个基本表导出的表，不存放视图对应的数据，基本表中数据改变，视图得到的数据也会随之改变。视图也包括定义，查询，跟新的操作，大体上和数据的操作差不多。,关系数据库标准语言SQL3,2022-11-09 18:39:25
2020213337,这节课没有继续讲解新的内容，而是通过一小段练习来巩固对数据的定义，查询，修改操作的知识，通过30道小练习来练习自己的SQL语句，可以发现这些题目，大部分都可以在课本上找到。如果之前认真学习过，大部分都没有较大的问题。我是先通过自己能力来书写相应的SQL语句，最后在通过对比课本上的答案，用于检验自己的SQL语句是否正确，在其中还是发现自己还有一部分知识是没有掌握的，比如需要在其中插入转义符‘/’时，需要使用EXCEPT ‘/’来明确这个是转义符，进而跳过这个符号。总结，通过小练习还是巩固了一下自己的有关语法方面的知识，也发现也自己的不部分问题，及时得到了改正。,关系数据库标准语言SQL4,2022-11-09 18:47:53
2020213337,该章节主要是讲数据库的安全性，其是保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。对于数据不安全的因素主要有1.非授权用户对数据库的恶意存取和破坏2.数据库中重要或敏感的数据被泄露3.安全环境的脆弱性。这章主要学习的是数据库的安全控制，在数据库系统中的安全措施是一级一级层层设置的，用户方面有用户标识和鉴别，DBMS有数据库安全保护，OS有相应的数据安全保护，数据方面有数据密码存储。其中相应比较重要的内容有用户权限的授予，通过GRANT语句，对指定操作对象的指定操作权限授予指定的用户。REVOKE语句可以将授予用户的权限可以由数据库管理员或其他授权者用 REVOKE 语句收回。对于用户的创建，只有系统的超级用户才有权创建新的数据库用户。数据库用户权限有CONNECT、RESOURCE 和 DBA。对于connect权限的只能登陆数据库，对于拥有 RESOURCE 权限的用户能创建基本表和视图，成为创建对象的属主，拥有 DBA 权限的用户是系统中的超级用户，可以创建新的用户、创建模式、创建基本表和视图等；DBA拥有对所有数据库对象的存取权限，还可以把这些权限授予一般用户。,数据库安全性,2022-12-08 22:09:54
2020213337,"在之前的课程中就学习了数据库完整性包括实体完整性，参照完整性，用户自定义完整性。在本章中我学习到数据库的完整性是指数据的正确性和相容性。
数据的正确性是指数据是符合现实世界语义、反映当前实际状况的；
数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。
同时数据的完整性和安全性是两个既有联系又不尽相同的概念。数据的完整性是为了防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据。而数据的安全性是保护数据库防止恶意破坏和非法存取。
为了维护数据库的完整性，数据库管理系统便要求：提供定义完整性约束条件的机制、提供完整性检查的方法、进行违约处理。
定义实体完整性通过primary key来定义，对于单属性构成的码可以定义为列级约束条件或者表级约束条件；对多个属性构成的码只能定义为表级约束条件。检查则是检查主码值是否唯一，检查主码的各个属性是否为空，不符合则拒绝插入或修改。
定义参照完整性则是通过Foreign key和reference来定义。参照完整性将两个表中的相应元组联系起来。对被参照表和参照表进行增、删、改操作时有可能破坏参照完整性，必须进行检查以保证两个表的相容性。此外还应该注意，除了应该定义外码，还应定义外码列是否允许空值。
用户定义的完整性则是针对某一具体应用的数据必须满足的语义要求。可根据应用要求定义属性上的约束条件，即属性值限制。包括：列值非空（NOT NULL）、列值唯一（UNIQUE）、检查列值是否满足一个条件表达式（CHECK 短语）。
元组上的约束条件，则是在CREATE TABLE 语句中可以用 CHECK 短语定义元组上的约束条件，同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。
",数据库完整性,2022-12-09 17:08:48
2020213337,"这一章节主要是学习在函数依赖、多值依赖的范畴内讨论了关系模式的规范化。数据依赖的主要类型：函数依赖、多值依赖。第一范式存在一些问题，如数据冗余、更新异常、插入异常、删除异常。需要通过规范化理论改造关系模式来消除其中不合适的函数依赖。
对于函数依赖， X 和 Y 是属性集U的子集，不存在两个元组在 X 上的属性值相等，且在 Y 上的属性值不等，则则称 X 函数确定 Y 或 Y 函数依赖于X ，记作 X→Y 。
X→Y，但 Y⊈X，则称 X→Y 是非平凡的函数依赖。
X→Y，但 Y⊆X，则称 X→Y 是平凡的函数依赖。（对于任一关系模式，平凡函数依赖都是必然成立的）
若 X→Y，则 X 称为这个函数依赖的决定属性组，也称为决定因素（determinant）。
若 X→Y，Y→X，则记作 X← →Y 。
若 Y 不函数依赖于X，则记作 X↛Y。
若 X→Y，并且对于 X 的任何一个真子集 X′ , 都有 X′↛Y, 则称 Y 对 X 完全函数依赖，记作 X→FY 。
若 X→Y，但 Y 不完全函数依赖于 X，则称 Y 对 X 部分函数依赖，记作 X→PY 。
若 X→Y (Y⊈X) ， Y↛X ， Y→Z ， Z⊈Y ，则称 Z 对 X 传递函数依赖记为： 传递X→传递Z 。

且关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同范式。
范式之间存在联系：
5NF ⊂ 4NF ⊂ BCNF ⊂ 3NF ⊂ 2NF ⊂ 1NF
1NF—>2NF  :消除非主属性对码的部分函数依赖
2NF—>3NF  :消除非主属性对码的传递函数依赖
3NF—>BCNF :消除主属性对码的部分和传递函数依赖
BCNF—>4NF :消除非平凡且非函数依赖的多值依赖
",关系数据理论,2022-12-09 20:17:44
2020213338,这节课学习了数据、数据库、数据库管理系统、数据库系统的定义以及功能。还学习了有关数据模型的一些知识，学习了如何使用E-R图来表示概念模型。课程内容较多，有很多陌生的名词，需要找时间消化。,第一章：绪论,2022-09-09 22:00:52
2020213338,这节课完成了第一章的学习，习题上仍然有一些不懂的地方，比如外模式之类的，这些需要课后自己看书。,第一章：绪论,2022-09-17 09:40:33
2020213338,这节课学习了有关关系数据库的内容，其中有一些需要注意的地方：候选码、主码、主属性和非主属性的定义、联系、区别；型和值的关系。,第二章：关系数据库,2022-09-24 19:48:49
2020213338,这节课学习了关系的完整性约束和关系代数中传统的集合运算，其中笛卡尔积运算是想对较为陌生的概念，但是通过课前预习加上老师的讲解能够基本掌握。,第二章：关系数据库,2022-10-01 09:34:35
2020213338,这节课讲了专门的关系运算，需要熟悉各种运算方式的规则。,第二章：关系数据库,2022-10-30 19:26:47
2020213338,"这节课是自习课，主要内容是熟悉SQL语言。
",第三章：关系数据库标准语言SQL,2022-10-30 19:31:54
2020213338,这节课讲了数据查询的SQL语句，其中较为难理解的是嵌套查询的内容，需要另找时间消化。,第三章：关系数据库标准语言SQL,2022-10-30 19:34:41
2020213338,这节课讲了数据更新和视图相关的SQL语句，课上有些走神，课下需要好好复习这一部分,第三章：关系数据库标准语言SQL,2022-11-07 09:16:39
2020213338,这节课是习题课，主要练习了SQL的查询语句，从练习结果上来看我并没有很好地掌握，还需要课下找时间练习。,关系数据库标准语言SQL,2022-11-13 22:52:06
2020213338,这节课讲了数据库安全性概述、数据库安全性控制和视图机制以及相关的SQL语句，有一些相对陌生的概念，需要下课再复习复习。,第四章：数据库安全性,2022-11-20 10:01:00
2020213338,这节课讲了数据库的完整性，和之前的关系完整性联系了起来。SQl语句部分介绍了违约处理、约束条件的定义以及完整性约束命名子句，课后需要动手实践一下。,第五章：数据库完整性,2022-11-28 14:58:00
2020213338,这节课是自学课，主要讲了规范化的内容，其中比较重要的是函数依赖的定义和范式转化的方法。,第六章：关系数据理论,2022-12-17 10:21:37
2020213338,这节课还是网上自学课，比较重要的内容是E-R图的设计。,第七章：数据库设计,2022-12-17 17:25:59
2020213341,"1.数据库系统的概述（四个基本概念及其特征）
2.学习了数据模型的概念，两大数据模型（概念模型和  逻辑模型、物理模型）逻辑模型中的网状和层次模型、关系模型（数据结构，完整性约束，数据操作）是学习的重点。",第一章绪论,2022-09-18 23:45:39
2020213341,"今日学习内容
2.3
1.实体完整性
2.参照完整性   外码
3.用户自定义的完整性

2.4
并 交  差  笛卡尔积

外码的概念要注意，要区分参照系与被参照系 外码在参照系 在被参照系里面不是主码。笛卡尔积的运算。
",2.3  关系的完整性与  2.4关系代数,2022-09-26 22:13:38
2020213341,主要学习了SQL的整体概述和SQL基本语句的用法与介绍。了解到了SQL的特点，SQL的综合统一、高度非过程化、面向集合的操作方式、以同一种语法结构提供两种使用方式、语法简洁、易学易用了解到SQL还可以作为嵌入式语言存在。之后学习了基本语句，分为DDL、DML、DCL，目前学习的大多处于DDL阶段。在执行DROP操作时，还需要注意RESTRCT和CASCADE的区别。同时结合上节课学的关系代数和关系演算，更进一步的了解两种方式之间的转换。可以用综合统一的SQL表达式完成上节课使用关系代数完成的操作，了解到关系代数是数据库的底层操作，但却不是所有数据库管理系统通用的语言。,第三章关系数据库标准语言SQL1,2022-12-19 21:54:07
2020213341,复习上节课学习的3.3数据定义并学习3.4数据查询的内容。数据查询分为单表查询、连接查询、嵌套查询和集合查询。单表查询比较基础，主要学习SELECT、FROM、WHERE语句的使用，之后的的多表查询就相对来说比较复杂，分为连接查询、嵌套查询和集合查询。同时在学习的过程中完成对相关子查询和不相关子查询两个概念的辨别。数据查询内容主要是基于习题展开的，通过对习题的讲解和分析，更加深入的了解和熟悉语句的使用。在某些特殊情况下，需要使用DISTINCT，并且可以采取连接查询和嵌套查询两种查询方式。通过例题的讲解和习题的练习，对二者进行区分。,第三章关系数据库标准语言SQL2,2022-12-19 21:54:20
2020213341,学习了数据更新和视图的内容。数据更新中的插入、修改、删除等操作。语法都比较相似，且用法比较简单，但在进行数据更新时，要注意完整性约束的问题，一般系统会进行完整性检查，如果不符合约束条件将不会执行操作。视图需要理解的核心便是，视图并不是实际的表，它是一个虚拟表，它只存储数据的定义，并不引入数据。在对视图进行查询操作时，实际上是对表进行查询操作，系统会利用视图实例法或者视图消解法完成二者的转换。视图的引入，有利于用户从多个方面观察数据，也能够更加明了的看到所需的数据。同时，因为视图处在三级模式的外模式内，保证了数据的独立性。视图不引入数据的特点，也给表内数据做出了安全性的保证。但是需要注意，对于视图，一般不进行更新操作，因为这极易影响基表中的数据。对于视图的更新，一般采取删除重建的方式，由于视图并不引入数据，相对也更加安全简捷可靠。,第三章关系数据库标准语言SQL3,2022-12-19 21:54:52
2020213341,主要学习了数据库安全性问题，理论性较强。主要介绍了数据库的不安全因素、安全标准和安全性保护措施。学习了GRANT、REVOKE语句，用以向用户授予或者收回对数据的权限操作。同时还有[WITH GRANT OPTION]子句，即规定获得某种权限的用户还可以把这种权限再授予其他的用户。需要注意好语句的使用和意义。,第四章 数据库安全性,2022-12-19 21:55:01
2020213341,"学习了第五章数据库完整性的内容。了解了关系数据库管理系统完整性实现的机制，包括完整性约束定义机制、完整性检查机制和违背完整性约束条件时关系数据库管理系统应采取的动作等。主要通过四元组（O,P,A,R）来实现，其中O为数据集合,P为谓词条件,A触发条件,R为相应动作，一般情况下，A,R,为默认值，我们只需要定义O,P关系即可。对于静态约束而言，一般分为域完整性约束和关系完整性约束，主要通过NONT NULL,UNIQUE,PRIMARY KEY,CHECK,ON DELETE子句实现，CHECK后面通常跟着判断语句。域完整性是作用于单列的，而关系完整性则是作用于多列的。对于动态约束而言，主要通过触发器方法来实现，触发器可以实现动作体的检查，完成动态过程的约束，可以定义是BEFORE还是AFTER这个瞬间，灵活性较高。", 第五章 数据库完整性,2022-12-19 21:55:13
2020213341,复习了一下关系、关系模式、关系数据库和关系数据库的模式这四个概念。引入了数据依赖的概念，同时就数据依赖可能带来的数据冗余和操作异常问题，提出解决方案--分解关系模式从而消除其中不合视的数据依赖。学习了规范化的概念，区分了平凡函数依赖和非平凡函数依赖、完全函数依赖和部分函数依赖，以及传递函数依赖的概念。,第六章 关系数据理论,2022-12-19 21:55:25
2020213341,数据库设计需要经过规划、需求分析、概念设计（E-R图、UML图）、逻辑设计（范式）、物理设计、数据库的实现和数据库的运行与维护几个阶段，反应的是从现实世界到信息世界再到机器世界的过程。这章节的重点在于概念设计的E-R模型和逻辑设计的范式。我们需要根据实际情况，精确的将现实世界的联系对应好我们的数据库，我们需要解决好局部E-R模型到全局E-R模型的转换，消除属性冲突、结构冲突和命名冲突的问题，在对整体进行优化，消除冗余。,第七章 数据库设计,2022-12-19 21:55:32
2020213342,"       本节课主要学习了数据库系统概述和数据库模型的部分内容。
       作为这门课程的引入，数据库系统概述引入了数据、数据库、数据库管理系统、数据库系统四个基本概念。
       接下来我们又学习了数据模型，数据模型又分为概念模型以及逻辑模型和物理模型两类，现实世界中客观对象的抽象过程就是由现实世界到概念模型再到逻辑模型再到物理模型的转换。数据模型具有数据结构、数据操作和完整性约束条件三个组成要素。
       接下来我们又深入学习了数据模型中的概念模型，学习了信息世界中的基本概念以及它们之间的关系。我们重点学习了概念模型的一种表示方法，E-R方法，该方法可以体现出实体型所具有的属性以及实体型之间的联系。用E-R图表示概念模型时，要注意避免命名冲突、结构冲突。",绪论（第一堂课）学习反思,2022-09-11 16:26:52
2020213342,通过第一节课的学习以及对下节课的预习，感受到了这门课的难度。在本学期要以端正的态度对待课程，以将知识真正掌握。,学习感受,2022-09-11 16:28:59
2020213342,"本节课主要学习了层次模型、网状模型、关系模型三种常见的数据模型。
层次模型具有以下的特点：1、结点的双亲是唯一的，只能直接处理一对多的实体联系。 2、每个记录类型可以定义一个排序字段，也称为码字段，如果定义该排序字段的值是唯一的，则它能唯一的标识一个记录值。3、任何给定的记录值只能按其路径查看，没有一个子女记录值能够脱离双亲记录值而独立存在。
层次模型具有数据结构简单清晰，查询效率较高，提供了良好的完整性支持的优点。但不适合表示多对多联系，对插入和删除操作的限制多，查询子女结点必须通过双亲结点，由于结构严密，层次命令趋于程序化。
网状模型具有如下特点：1、允许一个以上的结点无双亲；2. 一个结点可以有多于一个的双亲。（层次模型是网状模型的特例）
网状数据模型能够更为直接地描述现实世界，存取效率较高。但也有结构比较复杂，结构比较复杂，用户不容易使用的缺点。
关系模型有以下特点：1、建立在严格的数学概念的基础上 2、要求关系必须是规范化的，关系的每一个分量必须是一个不可分的数据项。3、数据操作为集合操作 4、存取路径对用户隐蔽。
关系模型建立在严格的数学概念的基础上，概念单一，具有更高的数据独立性，更好的安全保密性，简化了开发者的工作。但也有查询效率较低，开发数据库管理系统难度较大的特点。




",绪论（第二堂课）学习反思,2022-09-18 22:36:49
2020213342,本节课主要学习了关系数据结构及形式化定义和关系操作两部分的内容。关系模型建立在集合代数的基础上，其数据结构只包含单一的数据结构——关系，其逻辑结构是一张扁平的二维表。接下来我们学习了域、笛卡尔积、关系、元组、属性、候选码、主码的定义，并重点对候选码和主码的概念做了区分，候选码可以作为主码，主码一定是候选码，但候选码不一定是主码。 在学习关系模式和关系数据库的过程中，我们主要做了型和值的区分。关系模式是对关系的描述，关系模式是型，关系是值；关系模型是静态的、稳定的，关系是动态的、变化的。在一个给定的应用领域中，所有关系的集合构成一个关系数据库，关系数据库模式是关系数据库的型，是对关系数据库的描述，关系数据库的值是这些关系模式在某一时刻对应的关系的集合。 在第二部分我们学习了关系操作。常用的关系操作包括查询操作和插入、删除、修改操作两大部分。其中查询表达能力很强，是关系操作中最主要的部分。选择、投影、并、差、笛卡尔基是5种基本操作。关系操作的特点具有集合操作方式，即操作的对象和结果都是集合，又称一次一集合方式。,第二章 关系数据库（第三堂课）学习反思,2022-09-25 12:11:50
2020213342,本节课我们主要学习了关系完整性和关系代数两部分的内容。    关系具有三类完整性约束，分别是实体完整性、参照完整性和用户定义完整性。其中实体完整性和参照完整性是关系模型必须满足的完整性约束条件，称为关系的两个不变性，应该由关系系统自动支持；用户定义的完整性是在应用领域需要遵循的约束条件，体现了具体领域中的语义约束。接下来我们学习了三类完整性约束的规则，这些约束条件都是现实世界得要求，任何关系在任何时刻都要满足这些语义约束。    本节课我们还学习了关系代数中的传统集合运算。传统集合运算是二目运算，包括并、差、交、笛卡尔积。在R和S具有相同的目n（即两个关系都有n个属性），相应的属性取自同一个域的情况下：并运算结果仍为n目关系，由属于R或属于S的元组组成；差运算结果仍为n目关系，由属于R而不属于S的所有元组组成；交运算结果仍为n目关系，由既属于R又属于S的元组组成；笛卡尔积（设R:n目关系，k1个元组；S:m目关系，k2个元组）运算结果：列是（n+m）列元组的集合，元组的前n列是关系R的一个元组，后m列是关系S的一个元组，行是k1×k2个元组。,第二章 关系数据库（第四堂课）学习反思,2022-10-02 09:55:55
2020213342,本节课我们主要学习了关系代数中的专门的关系运算。专门的关系运算包括选择、投影、链接、除。选择又称为限制，选择运算是从关系R中选取使逻辑表达式F为真的元组，是从行的角度进行的运算。投影运算是从R中选择出若干属性列组成新的关系，是从列的角度进行运算，投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）。连接运算是从R和S的广义笛卡尔积R×S中选取（R关系）在A属性组上的值与（S关系）在B属性组上值满足比较关系θ的元组。连接运算包含等值连接和自然连接两种常用连接运算：等值连接即从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组；自然连接是一种特殊的等值连接，在等值连接的基础上具有两个关系中进行比较的分量必须是相同的属性组并在结果中把重复的属性列去掉的限制。一般的连接操作是从行的角度进行运算，自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。此外，我们还接触到了外连接的概念：如果把舍弃的元组也保存在结果关系中，而在其他属性上填空值(Null)，这种连接就叫做外连接。如果只把左边关系R中要舍弃的元组保留就叫做左外连接，如果只把右边关系S中要舍弃的元组保留就叫做右外连接。除运算：设关系R除以关系1S的结果为关系T，则T包含所有在R中但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R 中。除操作是同时从行和列角度进行运算。在实际应用中，我发现大多是几种运算组合运用来满足人们的需求。,第二章 关系数据库（第五堂课）学习反思,2022-10-12 15:22:12
2020213342,本节课我们主要学习了SQL概述和数据定义两节内容。SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言；是一个通用的、功能极强的关系数据库语言。SQL具有的特点有：综合统一；高度非过程化；采用面向集合的操作方式；以同一种语法结构提供多种使用方式；语言简洁，易学易用。SQL支持关系数据库三级模式结构，分别为外模式（视图）、模式（基本表）、内模式（存储文件）。SQL的数据定义功能有模式定义、表定义、视图和索引的定义。1、模式的定义与删除：定义模式：定义模式实际上定义了一个命名空间；在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。删除模式：CASCADE:   删除模式的同时把该模式中所有的数据库对象全部删除；RESTRICT:如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行，当该模式中没有任何下属的对象时才能执行。2、基本表的定义、删除与修改：每一个基本表都属于某一个模式，一个模式包含多个基本表，定义基本表所属模式有在表名中明显地给出模式名、在创建模式语句中同时创建表、设置所属的模式三种方法；若基本表定义被删除，数据被删除，则表上建立的索引、视图、触发器等一般也将被删除。3、索引的建立与删除：建立索引的目的是加快查询速度；在最经常查询的列上建立聚簇索引以提高查询效率，一个基本表上最多只能建立一个聚簇索引，经常更新的列不宜建立聚簇索引；删除索引时，系统会从数据字典中删去有关该索引的描述。,第三章 关系数据库标准语言SQL（第六堂课）学习反思,2022-10-31 17:10:12
2020213342,"本节课我们主要学习了数据查询这节内容。1、单表查询：ORDER BY子句：可以按一个或多个属性列排序（升序：ASC；降序：DESC；缺省值为升序）；当排序列含空值时ASC排序列为空值的元组最后显示，DESC：排序列为空值的元组最先显示。GROUP BY子句分组：细化聚集函数的作用对象。HAVING短语与WHERE子句的区别：作用对象不同（WHERE子句作用于基表或视图，从中选择满足条件的元组，HAVING短语作用于组，从中选择满足条件的组。）。2、连接查询：连接条件中的各连接字段类型必须是可比的，但名字不必是相同的。连接查询包括等值与非等值连接查询、自身连接、外连接、复合条件连接。自身连接指一个表与其自己进行连接，需要给表起别名以示区别，由于所有属性名都是同名属性，因此必须使用别名前缀。外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出。3、嵌套查询：子查询不能使用ORDER BY子句。有些嵌套查询可以用连接运算替代。 EXISTS谓词：带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”。若内层查询结果非空，则外层的WHERE子句返回真值；若内层查询结果为空，则外层的WHERE子句返回假值。NOT EXISTS谓词：若内层查询结果非空，则外层的WHERE子句返回假值；若内层查询结果为空，则外层的WHERE子句返回真值。4、集合查询：参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同。UNION：将多个查询结果合并起来时，系统自动去掉重复元组；UNION ALL：将多个查询结果合并起来时，保留重复元组。
",第三章 关系数据库标准语言SQL（第七堂课）学习反思,2022-10-31 17:31:04
2020213342,本节课我们主要学习了数据更新和视图这两节内容。数据更新包括插入数据、修改数据、删除数据三种操作。插入数据分为两种方式，分别是插入元组和插入子查询结果。插入元组时，INTO子句：属性列的顺序可与表定义中的顺序不一致，没有指定属性列，指定部分属性列；VALUES子句：提供的值必须与INTO子句匹配。插入子查询时，SELECT子句目标列必须与INTO子句在值的个数和值的类型匹配。修改数据指修改指定表中满足WHERE子句条件的元组，其中SET子句指定修改方式、要修改的列和修改后取值；WHERE子句指定要修改的元组，若缺省表示要修改表中的所有元组。共有三种修改数据的方式：1. 修改某一个元组的值 2. 修改多个元组的值 3. 带子查询的修改语句。删除数据指删除指定表中满足WHERE子句条件的元组，WHERE子句指定要删除的元组，若缺省表示要删除表中的全部元组，表的定义仍在字典中。共有三种删除数据的方式：1. 删除某一个元组的值 2. 删除多个元组的值 3. 带子查询的删除语句。接下来我们学习了视图。视图是一个虚表；只存放视图的定义，不存放视图对应的数据；基表中的数据发生变化，从视图中查询出的数据也随之改变。基于视图有查询、删除、受限更新、定义基于该视图的新视图四种操作。建立视图时，RDBMS执行CREATE VIEW语句时只是把视图定义存入数据字典，并不执行其中的SELECT语句；在对视图查询时，按视图的定义从基本表中将数据查出。删除视图时，如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除。RDBMS采用视图消解法实现视图查询，其特点为有效性，转换成等价的对基本表的查询，执行修正后的查询，但也具有局限性。更新视图具有限制性，一些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新。视图的作用：1.能够简化用户的操作 2.使用户能以多种角度看待同一数据 3. 对重构数据库提供了一定程度的逻辑独立性 4. 能够对机密数据提供安全保护 5. 适当的利用视图可以更清晰的表达查询。,第三章 关系数据库标准语言SQL（第八堂课）学习反思,2022-11-03 23:52:35
2020213342,本节课我们学习了数据库安全性这一章的内容。在数据库安全性控制一节中，我们主要了解了TCSEC标准和CC标准的发展历史和级别划分、GRANT语句和REVOKE语句（GRANT语句语义为将对指定操作对象的指定操作权限授予指定的用户，其中WITH GRANT OPTION子句意为可以再授权，但不允许循环授权，授予的权限可以由DBA或其他授权者用REVOKE语句收回）、数据库角色（被命名的一组与数据库操作相关的权限，CREATE  ROLE  <角色名> ，角色的创建可以简化授权过程，GRANT 语句给角色授权。）、自主存取控制（仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记，可能存在数据的“无意泄露”）、强制存取控制（保证更高程度的安全性、适用于对数据有严格而固定密级分类的部门，主体是系统中的活动实体、客体是系统中的被动实体，是受主体操纵的，规则：(1)仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体 (2)仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体）。接下来我们还学习了视图机制，视图机制的主要功能是提供数据独立性，但无法完全满足要求，间接实现了支持存取谓词的用户权限定义。,第四章 数据库安全性（第十堂课）学习反思,2022-11-21 19:30:02
2020213342,首先我们对数据库的完整性和安全性做了区分，数据库的完整性指数据的正确性和相容性，防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据，而数据库的安全性是保护数据库防止恶意的破坏和非法的存取。为维护数据库的完整性，DBMS必须提供定义完整性约束条件的机制，提供完整性检查的方法，违约处理。接下来我们分别学习了实体完整性、参照完整性和用户定义完整性。实体完整性：在CREATE  TABLE中用PRIMARY KEY定义。其中单属性构成的码可以定义为列级约束条件或表级约束条件，而对多个属性构成的码只能定义为表级约束条件。插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。包括：检查主码值是否唯一，如果不唯一则拒绝插入或修改；检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改。参照完整性：在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码，用REFERENCES短语指明这些外码参照哪些表的主码。参照完整性违约处理：拒绝执行•默认策略；级联操作；设置为空值（对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值）。用户定义的完整性：用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求；RDBMS提供，而不必由应用程序承担。1、属性上的约束条件的定义：不允许取空值；列值唯一；用CHECK短语指定列值应该满足的条件。属性上的约束条件检查和违约处理：插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足；如果不满足则操作被拒绝执行。2、元组上的约束条件的定义：在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制；同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。元组上的约束条件检查和违约处理：插入元组或修改属性的值时，RDBMS检查元组上的约束条件是否被满足；如果不满足则操作被拒绝执行。接下来我们又学习了触发器。触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程，其由服务器自动激活，且可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力。定义触发器的语法说明：1. 创建者：表的拥有者 2. 触发器名 3. 表名：触发器的目标表 4. 触发事件：INSERT、DELETE、UPDATE 5. 触发器类型【行级触发器（FOR EACH ROW）、语句级触发器（FOR EACH STATEMENT）】。激活触发器：触发器的执行，是由触发事件激活的，并由数据库服务器自动执行；一个数据表上可能定义了多个触发器，执行顺序为：执行该表上的BEFORE触发器、激活触发器的SQL语句、执行该表上的AFTER触发器。删除触发器：DROP TRIGGER <触发器名> ON <表名>；触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除。,第五章 数据库完整性（第十一堂课）学习反思,2022-11-27 17:00:24
2020213342,本节课我们主要学习了问题的提出和规范化中的函数依赖两部分。关系数据库逻辑设计即针对具体问题，构造一个适合于它的数据模式，而关系数据库的规范化理论就是数据库逻辑设计的工具。首先我们进行了一些定义的回顾，关系模式由关系名、属性名集合、属性所来自的域、映像集合、数据的依赖关系集合组成，数据依赖是完整性约束的表现形式，定义属性值间的相互关连（主要体现于值的相等与否）就是数据依赖，它是数据库模式设计的关键。数据依赖有函数依赖和多值依赖等类型。规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。函数依赖包括平凡函数依赖与非平凡函数依赖、完全函数依赖与部分函数依赖、传递函数依赖，我们将这几种依赖进行了区分。,第六章 关系数据理论（第十二堂课）学习反思,2022-12-02 23:12:27
2020213342,本节课我们主要学习了规范化中的剩余部分。首先我们对码相关的概念进行了复习。接下来我们学习了范式，范式是符合某一种级别的关系模式的集合，关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化。1NF：如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。第一范式是对关系模式的最起码的要求，但是满足第一范式的关系模式并不一定是一个好的关系模式。2NF:若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF。3NF:若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。BCNF:若R∈BCNF 1、所有非主属性对每一个码都是完全函数依赖2、所有的主属性对每一个不包含它的码，也是完全函数依赖3、没有任何属性完全函数依赖于非码的任何一组属性。接下来我们学习了多值依赖，多值依赖具有对称性、传递性，函数依赖是多值依赖的特殊情况。4NF：关系模式R<U，F>∈1NF，如果对于R的每个非平凡多值依赖X→→Y（Y ÍX），X都含有码，则R∈4NF。规范化的实质是概念的单一化，同时应注意，并不是规范化程度越高模式就越好。,第六章 关系数据理论（第十三堂课）学习反思,2022-12-17 20:19:42
2020213342,本节课我们学习了数据库设计。数据库设计是指对于一个给定的应用环境，构造（设计）优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。接下来我们重点学习了概念结构设计。概念结构是各种数据模型的共同基础，它比数据模型更独立于机器、更抽象，从而更加稳定，将需求分析得到的用户需求抽象为信息结构(即概念模型)的过程就是概念结构设计。E-R模型是描述概念模型的工具。设计概念结构有自顶向下、自底向上、逐步扩张和混合策略四类方法。数据抽象分为三大类：1、分类：抽象了对象值和型之间的“is member of”的语义。2、聚集：抽象了对象内部类型和成分之间“is part of”的语义。3、抽象了类型之间的“is subset of”的语义。设计分E-R图有两条准则：1、属性不能再具有需要描述的性质。即属性必须是不可分的数据项，不能再由另一些属性组成。2、属性不能与其他实体具有联系。联系只发生在实体之间。各个分E-R图之间必定会存在许多不一致的地方，注意合理消除各分E-R图的冲突（属性冲突、命名冲突、结构冲突）。,第七章 数据库设计（第十四堂课）学习反思,2022-12-18 17:43:39
2020213343,通过第一次上课，我学到了数据、数据库、数剧库管理系统、数据库系统相互的定义、用途等内容以及它们之间的联系。例如数据是数据库中存储的基本对象，分类有音频、视频等种类，并且数据与其语义是不可分割的，数据的语义是对数据含义的说明。数据库系统是由数据库、数据库管理系统、应用系统和数据库管理员构成的，是在计算机系统中引入数据库后的系统构成。数据库系统的流程图很清晰的表明了他们之间的联系。以及两大数据模型分别为概念模型和逻辑模型/物理模型，数据模型的三个组成要素分别为数据结构、数据操作、和完整性约束条件，在概念模型中，我们学习了根据题意所给出的条件如何绘制E-R图，E-R图也是我在这节课中印象最深的知识点。,绪论第一节课（数据库系统概论和数据模型）,2022-09-12 11:26:41
2020213343,"第二次上课，我学到了数据模型的组成要素——数据结构、数据操作以及数据的完整性约束条件和常用的数据模型（层次模型、网状模型、关系模型、面向对象数据模型、对象关系化数据模型和半结构化数据模型）中层次模型、网状模型以及关系模型的优缺点，比如：层次模型用树形结构表示各类实体及实体之间的联系：有且只有一个结点没有双亲结点，这个结点称为根结点，根以外的其它结点有且只有一个双亲结点
 层次模型的优点：1.数据结构简单清晰   
2.数据的查询效率高  
 3.层次数据模型提供了良好的完整性支持。
 网状模型：1.允许一个以上的结点无双亲   
2.一个结点可以有多个双亲。
 网状模型的优点：1.更为直观地描述现实世界   2.良好的性能，存取效率高。
 关系模型：关系模型由一组关系组成，每个关系的数据结构是一张规范化的二维表。
关系模型术语：关系、元组、属性、码、域、分量、关系模式。
关系模型的完整性约束条件：实体完整性，参照完整性，用户自定义完整性。
",绪论第二节课（数据模型）,2022-09-19 13:13:04
2020213343,"本节课讲述了关系数据库中的关系数据结构及形式化定义和关系操作（查询、插入、删除、修改）。关系数据结构及形式化定义：关系模型的数据结构非常简单，只包含单一的数据结构——关系，现实世界的实体以及实体间的各种联系均用关系来表示。以及笛卡尔积、码、主码、候选码、全码等相关定义。关系是关系模式在某移时刻的状态或内容，是动态的、随时间不断变化的。
",第二章第一节课（关系数据库）,2022-09-26 13:02:44
2020213343,"本节课学习了关系模型的完整性约束，分别为：实体完整性、参照完整性和用户定义的完整性，其中前两项为关系模型必须满足的完整性约束条件，被称作是关系的两个不变性。其中实体完整性规则，若属性A是基本关系R的主属性，则A不能取空值。（所谓空值就是指“不知道”或“不存在”或“无意义”的值）。用户定义的完整性就是针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求。
以及关系代数，关系代数的运算按运算符的不同可分为传统的集合运算和专门的关系运算两类。传统的集合运算是二目运算，包括并、差、交、笛卡儿积四种运算。专门的关系运算包括选择、投影、连接和除运算等。
",第二章第二节课,2022-09-29 00:08:53
2020213343,"本节课中，更深度的学习了关系代数的使用以及他们的逻辑表达式的运用。主要内容为会看懂关系代数表达式、并会根据题意和要求写出关系代数表达式（在关系代数中，这些运算经有限次复合后形成的表达式称为关系代数表达式）。特别注意，投影中，投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组，避免重复行的出现。连接运算中，分有两种运算，分别为等值连接和自然连接。并在自然连接中，可能会产生一些悬浮元组（被舍弃的元组），如果把悬浮元组保存在结果关系中，而在其他属性上填空值，那么这种叫外连接，如果只保留左边则叫左外连接，同理还存在右外连接。
本章介绍了8种关系代数运算，其中并、差、笛卡尔积、选择和投影这5种运算为基本的运算。其他三种运算，即交、连接和除，均可以用这5种基本运算来表达。引进它们并不增加语言的能力，但可以简化表达。
",第二章第三节课,2022-11-04 11:38:33
2020213343,"第三章讲述的是关系数据库标准语言SQL语言，首先学习了SQL语言的基本概念以及它的产生和发展以及SQL语言的特点（综合统一、高度非过程化、面向集合的操作方式、以同一种语法结构提供多种使用方式以及语言简洁，易学易用等五个特点）。
其次是SQL的数据定义功能，包括模式定义、表定义、视图和索引的定义。尤其是在删除模式中的DROP SCHEMA<模式名><CASCADE|RESTRICT>中的CASCADE和RESTRICT两者的不同，CASCADE：删除模式的同时把该模式中所有的数据库对象全部删除。而RESTRICT：如果该模式中定义了下属的数据库对象（如表、视图等）则拒绝该删除语句的执行；当该模式中没有任何下属的对象时才能执行。随后，SQL中的域的概念用数据类型来实现，定义表的属性时，需要指明其数据类型及长度。选用哪种数据类型，要根据取值范围以及要做哪些运算来选择。
",第三章第一节课（网课）,2022-11-04 11:51:17
2020213343,SQL语言中的数据查询，包含单表查询、连接查询、嵌套查询、集合查询和Select语句的一般形式。单表查询，查询仅涉及一个表，选择表中的若干列，选择表中的若干元组、ORDER BY子句（可以按一个或多个属性列排序升序：ASC；降序：DESC；缺省值为升序当排序列含空值时ASC：排序列为空值的元组最后显示DESC：排序列为空值的元组最先显示）、聚集函数、GROUP BY子句（GROUPBY子句分组：细化聚集函数的作用对象未对查询结果分组，聚集函数将作用于整个查询结果对查询结果分组后，聚集函数将分别作用于每个组作用对象是查询的中间结果表按指定的一列或多列值分组，值相等的为一组）。HAVING短语与WHERE子句的区别：作用对象不同WHERE子句作用于基表或视图，从中选择满足条件的元组。HAVING短语作用于组，从中选择满足条件的组。,第三章第二节课,2022-11-04 11:56:21
2020213343,"连接查询：同时涉及多个表的查询。连接条件中的各连接字段类型必须是可比的，但名字不必是相同的。连接查询包含等值与非等值连接查询、自身连接、外连接和复合条件连接。等值连接的连接运算符为=。
自身连接：一个表与其自己进行连接，需要给表起别名以示区别，由于所有属性名都是同名属性，因此必须使用别名前缀。
外连接与普通连接的区别：1、普通连接操作只输出满足连接条件的元组2、外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出。分为左外连接和右外连接。
复合条件连接：WHERE子句中含有多个连接条件。
嵌套查询概述一个SELECT-FROM-WHERE语句称为一个查询块将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。子查询的限制：1、不能使用ORDER BY子句2、层层嵌套方式反映了SQL语言的结构化3、有些嵌套查询可以用连接运算替代。不相关子查询：子查询的查询条件不依赖于父查询由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。
嵌套查询分为1、带有IN谓词的子查询2、带有比较运算符的子查询3、带有ANY（SOME）或ALL谓词的子查询4、带有EXISTS谓词的子查询
",第三章第三节课,2022-11-04 12:11:07
2020213343,"数据更新，包括插入数据、修改数据和删除数据，插入数据的两种方式：1、插入元组2、插入子查询结果（可以一次插入多个元组）。NTO子句：属性列的顺序可与表定义中的顺序不一致，没有指定属性列，指定部分属性列  VALUES子句：提供的值必须与INTO子句匹配（值的个数、值的类型）
修改数据：SET子句1、指定修改方式2、要修改的列3、修改后取值
WHERE子句1、指定要修改的元组2、缺省表示要修改表中的所有元组
三种修改方式：修改某一元组的值、修改多个元组的值、带子查询的修改语句。RDBMS在执行修改语句时会检查修改操作是否破坏表上已定义的完整性规则(实体完整性、主码不允许修改、用户定义的完整性（NOT NULL约束、UNIQUE约束、值域约束）)
删除修改：WHERE子句：指定要删除的元组，缺省表示要删除表中的全部元组，表的定义仍在字典中。三种删除方式1. 删除某一个元组的值2. 删除多个元组的值3. 带子查询的删除语句。
视图的相关概念以及基于视图的操作（查询、删除、受限更新以及定义基于该视图的新视图）
",第三章第四节课,2022-11-04 12:20:31
2020213343,"一、数据库的不安全因素
① 非授权用户对数据库的恶意存取和破坏
② 数据库中重要或敏感的数据被泄露
③ 安全环境的脆弱性
二、 安全标准简介
CC（Common Criteria）：2008年，CC V3.1 ISO/IEC15408-2008
CC评估等级分为EAL1、EAL2、EAL3、EAL4、EAL5、EAL6和EAL7共七个等级，等级越高，表示通过认证需要满足的安全保证要求越多，系统的安全特性越可靠。
国际标准化组织（International Organization for Standardization，ISO）
数据库系统的安全性在技术上依赖于两种方式：
1）DBMS本身提供的用户身份识别、视图、权限控制和审计等管理措施
2）由应用程序实现对数据库的访问控制和管理

1）、用户身份鉴别
系统提供的最外层安全保护措施。
2）、存取控制
存取控制机制组成：
定义用户权限 DBMS提供适当的语言来定义用户权限，存放在数据字典中，称做安全规则或授权规则，合法权限检查用户发出存取数据库操作请求，DBMS查找数据字典，进行合法权限检查，关系数据库系统中存取控制对象
3）、授权与回收
权限授予：GRANT
权限回收：REVOKE
创建数据库模式的权限，GRANT 和 REVOKE 语句向用户授予或收回对数据的操作权限。对创建数据库模式一类的数据库对象的授权则由数据库管理员在创建用户时实现。
4）、数据库角色
数据库角色：被命名的一组与数据库操作相关的权限，角色是权限的集合。因此可以为一组具有相同权限的用户创建一个角色来简化授权的过程。
在 SQL 中首先用 CREATE ROLE 语句创建角色，然后用 GRANT 语句给角色授权，用REVOKE 语句收回授予角色的权限。
5）、强制存取控制方法
自主存取控制缺点： 可能存在数据的“无意泄露”
原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记
（自主存取控制能够通过授权机制有效地控制其他用户对敏感数据的存取。但是由于用户对数据的存取权限是“自主”的，用户可以自由地决定将数据的存取权限授予何人、决定是否也将“授权”的权限授予别人。在这种授权机制下，仍可能存在数据的“无意泄露”）
解决：对系统控制下的所有主客体实施强制存取控制策略
强制存取控制（MAC）：
· 保证更高程度的安全性
· 用户不能直接感知或进行控制
· 适用于对数据有严格而固定密级分类的部门：军事部门、政府部门
6）、视图机制
通过视图机制把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护。

7）、审计
审计日志（Audit Log）： 将用户对数据库的所有操作记录在上面（就像记录流水账一样的）
审计员利用审计日志：监控数据库中的各种行为，找出非法存取数据的人、时间和内容。
8）、数据加密
数据加密： 防止数据库中数据在存储和传输中失密的有效手段
加密的基本思想： 根据一定的算法将原始数据—明文（Plain text）变换为不可直接识别的格式—密文（Cipher text）
加密方法： ①存储加密 ②传输加密
",第四章（第十次）,2022-12-26 23:49:32
2020213343,"一、数据库完整性
数据库的完整性是指数据库中数据的正确性和相容性。数据库完整性包括实体完整性、参照完整性和用户定义的完整性三种。
数据库完整性由各种完整性约束来保证。而完整性约束既可以通过DBMS来保障，也可以通过应用程序来实现。为维护数据库的完整性，DBMS必须：1.提供定义完整性约束条件的机制2.提供完整性检查的方法3.违约处理
二、实体完整性
1、关系模型的实体完整性
CREATE TABLE中用PRIMARY KEY定义
单属性构成的码有两种说明方法，定义为列级约束条件或定义为表级约束条件
但对多个属性构成的码只有一种说明方法，只能定义为表级约束条件
2、实体完整性检查和违约处理
插入或对主码列进行更新操作时，关系数据库管理系统按照实体完整性规则自动进行检查。包括：1、检查主码值是否唯一，如果不唯一则拒绝插入或修改2、检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改3、检查记录中主码值是否唯一的一种方法是进行全表扫描，依次判断表中每一条记录的主码值与将插入记录上的主码值（或者修改的新主码值）是否相同
三、参照完整性
参照完整性检查和违约处理
一个参照完整性将两个表中的相应元组联系起来
对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查
参照完整性违约处理有三种：（1） 拒绝（NO ACTION）执行（2） 级联（CASCADE）操作（3）设置为空值（SET-NULL）



",第五章（第十一次）,2022-12-27 00:01:11
2020213343,"一、	用户定义完整性
1、	用户定义的完整性是：针对某一具体应用的数据必须满足的语义要求
2、	属性上的约束条件：CREATE TABLE时定义属性上的约束条件：列值非空（NOT NULL）列值唯一（UNIQUE）检查列值是否满足一个条件表达式（CHECK）
二、	触发器
1、	定义触发器
DEFINER：定义可以激活触发器的用户
trigger_time：值只有两个，即before和after，表示触发器执行的时间在事件发生前或发生后
trigger_event：值只有三个，即insert，update和delete，表示触发触发器的事件
ON Table_name：触发器是关联在那个表上的
FOR EACH ROW：表示触发器执行的间隔，这里表示每个修改的记录都会触发触发器
trigger_body：代表触发器所要触发的动作
2、激活触发器
触发器的执行，是由触发事件激活的，并由数据库服务器自动执行，一个数据表上可能定义了多个触发器。同一个表上的多个触发器激活时遵循如下的执行顺序：（1）执行该表上的BEFORE触发器；（2）激活触发器的SQL语句；（3）执行该表上的AFTER触发器。
3、删除触发器
     在MySQL软件中，可以通过DROP TRIGGER语句或通过工具来删除触发器。
",第五章（第十二次）,2022-12-27 00:11:17
2020213343,"6.1问题的提出
1）、关系数据库逻辑设计
（1）针对具体问题，如何构造一个适合于它的数据模式
（2）数据库逻辑设计的工具——关系数据库的规范化理论
2）、关系模式由五部分组成，是一个五元组：R(U,D,DOM,F),即R、U 、D 、DOM 、F 
3）、 数据依赖
（1）定义：是一个关系内部属性与属性之间的一种约束关系（通过属性间值的相等与否体现出来的数据间相互联系）
（2）数据依赖的主要类型有三种：函数依赖，多值依赖，函数依赖普遍存在与现实中
4）、关系模式中存在的问题有：数据冗余、异常更新、插入异常、删除异常。
6.2 规范化
规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
1、函数依赖
函数依赖与属性间的联系类型有关，它们之间的关系有：一对一联系、多对一联系、多对多联系
2、范式
范式的种类：第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、BC范式(BCNF)、第四范式(4NF)、第五范式(5NF)
一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化。
",第六章,2022-12-27 00:25:23
2020213343,"1.数据库设计定义
数据库设计是指对于一个给定的应用环境，构造（设计）优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。
2.数据库设计步骤
需求分析（收集需求和理解需求）-->概念结构设计（建立概念模型 E-R图）-->逻辑结构设计（建立逻辑模式 “关系模式”）-->物理结构设计（建立物理模型）-->数据库实施-->数据库运行和维护阶段
3.E-R模型
E-R图来描述现实世界的概念模型；E-R图提供了实体型、属性和联系的方法；实体型用矩形来表示；属性用椭圆来表示；联系用菱形来表示。
",第七章,2022-12-27 00:29:39
2020213344,这节课学习了域、笛卡尔积、关系、候选码、主码等定义，对关系模型，关系数据库的理解更深入了。其中比较主要的是关于候选码、主码、全码的区别和理解，老师提到候选码涉及到的属性都是主属性。码是能唯一标识实体的属性，超码是一个或多个属性的集合，这些属性可以让我们在一个实体集中唯一地标识一个实体。关系模型中有三类完整性约束：实体完整性、参照完整性和用户的完整性。关系数据库的型也称为关系数据库模式，是对关系数据库的描述，关系数据库的值是这些关系模式在某一时刻对应的关系的集合，通常就称为关系数据库。关系数据库是重点，因为关系数据系统是目前使用最广泛的数据库系统，写练习题发现对概念理解还是不到位，不会灵活理解运用，还需要多练习。,2.1,2022-09-21 11:06:41
2020213344,第一次的课学习了数据、数据库、数据库管理系统等基本概念，首次了解数据库感觉概念比较多，需要理解记忆，然后学习了E-R图，还需要以后的练习才能更好掌握。,第一章 ,2022-09-21 11:09:36
2020213344,"这节课学习了层级模型的结构特点数据操纵、完整性约束条件、层级模型的多种储存结构、优缺点。还学习了网状模型和关系模型，这些数据模型都有自己的特点和优缺点，如网状模型的约束条件比层级模型宽松,允许结点没有双亲结点或者有多个双亲结点，节点间也可以有多种联系。具体要使用哪种数据模型, 还是需要具体看要描述什么内容，再针对性选取数据模型来使用。课后的练习让我对知识掌握的更好，同时也发现了自己的不足，需要继续努力。",数据模型,2022-09-21 11:14:03
2020213344,"关系模型中常用的关系操作包括查询操作和插入、删除、修改操作两大部分，选择、投影、并、差、笛卡尔积是5种基本操作。关系模型中有三类完整性约束：实体完整性、参照完整性和用户定义的完整性。
这节课着重学习了关系模型中常用的关系操作和三类完整性约束，这两部分对于关系模型来说至关重要。",第二章,2022-10-29 16:30:36
2020213344,"关系代数是一种抽象的查询语言，它用对关系的运算来表达查询。传统的集合运算是二目运算，包括并、差、交、笛卡尔积4种运算。；专门的关系运算包括选择、投影、连接、除运算等。
课本上给各种运算举了例子，其中最重要的部分是连接运算，不同连接运算最后得到的结果也不同。其中还提到悬浮元组，其中如果把悬浮元组保存在结果关系中，在其他属性上填NULL就是外连接，只保留左边关系R中的悬浮元组叫左外连接，只保留右边关系S中的悬浮元组叫右外连接。练习题很好的帮助巩固了课上学习的内容。",2.4,2022-10-29 16:52:46
2020213344,"SQL集数据查询、数据操纵、数据定义、数据控制功能于一体，主要特点为：综合统一、高度非过程化、面向集合的操作方式、以同一种语法结构提供多种使用方式、语言简洁，易学易用。
这节课主要学习SQL的功能、特点，为后续进一步学习做铺垫。",3.1SQL概述,2022-10-29 16:56:52
2020213344,"SQL的数据定义功能包括模式定义、表定义、视图和索引的定义。一个关系数据库管理系统的实例中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库图像。这部分内容学习了一些代码运行关键词，比如删除CASCADE和RESTRICT两者必选一个，选择了CASCADE，表示在删除模式的同时把该模式中的所有数据库对象全部删除；选择RESTRICT,表示如果该模式已定义了下属的数据库对象，则拒绝该删除语句的实行。
从课本上建表的例子可以看出，SQL的语言很简洁，容易理解。",3.2-3.4,2022-10-29 17:28:38
2020213344,数据查询的语言难度比较低，主要是要记住各种查询的表达，数据查询包括单表查询、连接查询、嵌套查询、集合查询、基于派生表的查询，在这些查询里还有细分，在写题时我发现自己对于嵌套查询掌握不好，不能很好的辨别要用什么类型的查询，还需要多加练习。,数据定义、数据查询,2022-11-11 15:55:24
2020213344,"SQL的插入语句INSERT有两种形式，一种是插入一个元组，另一种是插入子查询结果；修改数据语句是UPDATE，删除语句是DELETE。在使用这些语句时都有些条件要求，所以要注意是否能使用或者怎么构建条件。
              视图是一个虚表，是一个可以查询到表里数据的窗口，视图操作包括定义、查询、更新。
             第一次实验主要是建表，实验时要注意不能随意建表，被引用的表要先创建。",数据更新  视图  实验1,2022-11-11 16:17:00
2020213344,课上写了有关查询的练习题，我最主要的问题是对于GROUP BY 和嵌套语句使用不熟练，主要是理解不到位，练习过后理解加深了许多。-------------------------------------实验2是在实验1的基础上执行查询，难度较低，在程序里写出并运行出来的感觉和写练习题还是很不同的。,练习  实验2,2022-11-11 16:20:37
2020213344,"这次实验主要是实验查询，有比较多的嵌套查询，嵌套查询使用关键字IN，判断数据是否属于查询结果集合；EXISTS/NOT EXISTS判断数据元组是否满足某查询结果；FROM子句嵌套，直接将查询结果作为一个表处理。
在实验时写嵌套查询遇到的困难较多，容易漏掉数据，没有理清思路的话很容易出错。",数据查询 实验3,2022-12-19 15:31:17
2020213344,"在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类：主体是系统中的活动实体，如：DBMS所管理的实际用户，代表用户的各进程。客体是系统中的被动实体，受主体操纵，如：文件、基表、索引、视图。---------------------------------------------------------------------------------------------------这次实验主要内容是数据更新，包括了数据插入，数据更新及数据删除,写数据插入时出现了插入语句与外键冲突的问题，发现是给外键表中插入了一个主键表没有的值，去掉主外键关系后就行。删除数据记录使用关键字DELETE（删除数据库或表用关键字DROP），WHERE后面写删除数据需要满足的条件。",数据库安全性  实验4,2022-12-19 15:35:00
2020213344,"数据库完整性是指数据的正确性和相容性。完整性是为了防止数据库中存在不符合语义的数据，即防止数据库中存在不正确的数据。包括实体完整性、参照完整性、用户自定义完整性。关系模型的实体完整性在CREATE TABLE中用PRIMARY KEY定义。一种是定义为列级约束条件，另一种是定义为表级约束条件。--------------------------------------------------------------------------------------------------------------------------------------这次实验主要内容是创建视图与修改视图，创建视图时可以指定列名也可以省略列名，使用WITH CHECK OPTION需要视图中有WHERE子句，否则该语句是多余的。
实验中主要问题在使用WITH CHECK OPTION时，一直出现语句有错误的问题，修改了之后新建查询就能运行了。",数据库完整性  实验5,2022-12-19 15:37:32
2020213344,"触发器是用户定义在关系表上的一类由事件驱动的特殊过程，其不仅可以用于数据库完整性检查，也可以用来实现数据库的其他功能，包括数据库安全性，以及一些业务流程和控制流程。1.只有创建表的用户才可以在表上创建触发器，并且一个表上只能创建一定数量的触发器
2.触发器名唯一
3.触发器只能定义在基本表上，不能定义在视图上
4.触发事件可以是INSERT DELETE 或 UPDATE，也可以是这几个事件的组合，如INSERT OR DELETE等，还可以是UPDATE OF <触发列, …>指明修改哪些列时激活触发器。
5.AFTER / BEFORE 是触发的时机，AFTER表示在触发事件的操作执行之后激活触发器。
6.触发器类型：FOR EACH ROW（行级触发器）和FOR EACH STATEMENT（语句触发器），假设表TEACHAR 有1000行，行级触发器将执行1000次，而语句触发器只执行1次
7.触发条件：触发器被激活时，只有当触发条件为真时触发动作体才执行；否则触发动作体不执行。如果省略WHEN触发条件，则触发动作体在触发器激活后立即执行。
8.触发动作体：在过程体中可以使用NEW和OLD来引用UPDATE/INSERT事件之后的新值和之前的旧值，如果是语句级触发器则不能使用NEW或OLD引用。----------------------------------------------------------------------------------------------------------------------------创建唯一索引:CREATE UNIQUE INDEX 索引名 ON 表名(列名1,列名2……)直接创建.
对于定义不同用户对于数据的操作权限，创建用户后将对应的权限赋予用户，比如实验中SELECT,INSERT。",触发器  实验6,2022-12-19 15:40:01
2020213344,"数据依赖：数据依赖是一个关系内部属性与属性之间的一种约束关系。有多种类型的数据依赖，其中最重要的是函数依赖和多值依赖。如果一关系模式r(R)的每个属性对应的域值都是不可分的(即原子的)，则称r(R)属于第一范式，记为r(R)Î1NF。若关系模式R∈1NF，并且每一个非主属性都完全函数依赖于任何一个候选码，则R∈2NF。若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。----------------------------------------------------------------------------------------------------这次实验主要是学习BEFORE、AFTER触发器的使用，触发器可以实现表数据的级联更改，在一定程度上保证了数据的完整性。触发器还有助于强制引用完整性，以便在添加、更新或删除表中的行时保留表之间已定义的关系。
    在实验中遇到的问题主要是会出现AFTER附近出现问题，怎么也修改不对，应该是格式有问题。",关系数据库  实验7,2022-12-19 15:41:59
2020213344,数据流图表达了数据和处理的关系，数据字典是系统中各类数据描述的集合。数据字典通常包括数据项、数据结构、数据流、数据存储、处理过程5个部分。一个m：n联系转换为一个关系模式。与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。------------------------------------------------------------------------------本次实验完成了用户自定义的完整性约束条件，其中有NULL/NOT NULL约束，UNIQUE约束，DEFAULT约束。CHECK子句可以检查属性列是否符合条件。有了用户完整性，数据才会更加严谨，使用起来也会更加方便。,数据库设计  实验8,2022-12-19 15:44:00
2020213344,"E-R图是数据库学习的重点，是描述现实世界关系概念模型的有效方法。用“矩形框”表示实体型，矩形框内写明实体名称；用“椭圆图框”或圆角矩形表示实体的属性，并用“实心线段”将其与相应关系的“实体”连接起来；用”菱形框“表示实体型之间的联系成因，在菱形框内写明联系名，并用”实心线段“分别与有关实体型连接起来，同时在”实心线段“旁标上联系的类型（1:1,1:n或m:n）。

",ER图,2022-12-19 15:47:36
2020213345,本节课学习了第一章绪论。一共有五个小节的内容，第一节是数据库系统概述，主要讲了数据，数据库，数据库管理系统和数据库系统的概念。第二节是数据模型，数据模型分为两大类，分别是概念模型，逻辑模型和物理模型。数据模型的组成要素是数据结构，数据操作和完整性约束条件。第三节讲了概念模型，概念模型的用途，基本要求，以及常见的实体，属性，码，域，实体型，实体集的概念。两个实体型间的联系有一对一联系，一对多联系和多对多联系。还有概念模型的表示方法E-R图。第四节讲了最常用的数据模型，其中有非关系模型（包括层次模型和网状模型），关系模型，面向对象模型，对象关系模型。,第一章 绪论,2022-09-11 22:43:55
2020213345,"本节课学习了最常用的几个数据模型。第一是层次模型，层次模型是数据库系统中最早出现的数据模型。层次数据库系统的典型代表是IBM公司的IMS数据库管理系统。层次模型用树形结构来表示各类实体间的联系。满足下边两个条件的基本层次联系的集合为层次模型。一，有且只有一个结点没有双亲结点，这个结点称为根结点。二，根以外的其他结点有且只有一个双亲结点。层次模型的特点有，一，结点的双亲是唯一的。二，只能直接处理一对多的实体联系。三，每个记录类型可以定义一个排序字段，也称为码字段。四，任何记录值只有按其路径查看时，才能显示出它的全部意义。五，没有一个子女记录值能够脱离双亲值而独立存在。层次模型的优点有，一。层次模型的数据结构比较简单清晰。二，查询效率高，性能优于关系模型，不低于网状模型。三，层次数据模型提供了良好的完整性支持。缺点是一，多对多联系表示不自然，二，对插入和删除操作的限制多，应用程序的编写比较复杂。三，查询子女结点必须通过双亲结点。四，由于结构严密，层次命令趋于程序化。第二个是网状模型，满足下边两个条件的基本层次联系的集合是网状模型。一，允许一个以上的结点无双亲。二，一个结点可以有多于一个的双亲。网状模型与层次模型的区别，网状模型允许多个结点没有双亲结点，网状模型允许结点有多个双亲结点，网状模型允许两个结点之间有多种联系（复合联系），网状模型可以更直接地去描述现实世界，层次模型实际上是网状模型的一个特例。网状模型的优点有，一，能够更为直接的描述现实世界，如一个结点可以有多个双亲。二，具有良好的性能，存取效率较高。缺点有，一，结构比较复杂，而且随着应用环境的扩大，数据库的结构就会变得越来越复杂，不利于最终用户掌握。二，DDL,DML语言复杂，用户不容易使用。第三个是关系模型，关系模型的优点是，一，建立在严格的数学概念的基础上，二，概念单一（实体和各联系都用关系来表示，对数据的检索结果也是关系），三，关系模型的存取路径对用户透明（具有更好的数据独立性，更好的安全保密性。简化了程序员的工作和数据库开发建立的工作）缺点是一，存取路径对用户透明导致查询效率往往不如非关系数据模型。二，为提高性能，必须对用户的查询请求进行优化，增加了开发DBMS的难度。",第一章 绪论（续）,2022-09-19 13:35:51
2020213345,"本节课开始了第二章的学习。第一节为关系数据结构及形式化定义。关系：单一的数据结构是关系，现实世界的实体以及实体间的各种联系均用关系来表示。二维表：从用户角度，关系模型中数据的逻辑结构是一张二维表。关系是建立在集合代数的基础上。域：一组具有相同数据类型的值的集合。笛卡尔积：给定一组域D1，D2，...，Dn，这些域中可以有相同的。D1，D2，...，Dn的笛卡尔积为：D1×D2×...×Dn＝｛（d1，d2，...，dn）｜di∈Di，i＝1，2，...，n｝。笛卡尔积是所有域的所有取值的一个组合，且笛卡尔积不能重复。元组：笛卡尔积中每一个元素（d1，d2，...，dn）叫作一个n元组（n-tuple）或简称元组(Tuple)。分量：笛卡尔积元素（d1，d2，...，dn）中的每一个值di叫作一个分量。笛卡尔积的表示方法：一，笛卡尔积可表示为一个二维表。二，表中的每行对应一个元组，表中的每列对应一个域。关系：D1×D2×...×Dn的子集叫作在域D1，D2，...，Dn上的关系，表示为R（D1，D2，...，Dn），其中R为关系名，n为关系的目或度（Degree）。元组关系中的每个元素是关系中的元组，通常用t表示。单元关系与二元关系：当n=1时，称该关系为单元关系（Unaryrelation）或一元关系当n=2时，称该关系为二元关系（Binaryrelation）。关系的表示：关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域。属性：由于关系中不同列可以对应相同的域，为了加以区分，必须对每列起一个名字，称为属性（Attribute），n目关系必有n个属性。码：候选码（Candidatekey）：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码。简单的情况：候选码只包含一个属性。全码（All-key）：最极端的情况：关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）。主码：若一个关系有多个候选码，则选定其中一个为主码（Primarykey）。主属性：候选码的诸属性称为主属性（Primeattribute），不包含在任何侯选码中的属性称为非主属性（Non-Primeattribute）或非码属性（Non-keyattribute）。基本关系的性质：①列是同质的（Homogeneous）(同类型、同域)。②不同的列可出自同一个域，其中的每一列称为一个属性，不同的属性要给予不同的属性名。③列的顺序无所谓，列的次序可以任意交换。④任意两个元组的候选码不能相同。⑤行的顺序无所谓，行的次序可以任意交换。⑥分量必须取原子值这是规范条件中最基本的一条。关系模式：关系模式是对关系的描述。关系模式是型，关系是值。关系模式通常可以简记为R (U) 或R (A1，A2，...，An)其中，R为关系名，A1，A2，...，An 为属性名。关系模式与关系的区别：关系模式是对关系的描述，是静态的、稳定的。关系是关系模式在某一时刻的状态或内容，是动态的、随时间不断变化的。关系模式和关系往往统称为关系，通过上下文加以区别。关系数据库：在一个给定的应用领域中，所有关系的集合构成一个关系数据库。关系数据库的型与值：关系数据库的型:关系数据库模式对关系数据库的描述。关系数据库的值:关系模式在某一时刻对应的关系的集合，简称为关系数据库。常用的关系操作：一，查询：选择、投影、连接、除、并、交、差。二，数据更新：插入、删除、修改。选择、投影、并、差、笛卡尔基是5种基本操作。关系操作的特点：集合操作方式：操作的对象和结果都是集合，一次一集合的方式。


",第二章 关系数据库,2022-09-24 12:55:57
2020213345,"本周继续学习了第二章 关系数据库。第三节是关系的完整性。关系的三类完整性约束是实体完整性，参照完整性和用户定义的完整性。其中，实体完整性和参照完整性:关系模型必须满足的完整性约束条件，称为关系的两个不变性，应由关系系统自动支持。用户定义的完整性:应用领域需要遵循的约束条件，体现了具体领域中的语义约束。实体完整性规则:若属性A是基本关系R的主属性，则属性A不能取空值。实体完整性规则的说明:一，实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。二，现实世界中的实体是可区分的，即他们具有某种唯一性标识。三，关系模型中以主码作为唯一性标识。四，主码中的属性即主属性不能取空值。主属性取空值就说明存在某个不可标识的物体，即存在不可区分的实体，这与第二点相矛盾，因此这个规则称为实体完整性。关系间的引用:在关系模型中实体及实体间的联系都是用关系来描述的，因此可能存在着关系与关系间的引用。外码:设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是基本关系R的外码。R称为参照关系，S称为被参照关系或目标关系。参照完整性规则:若属性或属性组F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同关系），则对于R中每个元组在F上的值必须为:或者取空值（F的每个属性值均为空值），或者等于S中某个元组的主码值。用户定义的完整性:针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理他们，而不要由应用程序承担这一功能。关系代数:分为传统的集合运算和专门的关系运算。传统的集合运算:一，并。R和S具有相同的目n，即两个关系都有n个属性。R和S相应的属性取自同一个域。R并S仍为n目关系，由属于R或属于S的元组构成。二，差。R和S具有相同的目n，即两个关系都有n个属性。R和S相应的属性取自同一个域。R差S仍为n目关系，由属于R而不属于S的所有元组组成。三，交。R和S具有相同的目n，即两个关系都有n个属性。R和S相应的属性取自同一个域。R交S仍为n目关系，由既属于R又属于S的元组组成。四，笛卡尔积。严格的讲是广义的笛卡尔积。R为n目关系，k1个元组。S为m目关系，k2个元组。R✕S的列:（n+m）列元组的集合，元组的前n列是关系R的一个元组，后m列是关系S的一个元组。行:k1✕K2个元组。
",第二章  关系数据库（续）,2022-09-28 17:11:47
2020213346,"数据库存储数据，语义用于描述数据，不可分
数据库系统：数据库，管理软件
实体--》属性（域）--》标识属性 码
实体的联系 一/多对一/多 ",第一章 绪论,2022-09-11 21:11:22
2020213346,"实体完整性规则：若属性A是基本关系R的主属性，则属性A不能取空值 主码不能空
参照完整性：关系之间存在引用
参照关系 如学生 外码 专业号，被参照关系
关系代数：传统：并差交 笛卡尔积 选择投影连接 除
",2.3 2.4 2.5,2022-10-10 14:50:52
2020213346,"选择：根据条件，选择某表的行
投影：根据列号/属性名，选择列
等值连接：相同属性的部分行，进行笛卡尔积
自然连接：等值连接去除相同列
除：找到相同属性的相同值，对应的行，的其它属性",2.专门关系运算,2022-10-10 16:43:03
2020213346,"sql 特点：综合统一
面向集合的操作方式，嵌入式语言

三级结构
sql-视图-基本表-文件（用户透明）

数据定义：
CREATE SCHEMA name AUTHORIZATION name
CREATE TABLE [name] ( [columnName] [type] [约束],
                                          [columnName] [type] [约束],
                                           [columnName] [type] [约束])
ALTER TABLE tablename ...
DROP TABLE tablename[ ]
CREATE INDEX ...

数据查询：
SELECT 列名 FROM ...WHILE 表名.列名 = 常量 AND ...         单表 条件查询
SELECT 列名 FROM ...WHILE 表名 = 表名         自然连接查询
",3 sql 数据定义数据查询,2022-10-31 14:45:08
2020213346,"插入数据：
INSERT   INTO  表名  VALUES（常量， 常量）
修改数据：
UPDATE 表名  SET  列名=...  WHILE 条件
删除：
DELETE FROM  表名  WHILE 条件
",3 sql 数据更新,2022-10-31 15:10:17
2020213346,"数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或损坏。系统安全保护措施是否有效是数据库系统的主要技术指标之一。
数据库的不安全因素
1）非授权用户对数据库的恶意存取和破坏
措施：包括用户身份鉴别、存取控制和视图等技术。
2）数据库中重要或敏感的数据被泄露
措施：强制存取控制、数据加密存储和加密传输等。
3）安全环境的脆弱性
措施：加强计算机系统的安全性保证，建立完善的可信标准（安全标准）。
用户身份鉴别
存取控制：存取控制机制主要包括定义用户权限，并将用户权限登记到数据字典中和合法权限检查。两者机制一起组成数据库管理系统的存取控制子系统。",4 数据库安全性,2022-11-17 02:02:32
2020213347,"通过本次课的学习，我不仅学到了数据、数据库、数据库管理系统、数据库系统的概念与特征，数据库系统的构成以及数据库系统的基本工作流程图。这些是我们学习数据库系统的基础知识储备，需要好好记忆。
我还学到了数据模型以及它的两大类--概念模型、逻辑模型和物理模型，如何通过两步对客观对象抽象为概念模型。学习了信息世界中的基本概念以及两个实体型的三种不同联系，最后我们学习了如何通过绘制E-R图来描述现实世界的概念模型，这个过程有些需要细心与耐心，首先分析各个实体型之间的联系，再将联系转换为完整的E-R图并绘制出来，这个过程需要多加联系才能更加熟练。",（第一次课程）数据库系统的概述与数据模型,2022-09-12 11:57:55
2020213347,通过本次课程的学习，我学习到了常用的三个数据模型，层次模型，网状模型和关系模型。数据模型是数据库系统的核心和基础，这三个模型各有优缺点。层次模型的数据结构简单清晰，查询效率高，但由于现实世界中很多模型较复杂且是非层次的，所以不适合用层次模型表示，层次模型的应用程序编写也较复杂；网状模型能够更为直接地描述现实世界，存储效率高，但由于它结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握；关系模型则是建立在严格的数学概念的基础上的，实体和各类联系都用关系来表示；对数据的检索结果也是关系它的存储路径对用户透明，但这导致它的查询效率往往不如非关系数据模型。,（第二次课程）常用的三个数据库模型,2022-09-19 13:34:21
2020213347,"通过本次课程的学习，我更加深入地了解到了关系模型。现实世界的实体以及实体间的各种联系均用关系来表示，从用户角度，关系模型中数据的逻辑结构是一张二维表。
关系模型有关系数据结构，关系操作集合和关系完整性约束三部分组成。首先学习到了关系数据结构的形式化定义，如域、笛卡尔积以及关系的定义。笛卡尔积可表示为一个二维表，笛卡尔积中的每一个元素叫做一个n元组，表中的每行对应一个元组，表中的每列对应一个域。为了加以区分，必须对每列起一个名字，称为属性。
在关系的定义中，我们也学习到了什么是码、候选码、主码、全码等。关系可以有三种类型，基本关系（基本表）、查询表和视图表。基本关系有六条性质：列是同质的；不同的列可出自同一个域；列的顺序无所谓；任意两个元组的候选码不能取相同的值；行的顺序无所谓；分量必须取原子值。这些规范条件中最基本的一条是，关系的每一个分量必须是一个不可分的数据项。
关系的描述称为关系模式，它可以表示为R（U,D,DOM,F），R为关系名，U为组成该关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。关系模式是对关系的描述，它是静态的，稳定的；关系则是关系模式在某一时刻的状态或内容，是动态的、随时间不断变化的。
所有关系的集合构成一个关系数据库。关系模型中常用的关系操作包括查询和插入、删除、修改两大部分。关系操作的特点是操作的对象和结果都是集合，一次一集合的方式。
",（第三次课程）关系数据结构及形式化定义和关系操作,2022-09-21 20:43:38
2020213347,"关系模型中有三类完整性约束：实体完整性、参照完整性和用户定义的完整性。
实体完整性和参照完整性是关系模型必须满足的完整性约束条件，被称作关系的两个不变性。用户定义的完整性是应用领域需要遵循的约束条件。

实体完整性：若属性A 是基本关系R的主属性，则A不能取空值。
	a实体完整性规则是针对基本关系而言的
	b现实世界中的实体是可区分的，即它们具有某种唯一性标识
	c关系模型中以主码作为唯一性标识
d主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体。

参照完整性：设F是基本关系R的一个或一组属性，但不是关系R的码，Ks是关系S 的主码。如果F与KS相对应，则称F是R的外码，并称基本关系R为参照关系，S为被参照关系
	关系间的引用。不仅两个或两个以上的关系间可以存在引用关系，同一关系内部属性减也可能存在引用关系（学生、班长例子）
	a外码不一定要与相应的主码同名
	b主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体
	c若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：空值（F的每个属性值均为空值） 或者 等于S中某个元组的主码值

用户定义的完整性：针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求

关系代数中传统的集合运算：并、差、交、笛卡尔积。考试必考，多加练习
",（第四次课程）关系的完整性以及传统的集合运算,2022-09-27 18:32:30
2020213347,"专门的关系运算包括选择、投影、连接、除运算等.
象集的定义：Zx，给定一个关系R（X，Z），X和Z为属性组。当t[X]=x时，x在R中的象集为：Zx={t[Z]|tR，t[X]=x}它表示R中属性组X上值为x的诸元组在Z上分量的集合。
选择：选择又称为限制。它是在关系中满足给定条件的诸元组，记作
σF(R)={t|tR∧F(t)='真'} 其中F表示选择条件，它是一个逻辑表达式，取逻辑值真或假 。
F的基本形式X1θY1。
θ表示比较运算符，它可以是>,>=,<,<=,=或<>。
X1，Y1是属性名、常量、简单函数，属性名也可以用序号来代替。
选择运算实际上是从关系R中选取使逻辑表达式F为真的元组，从行的角度进行运算
投影：关系R上的投影是从R中选择出若干属性列组成新的关系
πA(R)={t[A]|tR}    A：R中的属性列
但投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）
连接：连接也称为θ连接，它是从两个关系的笛卡尔积中选取属性间满足一定条件的元组
	R  S={|trR∧tsS∧tr[A]θts[B]} 
	A和B：分别为R和S上度数相等且可比的属性组θ：比较运算符。
	连接运算从R和S的广义笛卡尔积R×S中选取（R关系）在A属性组上的值与（S关系）在B属性组上值满足比较关系θ的元组。
	两类常用的连接运算：
	等值连接，θ为“＝”的连接运算称为等值连接，从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组。
	自然连接，自然连接是一种特殊的等值连接两个关系中进行比较的分量必须是相同的属性组，在结果中把重复的属性列去掉。
	一般的连接操作是从行的角度进行运算。自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。
	外连接如果把舍弃的元组也保存在结果关系中，而在其他属性上填空值(Null)，这种连接就叫做外连接。外连接有左外连接和右外连接
除运算：设关系R除以关系S的结果为关系T，则T包含所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中



",（第五次课程）专门的关系运算,2022-11-06 15:32:19
2020213347,"本次课我学习到的内容如下
SQL 结构化查询语言，是关系数据库的标准语言。SQL是一个通用的、功能性极强的关系数据库语言
特点：一、综合统一
①	 集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体。
②	可以独立完成数据库生命周期中的全部活动。
定义关系模式，插入数据，建立数据库，对数据库中的数据进行查询和更新
数据库重构和维护，数据库安全性、完整性控制。
③	用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。
④	数据操作符统一
二、高度非过程化
①	非关系数据模型的数据操纵语言面向过程，必须定制存储路径
②	SQL只要提出“做什么”，无需了解存储路径
③	存储路径的选择以及SQL的操作过程由系统自动完成
三、面向集合的操作方式
①	非关系数据模型采用面向记录的操作方式，操作对象是一条记录
②	SQL采用集合操作方式
操作对象、查找结果可以是元组的集合
一次插入、删除、更新操作的对象可以是元组的集合
四、以同一种语法结构提供多种使用方式
①	SQL是独立的语言，能够独立地用于联机交互的使用方式
②	SQL是嵌入式语言，能够嵌入到高级语言程序中，供程序员设计程序时使用。
五、简洁，易学易用，
SQL完成核心功能只用了9个动词。
SQL基本概念
基本表：本身独立存在的表，SQL中一个关系就对应一个基本表，一个(或多个)基本表对应一个存储文件，一个表可以带若干索引
存储文件：逻辑结构组成了关系数据库的内模式，物理结构是任意的，对用户透明。
视图：从一个或几个基本表导出的表，数据库中只存放视图的定义而不存放视图对应的数据，视图是一个虚表，用户可以在视图上再定义视图
数据定义。
SQL的数据定义功能: 模式定义、表定义、视图和索引的定义
数据库对象的命名机制：一个DBMS实例中，可建立多个数据库，一个数据库中可以建立多个模式，一个模式下可以建立多个表、视图和索引等数据库对象。
定义模式：
CREATE SCHEMA<模式名>AUTHORIZATION<用户名>。
定义模式实际上定义了一个命名空间在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。
删除模式：
	DROP SCHEMA <模式名> <CASCADE|RESTRICT>
	CASCADE:删除模式的同时把该模式中所有的数据库对象全部删除
RESTRICT:如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。当该模式中没有任何下属的对象时才能执行。
定义基本表：
CREATETABLE<表名>
（<列名><数据类型>[<列级完整性约束条件>]
[，<列名><数据类型>[<列级完整性约束条件>]]...
[，<表级完整性约束条件>]）；
完整性约束有三种：not null，unique,check(P)
SQL中域的概念用数据类型来实现,
定义表的属性时，需要指明数据类型及长度。每一个基本表都属于某一个模式一个模式包含多个基本表。
修改基本表：
	ADD/DROP 可以增加、删除一个列；
	ADD/DROP 增加一个表级完整性约束，或删除某个完整性约束
	ALTER 更改某一列的数据类型
删除基本表：DROP TABLE <表名>［RESTRICT| CASCADE］；
建立索引：
建立索引的目的：加快查询速度。RDBMS中索引一般采用B+树、HASH索引来实现。B+树索引具有动态平衡的优点HASH索引具有查找速度快的特点
	CREATE[UNIQUE][CLUSTER]INDEX<索引名>
ON<表名>(<列名>[<次序>][,<列名>[<次序>]]...)；
删除索引：
DROPINDEX<索引名>；删除索引时，系统会从数据字典中删去有关该索引的描述。
数据查询：单表查询：查询只涉及一个表。
关键点：投影属性列 SELECT FROM （*表示所有属性）。
去除重复元组 SELECT DISTINCT 默认为ALL。
确定范围：BETWEEN…AND。
确定集合：IN,NOT IN。
字符匹配：LIKE, 使用换码字符将通配符转义为普通字符。
逻辑运算符：AND和OR来联结多个查询条件，AND的优先级高于OR，可以用括号改变优先级。
聚集函数：计数count,计算总合sum,计算平均值avg，最大最小值max，min.
查询结果的排序 ORDER BY 升序ASC降序DESC。",（第六次课程）关系数据库标准语言SQL,2022-11-06 16:29:05
2020213347,"连接查询：同时涉及多个表的查询，连接查询是关系数据库中最主要的查询，包括等值连接查询，自然连接查询，非等值连接查询，自身连接查询，外连接查询和符合条件连接查询等
连接查询的WHERE子句中用来连接两个表的条件称为连接条件或连接谓词，其一般格式为[<表名1>.]<列名1>  <比较运算符>[<表名2>.]<列名2>。其中比较运算符主要有>,>=,<,<=,=，！=或<>。当连接运算符为=时为等值连接，使用其他运算符称为非等值连接。若在等值连接中把重复的属性列去掉则为自然连接
连接条件中的各连接字段类型必须是可比的，但名字不必是相同的。
连接操作的执行过程：嵌套循环法
自身连接：一个表与其自己连接，需要给表起别名以示区别，由于所有属性名都是同名属性，因此必须使用别名前缀。新表名作为表中属性的前缀。
外连接：普通连接操作只输出满足连接条件的元组。外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出
	若有悬浮元组，则需使用外连接
	左外连接：LEFT OUTER JOIN
	右外连接: RIGHR OUTER JOIN
	ON指定连接条件，外连接时使用
	内连接查询  
复合条件连接：WHERE子句中含多个连接条件
嵌套查询
一个SELECT-FROM-WHERE语句称为一个查询块。将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询
子查询的限制：不能使用ORDER BY子句。
不相关子查询：子查询的查询条件不依赖于父查询，由里向外逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。
相关子查询：子查询的查询条件依赖于父查询。首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表然后再取外层表的下一个元组重复这一过程，直至外层表全部检查完为止。
	带有IN谓词的子查询
	带有比较运算符的子查询
当能确切知道内层查询返回单值时，可用比较运算符（>，<，=，>=，<=，!=或< >）
	带有ANY（SOME）或ALL谓词的子查询
 
	带有EXISTS谓词的子查询
	带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”。 由EXISTS引出的子查询，其目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义
一些带EXISTS或NOT EXISTS谓词的子查询不能被其他形式的子查询等价替换。所有带IN谓词、比较运算符、ANY和ALL谓词的子查询都能用带EXISTS谓词的子查询等价替换。
集合查询
集合操作的种类：
并UNION。UNION：将多个查询结果合并起来时，系统自动去掉重复元组。UNION ALL：将多个查询结果合并起来时，保留重复元组
交INTERSECT，差EXCEPT。
参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同。
",（第七次课程）关系数据库标准语言SQL（续:连接查询，嵌套查询，集合查询）,2022-11-07 02:10:50
2020213347,"数据更新
	插入数据
两种插入数据方式1. 插入元组2. 插入子查询结果
	插入元组：将子查询结果插入指定表中
	INSERT INTO <表名> (属性名)…
	属性列的顺序可与表定义中的顺序不一致
	VALUES （<常量1>…
1.	常量值与相应属性名至于相同，个数相同
2.	元组的某属性没在INTO后出现，则这些属性上的值取空值NULL
3.	INTO中没有指明任何属性，则VALUES子句中新插入的元组在每个属性上必须有值，且常量值的顺序要与表定义中属性的顺序一致
	修改数据：修改指定表中满足WHERE子句条件的元组
修改属性值：
UPDATE <表名>(只能对一个表进行修改)
SET<属性名1>=<表达式1>（…）
指定修改方式➢要修改的列➢修改后取值
WHERE <元组选择条件>
指定要修改的元组➢缺省表示要修改表中的所有元组
	删除数据：删除指定表中满足WHERE子句条件的元组
删除元组
DELETE(只能对一个表进行操作)
FROM<表名>
WHERE<元组选择条件>
	更新操作的完整性检查
更新操作不满足参照完整性时
①	拒绝执行（NO ACTION）
②	产生级联操作（CASCADE）
③	设置为空值（SET NULL）
视图
视图是从一个或几个基本表导出的表，它与基本表不同，是一个虚表。数据库中只存放视图的定义，不存放视图对应的数据。这些数据仍存放在原来的基本表中，基表中的数据发生变化，从视图中查询出的数据也随之改变。
基于视图的操作：查询、删除、受限更新、定义基于该视图的新视图。
建立视图：CREATE VIEW<视图名>（列名，列名…）组成视图的属性列名或者全部省略或者全部指定，若省略了视图的属性列名，则该视图由子查询SELECT子句目标列中的诸字段组成。
			AS<子查询>子查询可以是任意的SELECT语句，是否可以含有ORDER BY子句和DISTINCT短语取决于系统的实现。
WITH CHECK OPTION表示对视图进行UPDATE、INSERT和DELETE操作时要保证更新插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）
关系数据库执行CREATE VIEW语句的结果只是把视图的定义存入数据字典，并不执行其中的SELECT语句。
行列子集视图：从单个基本表导出的，并且只是去掉了基本表的某些行和后写列，但保留了主码的视图。
视图不仅可以建立在单个或多个基本表上，也可以建立在一个或多个已定义好的视图上，或建立在基本表与视图上。
删除视图：DROP VIEW<视图名>
如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除。删除基表时，由该基表导出的所有视图定义都必须显式地使用DROP VIEW语句删除。
查询视图：视图消解法：从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询。
更新视图：视图是虚表，对视图的更新最终要转换为对基本表的更新。
UPDATE<视图名>->基本表名 SET 
视图的作用：1.视图能够简化用户的操作。2.视图使用户能以多种角度看待同一数据。3.视图对重构数据库提供了一定程度的逻辑独立性。4.视图能够对机密数据提供安全保护。5.适当的利用视图可以更清晰的表达查询。
",（第八次课程）关系数据库标准语言SQL（续：数据更新，视图）,2022-11-08 14:10:02
2020213347,"定义：数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。系统安全保护措施是否有效是数据库系统主要的性能指标之一。
数据库的一大特点是数据可以共享；
数据共享必然带来数据库的安全性问题；
数据库系统中的数据共享不能是无条件的共享；
例：军事秘密、国家机密、新产品实验数据、市场需求分析、市场营销策略、销售计划、客户档案、医疗档案、银行储蓄数据
计算机系统安全性：为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
三类计算机系统安全性问题：技术安全类，管理安全类，政策法律类。

	数据库的不安全因素
①	非授权用户对数据库的恶意存取和破坏
黑客和犯罪粉丝在用户存储数据库时猎取用户名和用户口令，然后假冒合法用户偷取、参改甚至破坏用户数据
安全措施：用户身份鉴别、存取控制和视图等技术
②	数据库中重要或敏感的数据被泄露
安全措施：强制存取控制、数据加密存储和加密传输。审计日志分析
③	安全环境的脆弱性
数据库的安全性与计算机系统的安全性紧密联系
安全措施：建立一套可信计算机系统的概念和标准	
	三类计算机系统安全性问题
技术安全类，管理安全类，政策法律类
	安全标准简介
 
①	TCSEC/	TDI标准 紫皮书
TDI中定义了数据库管理系统的设计与视线中需满足和用以进行安全性级别评估的标准
从安全策略、责任、保证、文档四个方面来描述安全性级别划分的指标
 
B2以上的系统还处于理论研究阶段，应用多限于一些特殊的部门，如军队等。
②	CC标准
提出国际公认的表述信息技术安全性的结构
把信息产品的安全要求分为安全功能要求、安全保证要求
 
数据库安全性控制
	非法使用数据库的情况：
		编写合法程序绕过DBMS及其授权机制；
直接或编写应用程序执行非授权操作；
通过多次合法查询数据库从中推导出一些保密数据；
计算机系统中，安全措施是一级一级层层设置。
数据库安全性控制的常用方法： 
a)	用户标识与鉴别：系统提供的最外层安全保护措施；
用户标识；
口令：系统核对口令以鉴别用户身份。
b)	存取控制：定义用户权限；合法权限检查；自主存取控制，强制存取控制；通过SQL 的GRANT语句和REVOKE语句实现。
c)	授权与回收：GRANT语句，将对指定操作对象的指定操作权限授予指定的用户。
d)	数据库角色：被命名的一组与数据库操作相关的权限。角色是权限的集合；可以为一组具有相同权限的用户创建一个角色；简化授权的过程。
e)	角色的创建：CREATE ROLE <角色名>
f)	强制存取控制方法：可能存在数据的“无意泄露”。原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记。解决：对系统控制下的所有主客体实施强制存取控制策略。
保证更高程度的安全性，用户能不能直接感知或进行控制，适用于对数据有严格而固定密集分类的部门，如军事部门，政府部门。主体是系统中的活动实体；客体是系统中的被动实体，是受主体操纵的，如文件，基表，索引，视图。
敏感度标记。主体的敏感度标记称为许可证级别；客体的敏感度标记称为密级
",（第九次课程）数据库的安全性,2022-12-27 00:09:06
2020213347,"数据库完整性概念和分类：
数据库完整性是指DBMS应保证的DB的一种特性——在任何情况下的正确性、有效性和一致性。为维护数据库的完整性，DBMS必须：1.提供定义完整性约束条件的机制2.提供完整性检查的方法3.违约处理。
数据的完整性和安全性是两个不同概念：数据的完整性：防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据；防范对象：不合语义的、不正确的数据；数据的安全性：保护数据库防止恶意的破坏和非法的存取；防范对象：非法用户和非法操作。
关系模型中有完整性要求：实体完整性，参照完整性，用户自定义完整性。
实体完整性：CREATE  TABLE中用PRIMARY KEY定义。单属性构成的码有两种说明方法：定义为列级约束条件；定义为表级约束条件。对多个属性构成的码只有一种说明方法：定义为表级约束条件。
实体完整性检查和违约处理：
插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。包括：1. 检查主码值是否唯一，如果不唯一则拒绝插入或修改。2. 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改。
参照完整性：在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码；用REFERENCES短语指明这些外码参照哪些表的主码。
参照完整性检查和违约处理：1. 拒绝(NO ACTION)执行•默认策略2. 级联(CASCADE)操作3. 设置为空值（SET-NULL）•对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值。
用户定义的完整性：用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求。
属性上的约束条件的定义：CREATE TABLE时定义：列值非空（NOT NULL）；列值唯一（UNIQUE）；检查列值是否满足一个布尔表达式（CHECK）；插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足，如果不满足则操作被拒绝执行。
 
 
 
 
 
 
表完整性与列完整性
 
 
 
 
 
触发器：触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程。由服务器自动激活；可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力
CREATE TRIGGER语法格式；
",（第十次课程）数据库完整性,2022-12-27 00:19:48
2020213347,"关系数据库逻辑设计：针对具体问题，如何构造一个适合于它的数据模式；数据库逻辑设计的工具──关系数据库的规范化理论。
1.完整性约束的表现形式：限定属性取值范围；定义属性值间的相互关联，这就是函数依赖，它是数据库模式设计的关键。
2.数据依赖：一个关系内部属性与属性之间的约束关系；现实世界属性间相互联系的抽象；数据内在的性质；语义的体现。
函数依赖
3.数据依赖的类型：函数依赖FD；多值依赖MVD；其他。
规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
码：设K为R<U,F>中的属性或属性组合。若K  U，则K称为R的侯选码（Candidate Key）。若候选码多于一个，则选定其中的一个做为主码（Primary Key）。包含在任何一个候选码中的属性，称为主属性（Prime attribute）；不包含在任何码中的属性称为非主属性（Nonprime attribute）或非码属性（Non-key attribute）；全码：整个属性组是码，称为全码（All-key）。
范式是符合某一种级别的关系模式的集合。
关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。
范式的种类：第一范式(1NF)第二范式(2NF)第三范式(3NF)BC范式(BCNF)第四范式(4NF)第五范式(5NF)。
 
1NF：一个关系模式R的所有属性都是不可分的基本数据项
2NF：若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF。
3NF：若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。
BCNF：所有非主属性对每一个码都是完全函数依赖；所有的主属性对每一个不包含它的码，也是完全函数依赖；没有任何属性完全函数依赖于非码的任何一组属性。
多值依赖：对称性；传递性；函数依赖是多值依赖的特殊情况。
关系数据库的规范化理论是数据库逻辑设计的工具。目的：尽量消除插入、删除一场，修改复杂，数据冗余。基本思想：逐步消除数据依赖中不合适的部分。
不能说规范化程度越高的关系模式就越好v在设计数据库模式结构时，必须对现实世界的实际情况和用户应用需求作进一步分析，确定一个合适的、能够反映现实世界的模式。
",（第十一次课程）关系数据理论,2022-12-27 00:33:45
2020213347,"数据库设计是指对于一个给定的应用环境，构造（设计）优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。目标：为用户和各种应用系统提供一个信息基础设施和高效率的运行环境。
数据库设计方法：手工与经验相结合方法：设计质量与设计人员的经验和水平有直接关系；数据库运行一段时间后常常不同程度地发现各种问题，增加了维护代价。规范设计法：基本思想：过程迭代和逐步求精。
数据库设计的基本步骤：
需求设计：准确了解与分析用户需求（包括数据与处理），是最困难、最耗费时间的一步；
概念结构设计：整个数据库设计的关键，通过对用户需求进行综合、归纳与抽象，形成一个独立于具体DBMS的概念模型；
逻辑结构设计：将概念结构转换为某个DBMS所支持的数据模型，对其进行优化；
物理结构设计：为逻辑数据模型选取一个最适合应用环境的物理结构（包括存储结构和存取方法）；
数据库实施：运用DBMS提供的数据库语言（如SQL）及宿主语言，根据逻辑设计和物理设计的结果：建立数据库、编制与调试应用程序、组织数据入库、进行试运行；
数据库运行和维护：数据库应用系统经过试运行后即可投入正式运行，在数据库系统运行过程中必须不断地对其进行评价、调整与修改。
 
数据项：数据项是不可再分的数据单位。
数据项描述＝｛数据项名，数据项含义说明，别名，数据类型，长度，取值范围，取值含义，与其他数据项的逻辑关系，数据项之间的联系｝。
数据结构：数据结构反映了数据之间的组合关系。
一个数据结构可以由若干个数据项组成，也可以由若干个数据结构组成，或由若干个数据项和数据结构混合组成。
数据结构描述＝｛数据结构名，含义说明，组成:｛数据项或数据结构｝｝
数据流：数据流是数据结构在系统内传输的路径。
数据流描述＝｛数据流名，说明，数据流来源，数据流去向，组成:｛数据结构｝，平均流量，高峰期流量｝。
数据存储：数据存储是数据结构停留或保存的地方，也是数据流的来源和去向之一。
数据存储描述＝｛数据存储名，说明，编号，输入的数据流，输出的数据流，组成:｛数据结构｝，数据量，存取频度，存取方式｝。
处理过程：具体处理逻辑一般用判定表或判定树来描述。
处理过程描述＝｛处理过程名，说明，输入:｛数据流｝，输出:｛数据流｝，处理:｛简要说明｝｝。
",（第十二次课程）数据库设计,2022-12-27 00:45:08
2020213347,"概念结构设计：将需求分析得到的用户需求抽象为信息结构(即概念模型)的过程就是概念结构设计。概念结构是各种数据模型的共同基础，它比数据模型更独立于机器、更抽象，从而更加稳定，概念结构设计是整个数据库设计的关键。
概念结构设计的特点(1) 能真实、充分地反映现实世界(2) 易于理解(3) 易于更改(4) 易于向关系、网状、层次等各种数据模型转换。
描述概念模型的工具：E-R模型
概念结构设计方法：
自底向上：先定义每个局部应用的概念结构，然后按一定的规则把它们集成起来，从而得到全局概念模型。
自顶向下：先定义全局概念模型，然后再逐步细化。
由里向外：先定义最重要的核心结构，然后再逐步向外扩展。
混合策略：将自顶向下和自底向上结合起来使用。先用自顶向下设计一个概念结构的框架，然后以它为框架再用自底向上设计局部概念结构，并把它们集成。
数据抽象：抽象是对实际的人、物、事和概念中抽取所关心的共同特性，忽略非本质的细节，并把这些特性用各种概念精确地加以描述。概念结构是对现实世界的一种抽象。三类：分类、聚集、概括。
局部E-R图设计：
设计原则：实体要尽可能地煞，现实世界中地事物若能作为属性就尽量作为属性对待，只考虑系统范围内的属性，属性必须不可分，不能包含其它属性；属性不能和其它实体具有联系。
视图的集成：各个局部视图即分E-R图建立好后，还需要对它们进行合并，集成为一个整体的数据概念结构即总E-R图。
冲突的种类：属性冲突；命名冲突；结构冲突。
消除不必要的冗余，设计生成基本E-R图。
冗余的数据是指可由基本数据导出的数据冗余的联系是指可由其他联系导出的联系；冗余数据和冗余联系容易破坏数据库的完整性，给数据库维护增加困难；消除不必要的冗余后的初步E-R图称为基本E-R图。
",（第十三次课程）数据库设计（续1）,2022-12-27 00:59:15
2020213347,"逻辑结构设计
任务：把概念结构设计阶段设计好的基本E-R图转换为与选用DBMS产品所支持的数据模型相符合的逻辑结构。
步骤：
将概念结构转化为一般的关系、网状、层次模型；
将转换来的关系、网状、层次模型向特定DBMS支持下的数据模型转换；对数据模型进行优化。
E-R图向关系模型的转换要解决的问题：如何将实体型和实体间的联系转换为关系模式；如何确定这些关系模式的属性和码。
转换内容：将E-R图转换为关系模型：将实体、实体的属性和实体之间的联系转换为关系模式。
实体型间的联系有以下不同情况：(1)一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。转换为一个独立的关系模式，与某一端实体对应的关系模式合并(2)一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。转换为一个独立的关系模式，与n端对应的关系模式合并(3) 一个m:n联系转换为一个关系模式。 (4)三个或三个以上实体间的一个多元联系转换为一个关系模式。(5)具有相同码的关系模式可合并§目的：减少系统中的关系个数。合并方法：将其中一个关系模式的全部属性加入到另一个关系模式中，然后去掉其中的同义属性（可能同名也可能不同名），并适当调整属性的次序。
 
 
数据模型的优化：得到初步数据模型后，还应该适当地修改、调整数据模型的结构，以进一步提高数据库应用系统的性能，这就是数据模型的优化。关系数据模型的优化通常以规范化理论为指导。
优化数据模型的方法1.确定数据依赖按需求分析阶段所得到的语义，分别写出每个关系模式内部各属性之间的数据依赖以及不同关系模式属性之间数据依赖2.消除冗余的联系对于各个关系模式之间的数据依赖进行极小化处理，消除冗余的联系。3.确定所属范式。按照数据依赖的理论对关系模式逐一进行分析；考查是否存在部分函数依赖、传递函数依赖、多值依赖等；确定各关系模式分别属于第几范式。4.按照需求分析阶段得到的各种应用对数据处理的要求，分析对于这样的应用环境这些模式是否合适，确定是否要对它们进行合并或分解。注意：并不是规范化程度越高的关系就越优，一般说来，第三范式就足够了。
设计用户子模式。定义用户外模式时应该注重的问题包括三个方面：(1) 使用更符合用户习惯的别名(2) 针对不同级别的用户定义不同的View ，以满足系统对安全性的要求。(3) 简化用户对系统的使用。
 
数据库的物理设计：数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于选定的数据库管理系统。为一个给定的逻辑数据模型选取一个最适合应用环境的物理结构的过程，就是数据库的物理设计。
数据库物理设计的步骤：确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构；对物理结构进行评价，评价的重点是时间和空间效率如果评价结果满足原设计要求，则可进入到物理实施阶段，否则，就需要重新设计或修改物理结构，有时甚至要返回逻辑设计阶段修改数据模型。
关系数据库物理设计的内容：为关系模式选择存取方法(建立存取路径)；设计关系、索引等数据库文件的物理存储结构。
DBMS常用存取方法：索引方法：目前主要是B+树索引方法，经典存取方法，使用最普遍；聚簇（Cluster）方法；HASH方法。
数据库的实施和维护：
数据库的试运行：在原有系统的数据有一小部分已输入数据库后，就可以开始对数据库系统进行联合调试，称为数据库的试运行。
数据库试运行主要工作包括：1）功能测试，实际运行数据库应用程序，执行对数据库的各种操作，测试应用程序的功能是否满足设计要求；如果不满足，对应用程序部分则要修改、调整，直到达到设计要求2）性能测试，测量系统的性能指标，分析是否达到设计目标，如果测试的结果与设计目标不符，则要返回物理设计阶段，重新调整物理结构，修改系统参数，某些情况下甚至要返回逻辑设计阶段，修改逻辑结构。
运行与维护：数据库试运行合格后，数据库即可投入正式运行。数据库投入运行标志着开发任务的基本完成和维护工作的开始。对数据库设计进行评价、调整、修改等维护工作是一个长期的任务，也是设计工作的继续和提高。应用环境在不断变化，数据库运行过程中物理存储会不断变化。
",（第十四次课程）数据库设计（续2）,2022-12-27 01:13:40
2020213348,"一.课堂考核方式
    课前预习、课堂参与、课后反思、课后作业都占10%的比例，实验报告占20%，最终的期末占40%，考试为笔试。在课堂期间还记录了老师提供的日常预习和交作业的网站，认真了解了本门课程的学习方式和阶段性目标，为日后的自主学习打下了基础。
二.课堂所学
   第一节课主要了解了数据库的一些应用领域，例如做软件，移动应用，开发网站等，与数字媒体息息相关。
   还学习了数据库系统的基本概述，介绍了数据、数据库、数据库管理系统(DBMS）、数据库系统(DBS)的基本概念和构成，通过对学生这个实体和它的相关属性的数据举例了解到语义与数据不可分的特点，只有这样才能准确地记录信息。通过结构图了解到应用系统、数据库管理系统、数据库、操作系统、数据库管理员之间的逻辑层级关系和联系，对学习的内容体系进行了初步架构。
   数据库的组成对象以一定的相互联系关系储存在数据库中，称为数据结构。数据结构描述与数据类型、内容、性质有关的对象，以及数据之间的相互联系，数据结构是对系统静态特性的描述。在数据库中允许对数据进行的操作有查询、更新(包括插入、删除、修改)。
   课堂上讲解了两种数据模型——概念模型、逻辑模型和物理模型，这两种模型分别属于两种不同的层次。在现实世界对客观对象的抽象过程中包含了两大模型的转换，首先是由数据库设计人员将现实世界中的对象转化为概念模型，再将概念模型转化为逻辑模型，最后由数据库管理系统(DBMS)完成对物理模型的转化,实现了信息世界到机器世界到转换。信息世界中存在很多的基本概念，包括实体、属性、码(唯一标识实体的属性或属性集)、实体型、联系等。表示信息世界通常要构建它的概念模型，概念模型是现实世界到机器世界的一个中间层次，构建概念模型通常使用实体—联系方法(E-R方法)。在做图的时候，实体型用矩形表示，框内写实体名; 属性用椭圆表示，并用无向线段与实体连接; 联系用菱形表示，框内写明联系名，并用无向线段与有关实体联系起来。联系有多种表示方法，两个实体型之间的联系分为三种：一对一(1:1)、一对多(1:n)、多对多(m:n)。",数据库系统概述、数据模型课堂内容反思,2022-09-06 19:23:59
2020213348,"本次课堂主要学习了三种不同的数据模型——层次模型、网状模型和关系模型
层次模型是数据库系统中最早出现的数据模型，采用树形结构来表示各类实体和实体间的联系。且层次模型满足条件：1.有且只有一个结点没有双亲结点，这个节点为根节点。2.根以外的其他结点有且只有一个双亲结点。层次模型可以直接处理一对多联系，间接处理多对多联系。它的存储结构分为邻接法和链接法，前者按照层次树前序遍历的顺序来吧所有记录值依次邻接存放，即通过物理空间的位置相邻来实现层次顺序；后者用指引来反应数据之间的层次联系，分为子女-兄弟链接法和层次序列链接法。它的优点：1.数据结构简单清晰，2.查询效率高，3.提供了良好的完整性支持，缺点：1.多对多联系表示不自然，2.对插入和删除操作的限制多，3.查询子女结点必须通过双亲结点，4.由于结构严密，层次命令趋于程序化。
网状模型的典型代表是dbtg系统，它满足的条件有：1.允许一个以上的结点无双亲，2.一个结点可以有多于一个的双亲。网状模型的数据结构有一些特点：1.允许多个结点没有双亲结点 2.网状模型允许结点有多个双亲结点 3.网状模型允许两个节点之间有多种联系。其实层次模型就是网状模型的一个特例。
关系模型是如今最常用的数据组织形式，在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。关系模式中涉及到主码、域和分量的概念，由于提前做了预习和测验，理解起来已经非常的顺利，在课堂上老师的举例和更加细致的解释后，对这些概念的印象更加的深刻。在关系模型中，关系必须满足一定的规范条件：关系的每一个分量必须是一个不可分的数据项，不允许表中还有表。例如，不可以把属性“扣除”分为水电和房租。关系的完整性约束条件包括：实体完整性、参照完整性和用户定义完整性。在关系模型的存储结构中，实体和实体间的联系都用表来表示，表以文件形式存储。关系模型建立在严格的多数学概念的基础上，且概念单一，存储路径对用户透明，具有更高的数据独立性，简化了数据库开发的工作。但是它的查询效率不高，开发dbms的难度增加。
课上通过对三种模型做图解来讲述，通过绘画结构图、举例，来理解几者的不同，并比较它们的相同点和不同点，分析优缺点。在不同的实际应用中，我们可以根据这些特点和优缺点进行选择和组合，以实现最佳的效果。",2022.9.12课堂反思和总结,2022-09-12 17:49:07
2020213348,"今天课堂的知识点主要是对关系数据结构及形式化定义的相关知识点进行了讲解，并通过课堂上的相关测验加深了理解和印象，这次的反思我将梳理本次课堂讲述的相关知识点并进行回忆和记忆。      这次的课堂开头，我们先自主预习书本知识，了解了个大概后再由老师针对ppt进行细致的分析。首先是介绍一些概念和定义：域、笛卡尔积、元组、分量、关系、关系模式、关系数据库等。域是一组具有相同数据类型的值的集合。笛卡尔积可以表示为一张二维表，是域上的一种集合运算。笛卡尔积中的每一个元素叫做一个n元组。笛卡尔积元素的每一个值di叫做一个分量。关系是元组的集合，对应一个二维表，表的每行对应一个元组，表的每列对应一个域，表中的一列即为一个属性，关系是关系模式在某一时刻的状态或内容。表中可以唯一确定一个元组的某个属性组，称为候选码，初次之外，还分为主码、主属性、全码。    关系有三种类型：基本关系、查询表和视图表。其中，基本表是实际存在的表，它是实际存储数据的逻辑表示；查询表是查询结果对应的表；视图表是由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。关系的基本表有六条性质：1.列是同质的。2.不同的列可以出自同一个域。3.列的顺序无所谓，可以任意交换。4.任意两个元组的候选码不能相同。5.行的顺序无所谓（一半情况下对行的顺序还有有规定和要求的）6.分量必须取原子量，即属性不可再分。       关系是动态的、随时间不断变化的，而关系模式是静态的、稳定的，关系是值，关系模式是型。关系模式是对关系的描述，，它可以形象地表示为R(U,D,DOM,F),其中R为关系名，U为组成该关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。实体以及实体之间的联系是用关系来表示的，在一个给定的应用中，所有关系的集合构成一个关系数据库。    另外，还学习了一部分基本关系操作的知识。常用的关系操作有选择、投影、连接、除、并、交、差（查询）、插入、删除、修改（数据更新），期中最基本的物种操作是：选择、投影、并、差、笛卡尔积。关系操作的特点是集合操作方式，操作的对象和结果都是集合。关系代数语言以及关系演算的知识会在下一堂课得到更好的学习掌握。",9.19课堂反思以及梳理,2022-09-19 19:04:22
2020213348,"今天上课主要的知识内容分为两个板块：关系的完整性和关系代数。关系的三类完整性约束包括：实体完整性、参照完整性、用户定义的完整性。其中，实体完整性和参照完整性是关系模型必须满足的完整性约束条件，前者要求主码中的属性不能取空值，后者要求外码与另一个基本关系的主码相对应或者取空值。用户的定义的完整性是针对某一具体关系数据库的约束条件，反应某一具体应用所涉及的数据必须满足的语义要求，因为不是必须的，而是灵活可变的。
	关系代数是一种抽象的查询语言，它用对关系的运算来表达查询。关系代数的运算按运算符的不同可分为传统的集合运算和关系运算两类。传统的集合运算是二目运算，包括并、差、交、笛卡尔积四种运算，今天课堂学习的主要内容也就是集合运算的四种运算规则。
并、交、差的运算条件都为具有相同的目n，并是将两个关系的元组做集合，去掉重复的元组，差(R-S)是由属于R而不属于S的所有元组组成，交由既属于R又属于S的的元组组成。笛卡尔积对两个进行运算的关系的目的数量没有要求，n目的R和m目的S做笛卡尔积，则是一个(n+m)列的元组的集合，若R有k1个元组，S有k2个元组，则关系R和关系S的笛卡尔积有k1*k2个元组。通过课堂的举例和习题我能够熟练掌握这四种集合运算的运用，除此之外，我也花费了一些时间对后面的专门关系运算，包括选择、投影、连接、除运算等进行了预习。我发现仅仅看概念的解释和公式是无法完全理解的，特别是只看文字会感觉绕口混乱，通过对书上具体例题的分析和实践后，我才彻底理解。",2022.9.26课堂反思,2022-09-26 17:25:27
2020213348,"这一周学习了一些简单的SQL语言，包括它的概念、特点、产生与发展等。同时学会利用SQL语言进行数据定义和数据查询。
概念：SQL是一个通用的、功能极强的关系数据库语言。它的特点是综合统一，集数据定义语言，数据操纵语言，数据控制语言功能为一体，可以独立完成数据库生命周期中的全部功能。SQL语言高度非过程化，存储路径的选择以及SQL的操作过程由系统自动完成。SQL采用集合操作方式，操作对象、查找结果可以是元组的集合。SQL是独立语言，能够独立用于联机交互的使用方式，又是嵌入式语言，能够嵌入到高级语言程序中。

数据定义：CREATE SCHEMA”S-T” AUTHORIZATION MIN
为用户MIN定义了一个模式S-T，如果没有指定模式名，隐含为用户名。定义模式相当于定义了一个命名空间，空间中可以定义模式包含的数据库对象，如基本表、视图、索引等。以下是模式、基本表、索引的相关使用方法和概念。
	创建	删除	其他
模式	CREATE SCHEMA”S-T” AUTHORIZATION MIN
为用户MIN定义了一个模式S-T。如果没有指定模式名，隐含为用户名。	DROP SCHEMA <模式名>

CASCADE:删除模式的同时把该模式中所有的数据库对象全部删除
	定义模式相当于定义了一个命名空间，空间中可以定义模式包含的数据库对象，如基本表、视图、索引等。

		RESTRICT:该模式中没有任何下属的对象时才能执行	
基本表	CREATE TABLE SC(SNO CHAR(9),
CNO CHAR(4),
GRADE SMALLINT,
PRIMARY KEY(SNO,CNO) 主码,
FOREIGN KEY外码(SNO) REFERENCES参照表Student(SNO)
定义表时，需要指明数据类型和长度
1.	创建基本表时如果没有指定模式，系统会根据搜索路径列表总第一个存在的模式作为数据库对象的模式名。
2.	每一个模式包含多个基本表	DROP TABLE <表名>［RESTRICT|CASCADE］
RESTRICT删除表有限制，不能被其他表的约束所引用
CASCADE：删除表没有限制，相关依赖对象一起删除。	修改
			1.向Student表增加“入学时间“列，其数据类型为日期型
ALTER TABLE Student ADD S_entrance DATE
不论基本表中原来是否已有数据，新增加的列一律为空值
2.将年龄的数据类型由字符型(假设原来的数据类型时字符型)改为整数
ALTER TABLE Student ALTER COLUMN Sage INT;
3.增加新课程必须取唯一值的约束条件
ALTER TABLE Course ADD UNIQUE(Cname)

索引	1.创建索引的目的：加快查询速度
2.B+树索引：具有动态平衡的优点
HAS索引：具有查找速度快的特点。索引是关系数据库的内部实现技术，属于内模式的范畴
3.CREATE INDEX语句定义索引时，可以定义索引是唯一索引、非唯一索引或聚簇索引。
4.CREATE CLUSTER INDEX Stusname ON Student(
Sname)在Student表的Sname列上建立一个聚簇索引。在最经常查询的列上建立聚簇索引以提高查找效率。一个基本表最多只能建立一个聚簇索引。
5.
CREATE UNIQUE INDEX Stusno ON Student(Sno)；
CREATE UNIQUE INDEX Coucno ON Student(Cno)
CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno
DESC);
(1)Student表按学号升序建唯一索引
(2)Course表按课程号建唯一索引
(3)SC按学号升序和课程号降序建唯一索引	DROP INDEX<索引名>；
删除索引时，系统会从数据字典中删去有关该索引的描述	





选择
表中
的若
干列	1.查询指定列
SELECT Sno,Sname
FROM Student；
2.选出所有列属性
SELECT *
FROM Student;
3.SELECT子句的<目标表达式>可以表为：算数表达式、字符串常量、函数、列别名
4.使用列别名改变查询结果的列标题
SELECT Sname NAME,’Year of Birth‘BIRTH,2000-Sage BIRTHDAY
FROM Student；
选择表中的若干元组	1.取消重复的行如果没有指定DISTINCT关键词，则缺省为ALL
2.比较大小 WHERE条件句
3.确定范围
WHERE Sage BETWEEN 20 AND 23;
WHERESage NOT BETWEEN 20 AND 23
4.确定集合：IN<值表>,NOT IN<值表>
5.字符匹配
(1)查询固定字符
WHERE Sno LIKE ‘200215’
(2)匹配串为含通配符的字符串。WHERE Sname NOT LIKE ‘刘%’查询所有不姓刘的学生
WHERE Sname LIKE ‘欧阳_’查询姓‘欧阳’且全名为三个汉字的学生
WHERE Sname LIKE ‘_阳%’查询名字第二个字为“阳“字的学生
(3)使用换码字符将通配符转义为普通字符
WHERE Cname LIKE ‘DB\\_%I_ _’ESCAPE’\\’
ESCAPE’\\’表示为”\\”为换码字符。
6.涉及空值的查询IS NULL 或IS NOT NULL
7.多重条件查询
IN{…}可用OR来代替
AND的优先级高于OR
ORDER BY子句	1.ASC升序，DESC降序，缺省值为升序
2.当排序列含空值时:ASC空值元组最后显示；DESC空值元组最先显示
FROM Student
ORDER BY Sdept，Sage DESC查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列
聚集函数	1.计数
COUNT([DISTINCT|ALL]*)
COUNT([DISTINCT|ALL]<列名>)
SELECT COUNT(DISTINCT Sno)查询选修了课程的学生人数
2.计算平均值
AVG([DISTINCT|ALL]<列名>)
SELECT AVG(GRADE)
FROM SC 
WHERE Cno=’1’;计算1号课程的学生平均成绩
3.计算总和
SUM([DISTINCT|ALL]<列名>)
SELECT SUM(Credit)
FROM SC,Course
WHERE Sno=’200213012’ AND SC.Cno=Course.Cno
查询学号为200213012的学生选修课程的总学分 
GROUP BY子句	1.对查询结果分组后，聚集函数分别作用于每个组
2.作用对象是查询的中间结果表
3.按指定的一列或多列值分组，值相等的为一组
(例1)
SELECT Cno，COUNT(Sno)
FROM SC
GROUP BY Cno；
求各个课程号及相应的选课人数
(例2)
SELECT Sno
FROM SC
GROUP BY Sno
HAVING COUNT(*)>3;
查询选修了3们以上课程的学生学号
4.HAVING短语作用于组，从中选择满足条件的组。WHERE作用于基本表或视图，从中选择满足条件的元组
",2022.10.17课堂反思(原本是做的一个知识梳理的表格图，但是这里不能上传图片),2022-11-03 19:16:02
2020213348,"


连
接
查
询










连
接
查
询	等值连接与非等值连接查询	等值连接:连接运算符为=
SELECT Student.*,SC.*
FROM Student,SC
WHERE Student.Sno=SC.Sno
查询结果会出现重复项Student.Sno和SC.Sno
		自然连接：去掉重复项
SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno
,Grade
FROM Student,SC
WHERE Student.Sno=SC.Sno

	自身连接	1.概念：一个表与其自己进行连接，需要给表起别名以示区别。由于所有属性名都是同名属性，因此必须使用别名前缀。
SELECT FIRST.Cno,SECOND.Cpno
FROM Course FIRST,Course SECOND
WHERE FIRST.Cpno=SECOND.Cno
查询每一门课的间接先修课
	外连接	1.外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出。
2.左外连接(列出左边关系，如本例中Student)中所有的元组
右外连接，列出右边关系中所有的元组
SELECT Student.Sno,Sname,Ssex,Sage
FROM Student LEFT\\RIGHT OUT JOIN SC ON(Student.Sno=SC.Sno)
	复合条件连接           	1.WHERE子句中含多个连接条件
WHERE Student.Sno=SC.Sno AND SC.Cno=’2’ AND SC.Grade>90;
2.多表连接
FROM Student,SC,Course
嵌
套
查
询	1.一个SELECT-FROM-WHERE语句称为一个查询块
2.将一个查询块嵌套在另一个查询的WHERE子句或HAVING短语的条件中的查询称为嵌套查询    
3.子查询的限制：不能使用ORDER BY语句
4.不相关子查询：由里向外逐层处理，子查询的查询条件不依赖于父查询
  相关子查询：子查询的查询条件依赖于父查询
首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则此元组放入结果表
然后取外层的下一个元组
重复这一过程，直至外层表全部检查完为止
(1)带有IN谓词的子查询
(2)带有比较运算符的子查询
例(相关子查询):
SELECT Sno,Cno
FORM SC x
WHERE Grade>=(SELECT AVG(Grade)
                FROM SC y
                WHERE y.Sno=x.Sno);  这里x、y是SC的两个名称
5.带有ANY或ALL谓语的子查询
	=	<>(不等于)或！=	<	<=	>	>=
ANY	IN	--	<MAX	<=MAX	>MIN	>=MIN
ALL	--	NOT IN	<MIN	<=MIN	>MAX	>=MAX

6.带有EXISTS谓语的子查询
不返回任何数据，若内层查询结果非空，返回逻辑真值“true”；反之返回逻辑假值“false”。
由EXIST引出的子查询其目标表达式通常用*,给出列名无实际意义
NOT EXIST
非空返回假值，空返回真值。
集合查 询	1.集合操作的种类：
并操作(UNION)
SELECT*
FROM Student
WHERE Sdept=‘CS’
UNION\\INTERSECT\\EXCEPT
SELECT*
FROM Student
WHERE Sage<=19;
UNION:将多个查询结果合并起来时，系统自动去掉重复元组
UNION ALL:将多个查询结果合并起来时，保留重复元组
交操作(INTERSECT)
差操作(EXCEPT)参加操作集合的各查询结果的列数必须相同，对应项的数据类型也必须相同

",2022.10.24课堂反思(原本是做的一个知识梳理的表格图，但是这里不能上传图片),2022-11-03 19:16:19
2020213348,"数据更新	插入数据	1.插入元组
(例1)
将一个新学生元组(学号：200215128；姓名：陈冬)插入到Student表中
INSERT 
INTO Student(Sno,Sname,Ssex.Sdept,Sage)
VALUES(‘200215128’,’陈冬’);
此处定义了插入的列顺序和属性
(例2)
将学生张成民的信息插入到Student表中
INSERT 
INTO Student
VALUES(‘200215126’,’张成民‘，’男‘，18，’CS’)；
按顺序未赋值的列，自动赋空值
2.插入子查询结果
(例子)
对每一个系，求学生的平均年龄，并把结果存入数据库
第一步：建表
CREATE TABLE Dept_age
  (Sdept CHAR(15)
   Avg_age SMALLINT);
第二步：插入数据
INSERT
INTO Dept_age(Sdept,Avg_age)
 SELECT Sdept,AVG(Sage)
 FROM Student
 GROUP BY Sdept

 
	修改数据	修改方式：
1.修改某一个元组的值
(例1)
将学生200215121的年龄改为22岁
UPDATE Student
SET Sage=22
WHERE Sno=’200215121’;
2.修改多个元组的值
(例2)
将所有学生的年龄增加1岁
UPDATE Student
SET Sage=Sage+1
3.带子查询的修改语句
(例3)
将计算机科学系全体学生的成绩置零
UPDATE SC
SET Grade=0
WHERE ‘CS’=
（SELECT Sdept
  FROM Student
  WHERE Student.Sno=SC.Sno);

	删除数据	1.删除某一个元组的值
(例1)
删除学号为200215128的学生记录
DELETE
FROM Student
WHERE Sno=‘200215128‘
2.删除多个元组的值
(例2)
删除所有学生的选课记录
DELETE
FROM SC;
3.带子查询的删除语句
(例3)
删除计算机科学系所有学生选课记录
DELETE
FROM SC
WHERE ‘CS’=
     (SELECT Sdept
      FROM Student
      WHERE Student.Sno=SC.Sno);
视图	特点	1.虚表，从一个基本表或几个基本表(或视图)导出的表
2.只存放视图的定义，不存放视图对应的数据
3.基表中的数据发生变化，从视图中查询出的数据也随之改变
	作用	1.简化用户操作
2.使用户能够以多种角度看待同一数据
3.对重构数据库提供了一定程度的逻辑独立性
4.对机密数据提供安全保护
5.适当地利用视图可以更清晰地表达查询
	操作	定义	1.注意
RDBMS执行CREATE VIEW语句时只是把视图定义存入数据字典，并不执行其中的SELECT语句
在对视图查询时，按视图的定义从基本表中将数据查出
(例子)
建立信息系学生的视图
CREATE VIEW IS_Student
AS
SELECT Sno,Sname,Sage
FROM Student
WHERE Sdept=’IS’;
WITH CHECK OPTION
该语句表示，对信息系学生的视图进行修改和插入操作时保证该视图只有信息系的学生
2.基于多个基本表的视图
(例)
建立信息系选修了1号课程的学生视图
CREATE VIEW IS_S1(Sno,Sname,Grade)
AS
SELECT Student.Sno,Sname,Grade
FROM Student,SC
WHERE Sdept=’IS’ AND Student.Sno=SC.Sno AND SC.Cno=’1’;
3.带表达式的视图
(例)
定义一个反映学生出生年份的视图
CREATE VIEW BT_S(Sno,Sname,Sbirth)
AS
SELECT Sno,Sname,2020-Sage
FROM Student;
4.分组视图
(例)
将学生的学号及他的平均成绩定义为一个视图
CREATE VIEW S_G(Sno,Gavg)
AS
SELECT Sno,AVG(Grade)
FROM SC
GROUP BY Sno;
5.不指定属性列
(例)将Student表中所有女生记录定义为一个视图
CREATE VIEW F_Student(F_Sno,name,sex.age,dept)
AS
SELECT*
FROM Student
WHERE Sex=’女‘；
修改基本表Student的结构后，Student表与F_Student视图的映像关系被破坏，导致视图无法工作。
6.删除视图
DROP VIEW <视图名>;
从语句字典中删除指定的视图定义
如果视图上导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除。
DROP VIEW BT_S
DROP VIEW IS_S1 CASCADE
		查询	(例)
查询选修了1号课程的信息系学生(视图可以与基本表进行连接)
SELECT IS_Student.Sno,Sname
FROM IS_Student,SC
WHERE IS_Student.Sno=SC.Sno AND SC.Cno=’1’;
视图消解法的局限：有些情况下不能生成正确查询
		更新	(例)将信息系学生视图IS_Student中学号200215122的学生姓名改为”刘辰“
UPDATE IS_Student
SET Sname=’刘辰‘
WHERE Sno=’200215122’
实质上是转换成对基本表的更新
局限：有些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新
允许对行列子集视图进行更新
对其他类型视图的更新，不同系统又不同的限制
",2022.10.31课堂反思(原本是做的一个知识梳理的表格图，但是这里不能上传图片),2022-11-30 21:33:18
2020213348,"数据库安全性概述	1.非法使用数据库的情况：
编写程序绕过DBMS及其授权机制。
直接或编写应用程序执行非授权操作
通过多次合法查询数据库从中推导出一些保密数据
2.计算机系统中安全措施是一级一级层层设置
用户DBMSOSDB
先进行用户标识和鉴别—>数据库安全保护—>操作系统安全保护—>数据密码存储
3.数据库安全性控制的常用方法：
用户标识和鉴别
存取控制
视图
审计
密码存储
数据库安全性控制	用户标识与鉴别	系统提供的最外层安全保护措施
1.用户标识
2.口令：系统核对口令以鉴别用户身份。
3.用户名和口令易被窃取：每个用户预先约定好一个计算过程或者函数

	存取控制	1.存取控制机制组成：
定义用户权限
合法权限查询
用户权限定义和合法检查机制一起组成了DBMS安全子系统
2.存取控制方法
自主存取控制：C2级，灵活
强制存取控制：B1级。严格
	自主存取控制方法(DAC)	1.用户权限组成：数据对象+操作类型
2.定义用户存取权限称为授权，定义用户可以在哪些数据库对象上进行哪些类型的操作。
	授权与回收	1.发出GRANT：DBA、数据库对象创建者(Owner)、拥有该权限的用户
2.接受权限的用户：一个或多个具体用户、PUBLIC(全体用户)
3.WITH GRANT OPTION子句：指定就可以再授予，不指定不能传播
4.例子
（把对Student表和Course表的全部权限授予用户U2和U3）
GRANT ALL PRIVILIGES
ON TABLE Student，Course
TO U2,U3；
(把查询Student表和修改学生学号的权限授给用户U4)
GRANT UPDATE(Sno),SELECT
ON TABLE Student
TO U4
(把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户)
GRANT INSERT
ON TABLE SC
TO U5
WITH GRANT OPTION   传播权限
5.REVOKE
授予的权限可以由DBA或者其他授权者用REVOKE语句收回
(例子)
(把用户U4修改学生学号的权限收回)
REVOKE UPDATE(Sno)
ON TABLE Student
FROM U4
系统还会级联收回从U5处获得的权限
6.总结
DBA：拥有所有对象的所有权限(不同的权限授予不同的用户)
用户:拥有自己建立的对象的全部的操作权限。GRANT授予其他用户
被授权的用户：继续授权许可：可以再授予
所有授予出去的权力在必要时又可以用REVOKE语句收回
	数据库角色	1.概念：数据库是被命名的一组与数据库操作相关的权限。角色是权限的集合，可以为一组具有相同权限的用户创建一个角色。简化授权的过程
2.步骤：
角色的创建    
给角色授权
将一个角色授予其他的角色或用户
角色权限的收回
3.(例)
创建一个角色R1
CREATE ROLE R1
使用GRANT语句，使角色R1拥有Student表的SELECT、UPDATE、INSERT权限
GRANT SELECT ,UPDATE,INSERT
ON TABLE Student
TO R1;
将这个角色授予王平，张明，使他们具有角色R1所包含的全部权限。
GRANT R1
TO 王平，张明；
一次性通过R1来回收王平的这3个权限
REVOKE R1
FROM 王平
	强制存取控制方法(MAC)	1.自主存取控制缺点：
可能存在数据的”无意泄露“
原因：这种机制仅仅通过对数据的存取权限来进行性安全控制，而数据本身并无安全性标记。
解决：对系统控制下的所有主客体实施强制存取控制策略。
2.强制存取控制：保证更高程度的安全性
用户能不能直接感知或进行控制
适用于对数据有严格控制而固定密级分类的部门（军事部门，政府部门）
3.主体是系统中的活动实体
DBMS所管理的实际用户
代表用户的各进程
   客体是系统中的被动实体，是受主体操纵的
文件、基表、索引、视图
4.敏感度标记（绝密、机密、可信、公开)
   主体的敏感度标记称为许可证级别
   客体的敏感度标记称为密级
5.强制存取控制规则
（1）仅当主体的许可级别大于或等于客体的密级时，该主体才能读取相应的客体
（2）仅当主体的许可证级别等于客体密级时，该主体才能写相应的客体
修正规则：
主体的许可证级别<=客体的密级—>主体能写客体
规则的共同点：禁止拥有高许可证级别的主体更新低密级的数据对象

	MAC和DAC	1.DAC于MAC共同构成DBMS的安全机制
2.实现MAC时首先要实现DAC
   原因：较高安全性级别提供的安全保护要包含较低级别的所有保护
3.先进行DAC检查，通过DAC检查的数据对象再由系统进行MAC检查，只有通过MAC检查的数据对象可存取。
视图机制	1.把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护
2.主要功能是提供数据独立性，无法完全满足要求
3.间接实现了支持存取谓语的用户权限定义
4.（例）
建立视图
CREATE VIEW CS_Student
AS
SELECT *
FROM Student
WHERE Sdept=’CS’
在视图上进一步定义存取权限
GRANT SELECT
ON CS_Student
TO 王平;
审计	1.概念
审计日志：将用户对数据库的所有操作记录在上面
DBA利用审计日志找出非法存取数据的人、事件和内容
C2以上安全级别的DBMS必须具有
2.分类：
用户级审计：针对之间创建的数据库表或者视图进行审计
记录所有用户度这些表或者视图的一切成功或不成功的访问要求以及各种类型的SQL操作
系统审计：DBA设置
检测成功或失败的登录要求
检测GRANT和REVOKE操作以及其他数据库级权限下的操作。
3.AUDIT语句：设置审计功能
  NOAUDIT语句：取消审计功能
4.例子
对修改SC表结构或修改SC表数据的操作进行审计
AUDIT ALTER,UPDATE
ON SC;
取消对SC表的一切审计
NOAUDIT ALTER,UPDATE
ON SC;
数据加密	1.防止数据库中的数据在存储和传输中失密的有效手段
2.加密方法：替换方法、置换方法、混合方法
3.DBMS中的数据加密
统计数据库安全性	1.统计数据库，允许用户查询聚集类型的信息（合计、平均等）
               不允许查询单个记录信息
2.统计数据库中特殊的安全性问题：隐蔽的信息通道
                                 能从合法的查询中推导出不合法的信息
3.规则：任何查询至少要涉及N（N足够大)个以上的记录
         任意两个查询的相交数据项不能超过M个
         任一用户的查询次数不能超过1+（N-2）/M
4.数据库安全机制的设计目标：视图破坏安全的人所花费的代价>得到的利益
",2022.11.14课堂反思(原本是做的一个知识梳理的表格图，但是这里不能上传图片),2022-11-30 21:34:08
2020213348,习题和实验课，老师进行了习题的讲解，我也对答案进行了更正，使用了更多的方法做出一道题。本节课主要学习运用SQL语句进行一些较为复杂的查询。实验也是对前几次建立的数据库和基本关系表，使用更高级的语言进行复杂的查询，例如双层嵌套，相关子查询等。,11.7,2022-11-30 21:37:54
2020213348,"数据库安全性概述	1.非法使用数据库的情况：
编写程序绕过DBMS及其授权机制。
直接或编写应用程序执行非授权操作
通过多次合法查询数据库从中推导出一些保密数据
2.计算机系统中安全措施是一级一级层层设置
用户DBMSOSDB
先进行用户标识和鉴别—>数据库安全保护—>操作系统安全保护—>数据密码存储
3.数据库安全性控制的常用方法：
用户标识和鉴别
存取控制
视图
审计
密码存储
数据库安全性控制	用户标识与鉴别	系统提供的最外层安全保护措施
1.用户标识
2.口令：系统核对口令以鉴别用户身份。
3.用户名和口令易被窃取：每个用户预先约定好一个计算过程或者函数

	存取控制	1.存取控制机制组成：
定义用户权限
合法权限查询
用户权限定义和合法检查机制一起组成了DBMS安全子系统
2.存取控制方法
自主存取控制：C2级，灵活
强制存取控制：B1级。严格
	自主存取控制方法(DAC)	1.用户权限组成：数据对象+操作类型
2.定义用户存取权限称为授权，定义用户可以在哪些数据库对象上进行哪些类型的操作。
	授权与回收	1.发出GRANT：DBA、数据库对象创建者(Owner)、拥有该权限的用户
2.接受权限的用户：一个或多个具体用户、PUBLIC(全体用户)
3.WITH GRANT OPTION子句：指定就可以再授予，不指定不能传播
4.例子
（把对Student表和Course表的全部权限授予用户U2和U3）
GRANT ALL PRIVILIGES
ON TABLE Student，Course
TO U2,U3；
(把查询Student表和修改学生学号的权限授给用户U4)
GRANT UPDATE(Sno),SELECT
ON TABLE Student
TO U4
(把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户)
GRANT INSERT
ON TABLE SC
TO U5
WITH GRANT OPTION   传播权限
5.REVOKE
授予的权限可以由DBA或者其他授权者用REVOKE语句收回
(例子)
(把用户U4修改学生学号的权限收回)
REVOKE UPDATE(Sno)
ON TABLE Student
FROM U4
系统还会级联收回从U5处获得的权限
6.总结
DBA：拥有所有对象的所有权限(不同的权限授予不同的用户)
用户:拥有自己建立的对象的全部的操作权限。GRANT授予其他用户
被授权的用户：继续授权许可：可以再授予
所有授予出去的权力在必要时又可以用REVOKE语句收回
	数据库角色	1.概念：数据库是被命名的一组与数据库操作相关的权限。角色是权限的集合，可以为一组具有相同权限的用户创建一个角色。简化授权的过程
2.步骤：
角色的创建    
给角色授权
将一个角色授予其他的角色或用户
角色权限的收回
3.(例)
创建一个角色R1
CREATE ROLE R1
使用GRANT语句，使角色R1拥有Student表的SELECT、UPDATE、INSERT权限
GRANT SELECT ,UPDATE,INSERT
ON TABLE Student
TO R1;
将这个角色授予王平，张明，使他们具有角色R1所包含的全部权限。
GRANT R1
TO 王平，张明；
一次性通过R1来回收王平的这3个权限
REVOKE R1
FROM 王平
	强制存取控制方法(MAC)	1.自主存取控制缺点：
可能存在数据的”无意泄露“
原因：这种机制仅仅通过对数据的存取权限来进行性安全控制，而数据本身并无安全性标记。
解决：对系统控制下的所有主客体实施强制存取控制策略。
2.强制存取控制：保证更高程度的安全性
用户能不能直接感知或进行控制
适用于对数据有严格控制而固定密级分类的部门（军事部门，政府部门）
3.主体是系统中的活动实体
DBMS所管理的实际用户
代表用户的各进程
   客体是系统中的被动实体，是受主体操纵的
文件、基表、索引、视图
4.敏感度标记（绝密、机密、可信、公开)
   主体的敏感度标记称为许可证级别
   客体的敏感度标记称为密级
5.强制存取控制规则
（1）仅当主体的许可级别大于或等于客体的密级时，该主体才能读取相应的客体
（2）仅当主体的许可证级别等于客体密级时，该主体才能写相应的客体
修正规则：
主体的许可证级别<=客体的密级—>主体能写客体
规则的共同点：禁止拥有高许可证级别的主体更新低密级的数据对象

	MAC和DAC	1.DAC于MAC共同构成DBMS的安全机制
2.实现MAC时首先要实现DAC
   原因：较高安全性级别提供的安全保护要包含较低级别的所有保护
3.先进行DAC检查，通过DAC检查的数据对象再由系统进行MAC检查，只有通过MAC检查的数据对象可存取。
视图机制	1.把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护
2.主要功能是提供数据独立性，无法完全满足要求
3.间接实现了支持存取谓语的用户权限定义
4.（例）
建立视图
CREATE VIEW CS_Student
AS
SELECT *
FROM Student
WHERE Sdept=’CS’
在视图上进一步定义存取权限
GRANT SELECT
ON CS_Student
TO 王平;
审计	1.概念
审计日志：将用户对数据库的所有操作记录在上面
DBA利用审计日志找出非法存取数据的人、事件和内容
C2以上安全级别的DBMS必须具有
2.分类：
用户级审计：针对之间创建的数据库表或者视图进行审计
记录所有用户度这些表或者视图的一切成功或不成功的访问要求以及各种类型的SQL操作
系统审计：DBA设置
检测成功或失败的登录要求
检测GRANT和REVOKE操作以及其他数据库级权限下的操作。
3.AUDIT语句：设置审计功能
  NOAUDIT语句：取消审计功能
4.例子
对修改SC表结构或修改SC表数据的操作进行审计
AUDIT ALTER,UPDATE
ON SC;
取消对SC表的一切审计
NOAUDIT ALTER,UPDATE
ON SC;
数据加密	1.防止数据库中的数据在存储和传输中失密的有效手段
2.加密方法：替换方法、置换方法、混合方法
3.DBMS中的数据加密
统计数据库安全性	1.统计数据库，允许用户查询聚集类型的信息（合计、平均等）
               不允许查询单个记录信息
2.统计数据库中特殊的安全性问题：隐蔽的信息通道
                                 能从合法的查询中推导出不合法的信息
3.规则：任何查询至少要涉及N（N足够大)个以上的记录
         任意两个查询的相交数据项不能超过M个
         任一用户的查询次数不能超过1+（N-2）/M
4.数据库安全机制的设计目标：视图破坏安全的人所花费的代价>得到的利益",11.14数据库安全性(原本是做的一个知识梳理的表格图，但是这里不能上传图片),2022-12-27 16:40:59
2020213348,"数据库完整性：数据的正确性和相容性。防止数据库中存在不正确的数据，防范对象是不合语义的、不正确的数据。为了维护数据库的完整性，DBMS必须提供定义完整性约束条件的机制，提供完整性检查的方法、进行违规处理。
1.实体完整性。插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。包括：检查主码	值是否唯一，如果不唯一则拒绝插入或修改。检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改。
2.参照完整性。用REFERENCES短语指明这些外码参照哪些表的主码。
3.用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求。CREATE TABLE时定义列值非空（NOT NULL），列值唯一（UNIQUE）,检查列值是否满足一个布尔表达式（CHECK）。插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足。如果不满足则操作被拒绝执行。在CHECK TABLE 时可以用CHECK短语定义元组上的约束条件，即元组级的限制。
4.完整性约束命名子句。CONSTRAINT约束，可以使用ALTER TABLE语句修改表中的完整性限制，可以先删除原来的约束条件，再增加新的约束条件。
5.域中的完整性限制。SQL支持域的概念，并可以用CREATE DOMAIN语句建立一个域以及满足该域应该满足的完整性约束条件。
6.触发器时用户定义在关系表上的一类由事件驱动的特殊过程。由服务器自动激活，可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力。CREATE TRIGGER <触发器名>，触发事件：INSERT、DELETE、UPDATE。如果该触发器为语句级触发器，那么执行完该语句后，触发动作只发生一次，如果是行级触发器，触发动作将执行1000次。触发器的执行是由触发事件激活的，并由数据库服务器自动执行。一个数据表上可能定义了多个触发器。
数据库的完整性是为了保证数据库中存储的数据是正确的。
",11.21数据库完整性(原本是做的一个知识梳理的表格图，但是这里不能上传图片),2022-12-27 18:54:57
2020213348,"关系模式由五部分组成，R(U,D,DOM,F)R为关系名，U为组成关系的属性名集合，D为属性组U中所来自的域，DOM属性向域的映象集合，F属性间数据的依赖关系集合。
1.	数据依赖。完整性约束的表现形式，限定属性取值范围，例如学生成绩必须在0-100之间。定义属性值间的相互关连（主要体现于值的相等与否），这就是数据依赖，它是数据库模式设计的关键。
2.	规范化。规范化理论，用来改造关系模式，通过分解关系模式来消解其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
3.	范式是符合某一种级别的关系模式的集合。关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。范式的种类分为第一范式，第二范式，第三范式，BC范式，第四范式和第五范式。一个第一级的范式的关系模式，可以通过模式分解转换成若干个高一级范式的关系模式的集合，这个过程就叫规范化。
1NF：如果一个关系模式R的所有属性都是不可分的基本数据项，则R属于第一范式。第一范式是对关系模式最起码的要求，不满足第一范式的数据库模式不能称为关系数据库。但是满足第一范式的关系模式并不一定是一个好的关系模式。
2NF：若R属于第一范式，且每一个非主属性完全函数依赖于码，则R属于第二范式。采用投影分解法将一个1NF的关系分解为多个2NF的关系，可以在一定程度上减轻原1NF中存在的插入异常、删除异常、数据冗余量、修改复杂等问题。
3NF:若关系R属于第三范式，则每一个非主属性既不部分依赖于码也传递依赖于码。
BCNF：（1）所有非主属性对每一个码都是完全函数依赖。（2）所有的主属性对每一个不包含它的码也是完全函数依赖。（3）没有任何属性完全函数依赖于非码的任何一组属性。
模式分解：（1）分解具有无损连接性 （2）分解要保持函数依赖 （3）分解既要保持函数依赖，又要具有无损连接性。、
小节：若要求分解具有无损连接性，那么模式一定能够达到4NF，若要求分解保持函数依赖，那么模式分解一定能够达到3NF，但不一定能够达到BCNF，若要求分解既具有无损连接性，有保持函数依赖，则模式分解一定能够达到3NF,但不一定能够达到BCNF。
",（后面的反思按照学习的章节来写，不太记得时间了）关系数据理论,2022-12-27 20:28:49
2020213351,通过第一章绪论的学习，我了解了数据、数据库、数据系统的基本含义，数据库系统包含了数据库、应用系统、数据库管理系统、数据库管理员，同时还学习到了两大类数据模型，对实体、属性等概念也有了一个大概的了解。  这节课我学到了概念模型的一种表示方法E- R方法，通过绘画实体与实体之间的联系来表示概念模型，其中实体型用矩形，联系用棱形，属性用椭圆，通过课上的实例的训练，我能够对生活中的一些活动运用E-R方法来构建概念模型，同时也理解了联系本身也是实体型，比如销售这个联系就有属性月销售量，不过我对数据的增删查改的具体算法比较模糊，希望可以在之后的课中继续努力学习。,绪论,2022-09-07 00:42:46
2020213351,通过第二次课的学习，我了解了三大数据模型——层次模型、网状模型和关系模型，其中层次模型的结构比较清晰，存储结构有子女-兄弟链接法和层次序列法，不过它不能很好的表示多对多联系；网状模型可以表示多对多联系，但是当数据量增大后，它的结构会变得很复杂；关系模型的结构比较清晰，实体、属性都可以用一张表来表示，联系也能用表来表示，关系模型的数据结构中，元组表示表的一行，域表示属性的范围，主码可以唯一确定一个元组，分量是元组中的一个属性值，关系模型也是现在数据系统最常用的数据模型，我之前在mysql中见到的表好像也是这个。最后我对这些数据模型的代码部分还是不了解，希望可以在之后的课中努力学习,绪论2,2022-09-13 10:01:30
2020213351,通过本节课的学习，我对关系数据库有了一个大概的认识，对用户来说，关系数据库就是一张表，同时我了解了域、笛卡尔积等概念，其中，元组对应表的一行，分量对应元组中的一个元素，域对应一列。关系是笛卡尔积的子集，关系中的每行为元组，每列为属性，候选码是唯一能标识一个元组的属性组，全码是所有属性组都是候选码的情况，主码是一个候选码，任意两个元组的候选码不能相同，同时我还了解了关系模式和关系数据库模式，关系是关系模式某一时刻的状态或内容，关系数据库是关系数据库模式的某一时刻的状态或内容，在一个给定的应用领域中，所有关系的集合是关系数据库。最后我希望能够学好关系数据库并了解需要的命令或代码,关系数据库,2022-09-24 15:08:22
2020213351,通过本节课的学习，我了解了关系的完整性，实体完整性中的规则说一个基本关系的主属性的值不能为空，参照完整性定义了关系的外码，一个基本关系的一组属性不是该关系的码，但是与另一个基本关系的主码相对应，则有了参照与被参照的关系，这个外码要么为空，要么是被参照关系中主码的值，此外，还有着非常自由的用户定义的完整性，在关系代数中，我学习了传统的集合运算，包括并、差、交，还有笛卡尔积，笛卡尔积就是两个关系的元组的排列组合,关系数据库2,2022-11-14 23:27:55
2020213351,通过本节课的学习，我了解了专门的关系运算，连接简单点说就是两个关系横向拼接，而象集则是属性组中某个属性值在某个属性组上分量的集合，然后就是选择，投影，连接以及除运算，其中选择，比较简单，就是运用一些比较运算符进行查询，投影就是从关系中选择几个属性列组成一个新的关系，值得注意的是，投影会删除重复的行，等值连接就是将属性组相等的元组进行连接，而自然连接要求进行比较的必须是同名的属性组，而且会去除重复列与行，被去除的元组就是悬浮元组，而把悬浮元组保留在关系中，并且在其它属性上为空的就是外连接，只保留左边悬浮元组的是左外连接，同理。除运算就是说当两个关系有相同值域的属性组时，属性a在关系R的象集包含关系s在属性组的投影，得到的结果就是属性a的分量的集合，除了学到了一些基本的知识之外，我通过老师的加强训练，对综合运用多种关系代数运算进行查询有了深刻的认识，希望能在今后的学习中用代码加强认识。,关系数据库3,2022-11-14 23:51:51
2020213351,"通过本节课的学习，我了解了SQL的特点，它是一种面向集合的操作方式，语言简洁易学易用，而它的核心也是围绕着表、视图、模式等结构来展开，之后我学习了数据的定义，模式定义是CREATE SCHEMA 模式名AUTHORIZATION用户名，删除模式是DROP SCHEMA 模式名CASADE|RESTRICT，cascade是级联，也就是删除的时候连着改模式所有的对象删除，restrict限制表示若该模式下有对象，则拒绝删除，定义表则是create table 列名和完整性约束条件，特别要注意的是外码的代码编写，和树上的例子些许不同，修改基本表用alter table，删除表用drop table，同样用到了cascade和restrict，默认restrict。数据查询也是重点，查询一般就是select from where ，单表查询比较简单，select后面的表达式可以是算术表达式，还可以是字符串常量或者函数，distinct可以消除取值重复的行，where语句可以查询的条件有比较、范围、集合、字符匹配、空值或者多重条件，范围用between and，集合用in，字符匹配用like，其中like中匹配串%表示任意长度的字符串，_表示任意单个字符，escape \\表示换码字符，order by子句表示查询结果按照一个或多个属性列的升（ASC）或降序(DESC)排列，聚集函数用来计算，where语句不能用聚集函数，group by语句将查询结果按照一个或多列属性分组，用having进行筛选，然后就是等值连接和自然连接，等值连接用代码很轻松就能解决，而自然连接就是等值连接把目标中重复的列去掉就行，也就是select只选一个重复列，自身连接需要取别名，左外连接用left outer join 表名 on (fffffff),多表连接是先执行两个表的连接操作，然后将执行i结果与第三个表连接。",关系数据库标准语言SQL,2022-11-15 00:21:08
2020213351,通过这节课的学习，我了解到了嵌套查询，子查询条件不依赖外层父查询的称为不相关子查询，而内层查询条件依赖于父查询的就是相关子查询，其中含有in谓词的一般子查询结果是集合，除此之外还有any和all谓词的子查询，不过这些查询基本上可以用聚焦函数来实现，exists子查询中内层查询非空则会返回真值，而not exists表示内层结果为空的时候才是真值，集合查询的操作很简单，并或交，通过老师做了老师给的题目后，我意识到了自己逻辑的不足，希望在代码上加以改正。,关系数据库标准语言SQL(2),2022-11-18 18:17:09
2020213351,这节课主要是习题的训练以及实验代码的编写，习题的部分都还好，是上节课学过的查询语句，之后就是实验课的关于建立数据库和表的代码实现，其中建立数据库很简单，而建立表除了要考虑表与表之间的参照关系外，还要注意主键以及非空，这次的实验课中，我为了在今后的查询中更加得心应手，更方便的插入与更改数据，选择了navicat可视化表的插入与更新，建立表以及数据库还是用的sql server，最后就是外键，外码的定义似乎和树上的代码有着些许的不同，书上的算是伪代码，直接写外码的名后在后面加上reference 参照的表就可以了。,关系数据库标准语言SQL(3),2022-11-18 19:02:01
2020213351,这节课是网上预习课，我在这节课中学到了空值的处理，其中空值的判断是用is null 和 is not null 来判断，空值与另一个空值的算术运算为空值，比较运算为unknown，同时我学到了视图，视图的意思和c语言中的指针差不多，类似引用，视图中不存放表内的数据，create view 视图名 as 子查询语句，关系数据库管理系统执行创建视图的语句时，并不执行子查询语句，而是在对视图进行查询的时候才执行，with check option表示对视图进行更新、插入、删除操作时，需要保证视图定义中的条件，删除视图时用cascade只删除视图，不删除表，视图消解表示系统先从数据字典中取出视图的定义，然后把定义中的查询和用户的查询结合起来，转换为基本表的查询，更新update set，插入insert into，删除delete from，有些视图不能更新，比如视图由两个以上基本表导出，视图内的字段来自聚集函数，定义内有group by，distinct等，不允许更新。,关系数据库标准语言SQL(4),2022-11-18 19:15:43
2020213352,"1.1数据库系统概述
·数据（数据库中存储的基本对象）：定义、种类、特点
·数据库：定义、基本特征
·数据库管理系统（DBMS）：位于用户与操作系统之间的一层数据管理软件，是基础软件，是一个大型复杂的软件系统，用于科学地组织和存储数据、高效地获取和维护数据。*主要功能
·数据库系统（DBS在计算机系统中引入数据库后的系统构成）：构成

1.2数据模型
·分为两类：①概念模型②逻辑模型和物理模型
·组成要素：数据结构、数据操作、完整性约束条件
·信息世界中的基本概念：实体、属性、码、域、实体型、实体集、联系
·两个实体型之间的联系：1:1、1:n、m:n
·实体－联系方法：E-R图",绪论1,2022-09-11 15:51:55
2020213352,"1.最常用的数据模型
1.1非关系模型
·层次模型(Hierarchical Model)
-层次模型是数据库系统中最早出现的数据模型；
-层次模型用树形结构来表示各类实体以及实体间的联系
-层次模型的特点：结点的双亲是唯一的只能直接处理一对多的实体联系；每个记录类型可以定义一个排序字段，也称为码字段；任何记录值只有按其路径查看时，才能显出它的全部意义；没有一个子女记录值能够脱离双亲记录值而独立存在
-层次模型的完整性约束条件：无相应的双亲结点值就不能插入子女结点值；如果删除双亲结点值，则相应的子女结点值也被同时删除；更新操作时，应更新所有相应记录，以保证数据的一致性
-层次数据模型的存储结构：邻接法；链接法
-层次模型的优缺点：
优点：层次模型的数据结构比较简单清晰；查询效率高，性能优于关系模型，不低于网状模型；层次数据模型提供了良好的完整性支持。缺点：多对多联系表示不自然；对插入和删除操作的限制多，应用程序的编写比较复杂；查询子女结点必须通过双亲结点；由于结构严密，层次命令趋于程序化

·网状模型(Network Model)
-网状模型与层次模型的区别：网状模型允许多个结点没有双亲结点；网状模型允许结点有多个双亲结点；网状模型允许两个结点之间有多种联系（复合联系）；网状模型可以更直接地去描述现实世界；层次模型实际上是网状模型的一个特例
-网状数据模型的优缺点：优点：能够更为直接地描述现实世界，如一个结点可以有多个双亲；具有良好的性能，存取效率较高。缺点：结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握；DDL、DML语言复杂，用户不容易使用
1.2关系模型(Relational Model)  
关系数据模型的优缺点：优点：建立在严格的数学概念的基础上；概念单一（实体和各类联系都用关系来表示；对数据的检索结果也是关系）；关系模型的存取路径对用户透明（具有更高的数据独立性，更好的安全保密性；简化了程序员的工作和数据库开发建立的工作）。
缺点：存取路径对用户透明导致查询效率往往不如非关系数据模型；为提高性能，必须对用户的查询请求进行优化增加了开发DBMS的难度。
1.3面向对象模型(Object Oriented Model）
1.4对象关系模型(Object Relational Model)",绪论2,2022-09-18 22:49:43
2020213352,"2.1  关系数据结构及形式化定义
2.1.1  关系
·单一的数据结构----关系
现实世界的实体以及实体间的各种联系均用关系来表示
·逻辑结构----二维表
从用户角度，关系模型中数据的逻辑结构是一张二维表
·建立在集合代数的基础上
1.域2.笛卡尔积（元组，分量）3.关系（元组，单元关系与二元关系，关系的表示，属性，码（候选码，全码，主码），三类关系（基本关系，查询表，视图表），基本关系的性质）
2.1.2  关系模式
·关系模式是型
·关系是值
·关系模式是对关系的描述
关系模式通常可以简记为R (U)或R (A1，A2，...，An)
关系模式：对关系的描述（静态的、稳定的）
关系：关系模式在某一时刻的状态或内容（动态的、随时间不断变化的）
2.1.3  关系数据库
关系数据库：在一个给定的应用领域中，所有关系的集合构成一个关系数据库
·关系数据库的型与值

2.2  关系操作
常用的关系操作
·查询：选择、投影、连接、除、并、交、差
·数据更新：插入、删除、修改
·查询的表达能力是其中最主要的部分
·选择、投影、并、差、笛卡尔基是5种基本操作
关系操作的特点
·集合操作方式：操作的对象和结果都是集合，一次一集合的方式
关系代数语言用对关系的运算来表达查询要求代表：ISBL关系演算语言：用谓词来表达查询要求元组关系演算语言谓词变元的基本对象是元组变量代表：APLHA,QUEL域关系演算语言谓词变元的基本对象是域变量代表：QBE具有关系代数和关系演算双重特点的语言代表：SQL（StructuredQueryLanguage）",第二章 关系数据库1,2022-11-08 15:35:12
2020213352,"2.3  关系的完整性
2.3.1 关系的三类完整性约束
实体完整性和参照完整性：关系模型必须满足的完整性约束条件称为关系的两个不变性，应该由关系系统自动支持用户定义的完整性：应用领域需要遵循的约束条件，体现了具体领域中的语义约束

2.3.2 实体完整性
规则2.1实体完整性规则（EntityIntegrity）若属性A是基本关系R的主属性，则属性A不能取空值
实体完整性规则的说明(1)实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。(2)现实世界中的实体是可区分的，即它们具有某种唯一性标识。(3)关系模型中以主码作为唯一性标识。(4)主码中的属性即主属性不能取空值。主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性

2.3.3 参照完整性
1. 关系间的引用2.外码3.参照完整性规则
规则2.2参照完整性规则若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：或者取空值（F的每个属性值均为空值）或者等于S中某个元组的主码值

2.3.4 用户定义的完整性
针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能

2.4  关系代数
2.4.1概述
2.4.2传统的集合运算
并；差；交；笛卡尔积
2.4.3专门的关系运算",第二章 关系数据库2,2022-11-08 15:40:44
2020213352,"2.4.3 专门的关系运算
·选择
（1)选择又称为限制（2)选择运算符的含义（3)选择运算是从关系R中选取使逻辑表达式F为真的元组，是从行的角度进行的运算
·投影
（1）投影运算符的含义（2）投影操作主要是从列的角度进行运算；但投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）
·连接
（1）连接也称为θ连接（2）连接运算的含义（3）两类常用连接运算：等价连接，自然连接（4）外连接，左外连接，右外连接
·除
（1）除操作是同时从行和列角度进行运算
关系操作：（1）查询：选择、投影、连接、除、并、交、差（2）数据更新：插入、删除、修改

",第二章 关系数据库3,2022-11-10 16:09:47
2020213352,"3.1 SQL概述
·SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言·SQL是一个通用的、功能极强的关系数据库语言
3.1.1  SQL 的产生与发展
3.1.2  SQL的特点1.综合统一2.高度非过程化3.面向集合的操作方式4.以同一种语法结构提供多种使用方式5.语言简洁，易学易用
3.1.3  SQL的基本概念
1.基本表：本身独立存在的表·SQL中一个关系就对应一个基本表·一个(或多个)基本表对应一个存储文件·一个表可以带若干索引·存储文件·逻辑结构组成了关系数据库的内模式·物理结构是任意的，对用户透明2.视图：从一个或几个基本表导出的表·数据库中只存放视图的定义而不存放视图对应的数据·视图是一个虚表·用户可以在视图上再定义视图
3.2 学生-课程数据库
3.3  数据定义
·SQL的数据定义功能: 模式定义、表定义、视图和索引的定义
3.3.1 模式的定义与删除（CASCADE:   删除模式的同时把该模式中所有的数据库对象全部删除RESTRICT:如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。当该模式中没有任何下属的对象时才能执行。）
3.3.2 基本表的定义、删除与修改（每一个基本表都属于某一个模式；一个模式包含多个基本表；RESTRICT：删除表是有限制的。欲删除的基本表不能被其他表的约束所引用，如果存在依赖该表的对象，则此表不能被删除；CASCADE：删除该表没有限制。在删除基本表的同时，相关的依赖对象一起删除）
3.3.3 索引的建立与删除（建立索引的目的：加快查询速度）
3.4数据查询
3.4.1单表查询（查询仅涉及一个表：1、选择表中的若干列2、选择表中的若干元组3、ORDERBY 子句4、聚集函数5、GROUPBY子句）",第三章 关系数据库标准语言SQL 1,2022-12-18 17:57:05
2020213352,"3.4.2连接查询：同时涉及多个表的查询·连接条件或连接谓词：用来连接两个表的条件·连接字段：连接谓词中的列名称·连接条件中的各连接字段类型必须是可比的，但名字不必是相同的
·连接操作的执行过程：1.嵌套循环法2.排序合并法3.索引连接·连接查询分为：一、等值与非等值连接查询；二、自身连接：一个表与其自己进行连接·需要给表起别名以示区别·由于所有属性名都是同名属性，因此必须使用别名前缀；三、外连接·外连接与普通连接的区别：1.普通连接操作只输出满足连接条件的元组2.外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出·左外连接：列出左边关系中所有的元组·右外连接：列出右边关系中所有的元组；四、复合条件连接：WHERE子句中含多个连接条件3.4.3嵌套查询：一个SELECT-FROM-WHERE语句称为一个查询块，将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。子查询的限制：不能使用ORDER BY子句。层层嵌套方式反映了SQL语言的结构化。有些嵌套查询可以用连接运算替代。不相关子查询：子查询的查询条件不依赖于父查询，由里向外逐层处理，即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。相关子查询：子查询的查询条件依赖于父查询，首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表，然后再取外层表的下一个元组重复这一过程，直至外层表全部检查完为止。嵌套查询分为：一、带有IN谓词的子查询；二、带有比较运算符的子查询；三、带有ANY（SOME）或ALL谓词的子查询；四、带有EXISTS谓词的子查询。3.4.4集合查询·集合操作的种类：并操作UNION；交操作INTERSECT；差操作EXCEPT。参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同。3.4.5 Select语句的一般形式






",第三章 关系数据库标准语言SQL  2,2022-12-18 18:05:57
2020213352,"3.5  数据更新3.5.1插入数据·两种插入数据方式1. 插入元组2. 插入子查询结果：可以一次插入多个元组。一、插入元组·功能：将新元组插入指定表中。INTO子句：属性列的顺序可与表定义中的顺序不一致；没有指定属性列；指定部分属性列。VALUES子句：提供的值必须与INTO子句匹配（值的个数、值的类型）。二、插入子查询结果·功能：将子查询结果插入指定表中。插入子查询结果：RDBMS在执行插入语句时会检查所插元组是否破坏表上已定义的完整性规则：实体完整性；参照完整性；用户定义的完整性（NOT NULL约束、UNIQUE约束、值域约束）3.5.2修改数据·功能：修改指定表中满足WHERE子句条件的元组。SET子句：指定修改方式、要修改的列、修改后取值。WHERE子句：指定要修改的元组、缺省表示要修改表中的所有元组。三种修改方式：1. 修改某一个元组的值；2. 修改多个元组的值；3. 带子查询的修改语句。RDBMS在执行修改语句时会检查修改操作是否破坏表上已定义的完整性规则：实体完整性、主码不允许修改、用户定义的完整性（NOT NULL约束、UNIQUE约束、值域约束）。3.5.3  删除数据·功能：删除指定表中满足WHERE子句条件的元组。WHERE子句：指定要删除的元组；缺省表示要删除表中的全部元组，表的定义仍在字典中。三种删除方式：1. 删除某一个元组的值；2. 删除多个元组的值；3. 带子查询的删除语句。3.6  视图·视图的特点：1.虚表，是从一个或几个基本表（或视图）导出的表；2.只存放视图的定义，不存放视图对应的数据；3.基表中的数据发生变化，从视图中查询出的数据也随之改变。·基于视图的操作：查询、删除、受限更新、定义基于该视图的新视图。3.6.1  定义视图·一、建立视图组成视图的属性列名：全部省略或全部指定；子查询不允许含有ORDER BY子句和DISTINCT短语。RDBMS执行CREATE VIEW语句时只是把视图定义存入数据字典，并不执行其中的SELECT语句。在对视图查询时，按视图的定义从基本表中将数据查出。二、删除视图：该语句从数据字典中删除指定的视图定义。▪如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除。▪删除基表时，由该基表导出的所有视图定义都必须显式地使用DROP VIEW语句删除。3.6.2  查询视图·用户角度：查询视图与查询基本表相同。RDBMS实现视图查询的方法：视图消解法：进行有效性检查；转换成等价的对基本表的查询；执行修正后的查询。视图消解法的局限：有些情况下，视图消解法不能生成正确查询。3.6.3  更新视图·更新视图的限制：一些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新。允许对行列子集视图进行更新。对其他类型视图的更新不同系统有不同限制。3.6.4  视图的作用：1. 视图能够简化用户的操作；2. 视图使用户能以多种角度看待同一数据；3. 视图对重构数据库提供了一定程度的逻辑独立性；4. 视图能够对机密数据提供安全保护；5. 适当的利用视图可以更清晰的表达查询。










",第三章 关系数据库标准语言SQL 3,2022-12-18 18:21:56
2020213352,"问题的提出：数据库的一大特点是数据可以共享；数据共享必然带来数据库的安全性问题；数据库系统中的数据共享不能是无条件的共享。4.1  计算机安全性概述4.1.1  计算机系统的三类安全性问题·计算机系统安全性：为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
·三类计算机系统安全性问题：技术安全类、管理安全类、政策法律类。4.1.2  安全标准简介·TCSEC标准·CC标准4.2数据库安全性控制·非法使用数据库的情况：编写合法程序绕过DBMS及其授权机制；直接或编写应用程序执行非授权操作；通过多次合法查询数据库从中推导出一些保密数据。数据库安全性控制的常用方法：用户标识和鉴定、存取控制、视图、审计、密码存储。4.2.1 用户标识与鉴别4.2.2 存取控制4.2.3 自主存取控制方法（通过SQL 的GRANT语句和REVOKE语句实现）4.2.4 授权与回收4.2.5 数据库角色（被命名的一组与数据库操作相关的权限▪角色是权限的集合▪可以为一组具有相同权限的用户创建一个角色▪简化授权的过程）4.2.6 强制存取控制方法（自主存取控制缺点：可能存在数据的“无意泄露”。原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记。解决：对系统控制下的所有主客体实施强制存取控制策略。）4.3  视图机制：把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护。·主要功能是提供数据独立性，无法完全满足要求。间接实现了支持存取谓词的用户权限定义。4.4  审计·审计日志：将用户对数据库的所有操作记录在上面。审计分为用户级审计和系统级审计。AUDIT语句：设置审计功能；NOAUDIT语句：取消审计功能。4.5  数据加密：防止数据库中数据在存储和传输中失密的有效手段·加密的基本思想·加密方法：替换方法、置换方法、混合方法。·DBMS中的数据加密。4.6  统计数据库安全性·统计数据库：允许用户查询聚集类型的信息（如合计、平均值等）；不允许查询单个记录信息。·统计数据库中特殊的安全性问题：隐蔽的信息通道；能从合法的查询中推导出不合法的信息。规则1：任何查询至少要涉及N(N足够大)个以上的记录；规则2：任意两个查询的相交数据项不能超过M个；规则3：任一用户的查询次数不能超过1+(N-2)/M。











",第四章 数据库安全性,2022-12-18 18:39:00
2020213352,"数据库的完整性：数据的正确性和相容性。·数据的完整性和安全性是两个不同概念：1.数据的完整性：防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据；防范对象：不合语义的、不正确的数据。2.数据的安全性：保护数据库防止恶意的破坏和非法的存取；防范对象：非法用户和非法操作。为维护数据库的完整性，DBMS必须：1.提供定义完整性约束条件的机制；2.提供完整性检查的方法；3.违约处理。5.1  实体完整性5.1.1 实体完整性定义·关系模型的实体完整性：CREATE  TABLE中用PRIMARY KEY定义。·单属性构成的码有两种说明方法：定义为列级约束条件；定义为表级约束条件。·对多个属性构成的码只有一种说明方法：定义为表级约束条件。5.1.2 实体完整性检查和违约处理·插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查，包括：1. 检查主码值是否唯一，如果不唯一则拒绝插入或修改；2. 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改。·检查记录中主码值是否唯一的一种方法是进行全表扫描。5.2  参照完整性5.2.1 参照完整性定义·关系模型的参照完整性定义：在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码；用REFERENCES短语指明这些外码参照哪些表的主码。5.2.2 参照完整性检查和违约处理·参照完整性违约处理：1. 拒绝(NO ACTION)执行；2. 级联(CASCADE)操作；3. 设置为空值（SET-NULL）（对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值）。5.3  用户定义的完整性 5.3.1 属性上的约束条件的定义·CREATE TABLE时定义：列值非空（NOT NULL）；列值唯一（UNIQUE）；检查列值是否满足一个布尔表达式（CHECK）。5.3.2 属性上的约束条件检查和违约处理 ·插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足。·如果不满足则操作被拒绝执行。5.3.3 元组上的约束条件的定义 ·在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制。·同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。5.3.4 元组上的约束条件检查和违约处理 ·插入元组或修改属性的值时，RDBMS检查元组上的约束条件是否被满足。·如果不满足则操作被拒绝执行。5.4  完整性约束命名子句 ·CONSTRAINT 约束 ·使用ALTER TABLE语句修改表中的完整性限制。5.6  触发器：用户定义在关系表上的一类由事件驱动的特殊过程（由服务器自动激活；可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力）。5.6.1 定义触发器 ·定义触发器的语法说明:1. 创建者：表的拥有者；2. 触发器名；3. 表名：触发器的目标表；4. 触发事件：INSERT、DELETE、UPDATE；5. 触发器类型（行级触发器；语句级触发器）；6. 触发条件：触发条件为真，省略WHEN触发条件；7. 触发动作体：触发动作体可以是一个匿名PL/SQL过程块，也可以是对已创建存储过程的调用。5.6.2 激活触发器 ·触发器的执行，是由触发事件激活的，并由数据库服务器自动执行。一个数据表上可能定义了多个触发器。同一个表上的多个触发器激活时遵循如下的执行顺序：（1）执行该表上的BEFORE触发器；（2）激活触发器的SQL语句；（3）执行该表上的AFTER触发器。5.6.3 删除触发器·触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除。











",第五章 数据库完整性,2022-12-18 20:06:50
2020213352,"6.1 问题的提出·关系数据库逻辑设计：1.针对具体问题，如何构造一个适合于它的数据模式；2.数据库逻辑设计的工具──关系数据库的规范化理论。·完整性约束的表现形式：1.限定属性取值范围：例如学生成绩必须在0-100之间；2.定义属性值间的相互关连（主要体现于值的相等与否），这就是数据依赖，它是数据库模式设计的关键。·数据依赖：一个关系内部属性与属性之间的约束关系；现实世界属性间相互联系的抽象；数据内在的性质；语义的体现。·数据依赖的类型：函数依赖、多值依赖、其他。·数据依赖对关系模式的影响：1. 数据冗余太大；2. 更新异常；3. 插入异常；4. 删除异常。·解决方法：通过分解关系模式来消除其中不合适的数据依赖。6.2 规范化：规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。6.2.1 函数依赖：平凡函数依赖与非平凡函数依赖、完全函数依赖与部分函数依赖、传递函数依赖。6.2.2 码：设K为R<U,F>中的属性或属性组合。若U完全函数依赖于K，则K称为R的侯选码。若候选码多于一个，则选定其中的一个做为主码。主属性与非主属性：包含在任何一个候选码中的属性，称为主属性；不包含在任何码中的属性称为非主属性或非码属性。全码：整个属性组是码，称为全码。关系模式R 中属性或属性组X 并非R的码，但X 是另一个关系模式的码，则称X 是R 的外部码，也称外码。6.2.3 范式：符合某一种级别的关系模式的集合，关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。范式的种类：第一范式(1NF)第二范式(2NF)第三范式(3NF)BC范式(BCNF)第四范式(4NF)第五范式(5NF)。6.2.4  2NF·1NF的定义：如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF，第一范式是对关系模式的最起码的要求。2NF的定义定义：若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF。6.2.5  3NF：若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。6.2.6  BCNF：每一个决定属性因素都包含码。6.2.7 多值依赖：设R(U)是一个属性集U上的一个关系模式，X、Y和Z是U的子集，并且Z＝U－X－Y。关系模式R(U)中多值依赖X→→Y成立，当且仅当对R(U)的任一关系r，给定的一对（x，z）值，有一组Y的值，这组值仅仅决定于x值而与z值无关。6.2.8  4NF：如果R ∈4NF，则R∈BCNF，不允许有非平凡且非函数依赖的多值依赖，允许的非平凡多值依赖是函数依赖。
",第六章 关系数据理论,2022-12-19 13:43:12
2020213352,7.1  数据库设计概述 7.1.1  数据库设计的特点：数据库建设的基本规律：三分技术，七分管理，十二分基础数据（管理：数据库建设项目管理；企业（即应用部门）的业务管理。基础数据：收集、入库；更新新的数据。）结构（数据）设计和行为（处理）设计相结合：将数据库结构设计和数据处理设计密切结合。7.1.2  数据库设计方法：手工与经验相结合方法、规范设计法、新奥尔良方法、基于E-R模型的数据库设计方法、3NF（第三范式）的设计方法、ODL（Object Definition Language）方法、计算机辅助设计。7.1.3  数据库设计的基本步骤：需求分析；概念结构设计；逻辑结构设计；物理结构设计；数据库实施；数据库运行和维护。7.1.4  数据库设计过程中的各级模式 7.2  需求分析7.2.1  需求分析的任务：详细调查现实世界要处理的对象（组织、部门、企业等）；充分了解原系统（手工系统或计算机系统）；明确用户的各种需求v确定新系统的功能；充分考虑今后可能的扩充和改变。需求分析的重点：调查的重点是“数据”和“处理”，获得用户对数据库要求（信息要求、处理要求、安全性与完整性要求）需求分析的难点：确定用户最终需求、用户缺少计算机知识、设计人员缺少用户的专业知识。解决方法：设计人员必须不断深入地与用户进行交流。7.2.2  需求分析的方法：1.调查需求2.达成共识3.分析表达需求·具体步骤：(1)调查组织机构情况(2)调查各部门的业务活动情况。(3)在熟悉业务活动的基础上，协助用户明确对新系统的各种要求。(4)确定新系统的边界。·常用调查方法：(1)跟班作业(2)开调查会(3)请专人介绍(4)询问(5)设计调查表请用户填写(6)查阅记录。·进一步分析和表达用户需求。7.2.3  数据字典·数据字典的用途：进行详细的数据收集和数据分析所获得的主要结果。·数据字典的内容：数据项、数据结构、数据流、数据存储、处理过程。,第七章 数据库设计 1,2022-12-19 22:18:08
2020213352,7.3  概念结构设计7.3.1  概念结构：将需求分析得到的用户需求抽象为信息结构(即概念模型)的过程就是概念结构设计。·概念结构设计的特点：(1) 能真实、充分地反映现实世界；(2) 易于理解；(3) 易于更改；(4) 易于向关系、网状、层次等各种数据模型转换。·描述概念模型的工具：E-R模型。7.3.2  概念结构设计的方法与步骤 ·设计概念结构的四类方法：1.自顶向下：首先定义全局概念结构的框架，然后逐步细化；2.自底向上：首先定义各局部应用的概念结构，然后将它们集成起来，得到全局概念结构；3.逐步扩张：首先定义最重要的核心概念结构，然后向外扩充，以滚雪球的方式逐步生成其他概念结构，直至总体概念结构；4.混合策略：将自顶向下和自底向上相结合，用自顶向下策略设计一个全局概念结构的框架，以它为骨架集成由自底向上策略中设计的各局部概念结构。7.3.3  数据抽象与局部视图设计：数据抽象；局部视图设计。·三种常用抽象：1. 分类：定义某一类概念作为现实世界中一组对象的类型，抽象了对象值和型之间的“is member of”的语义；2. 聚集：定义某一类型的组成成分，抽象了对象内部类型和成分之间“is part of”的语义；3. 概括：定义类型之间的一种子集联系，抽象了类型之间的“is subset of”的语义，继承性。·设计分E-R图的步骤:1.选择局部应用；2.逐一设计分E-R图。7.3.4  视图的集成：各个局部视图即分E-R图建立好后，还需要对它们进行合并，集成为一个整体的数据概念结构即总E-R图。·集成局部E-R图的步骤：1. 合并；2. 修改与重构。各分E-R图存在冲突：各个分E-R图之间必定会存在许多不一致的地方。合并分E-R图的主要工作与关键：合理消除各分E-R图的冲突。冲突的种类：属性冲突、命名冲突、结构冲突。两类属性冲突：属性域冲突、属性取值单位冲突。两类命名冲突：同名异义、异名同义。三类结构冲突：同一对象在不同应用中具有不同的抽象；同一实体在不同分E-R图中所包含的属性个数和属性排列次序不完全相同；实体之间的联系在不同局部视图中呈现不同的类型。消除不必要的冗余，设计基本E-R图。消除冗余的方法：分析方法、规范化理论。,第七章 数据库设计 2,2022-12-19 23:40:34
2020213352,"7.4  逻辑结构设计·逻辑结构设计的任务：把概念结构设计阶段设计好的基本E-R图转换为与选用DBMS产品所支持的数据模型相符合的逻辑结构。·逻辑结构设计的步骤：将概念结构转化为一般的关系、网状、层次模型；将转换来的关系、网状、层次模型向特定DBMS支持下的数据模型转换；对数据模型进行优化。7.4.1  E-R图向关系模型的转换·转换内容：将E-R图转换为关系模型，即将实体、实体的属性和实体之间的联系转换为关系模式。实体型间的联系有以下不同情况：(1)一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。（转换为一个独立的关系模式，或与某一端实体对应的关系模式合并）；(2)一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。（转换为一个独立的关系模式，或与n端对应的关系模式合并）；(3) 一个m:n联系转换为一个关系模式；(4)三个或三个以上实体间的一个多元联系转换为一个关系模式；(5)具有相同码的关系模式可合并。7.4.2  数据模型的优化 ·优化数据模型的方法：1.确定数据依赖按需求分析阶段所得到的语义，分别写出每个关系模式内部各属性之间的数据依赖以及不同关系模式属性之间数据依赖；2.消除冗余的联系对于各个关系模式之间的数据依赖进行极小化处理，消除冗余的联系；3.确定所属范式：按照数据依赖的理论对关系模式逐一进行分析，考查是否存在部分函数依赖、传递函数依赖、多值依赖等，确定各关系模式分别属于第几范式；4.按照需求分析阶段得到的各种应用对数据处理的要求，分析对于这样的应用环境这些模式是否合适，确定是否要对它们进行合并或分解；5.按照需求分析阶段得到的各种应用对数据处理的要求，对关系模式进行必要的分解，以提高数据操作的效率和存储空间的利用率。7.4.3  设计用户子模式 ·定义用户外模式时应该注重的问题包括三个方面：(1) 使用更符合用户习惯的别名；(2) 针对不同级别的用户定义不同的View ，以满足系统对安全性的要求；(3) 简化用户对系统的使用。7.5  数据库的物理设计 7.5.1  数据库物理设计的内容和方法 ·设计物理数据库结构的准备工作：对要运行的事务进行详细分析，获得选择物理数据库设计所需参数；充分了解所用RDBMS的内部特征，特别是系统提供的存取方法和存储结构。·选择物理数据库设计所需参数：（1）数据库查询事务：查询的关系、查询条件所涉及的属性、连接条件所涉及的属性、查询的投影属性；（2）数据更新事务：被更新的关系、每个关系上的更新操作条件所涉及的属性、修改操作要改变的属性值；（3）每个事务在各关系上运行的频率和性能要求。7.5.2  关系模式存取方法选择 ·DBMS常用存取方法：索引方法、聚簇方法、HASH方法。·索引存取方法的选择：根据应用要求确定（对哪些属性列建立索引、对哪些属性列建立组合索引、对哪些索引要设计为唯一索引）。选择索引存取方法的一般规则：如果一个(或一组)属性经常在查询条件中出现，则考虑在这个(或这组)属性上建立索引(或组合索引)；如果一个属性经常作为最大值和最小值等聚集函数的参数，则考虑在这个属性上建立索引；如果一个(或一组)属性经常在连接操作的连接条件中出现，则考虑在这个(或这组)属性上建立索引。关系上定义的索引数过多会带来较多的额外开销：维护索引的开销、查找索引的开销。 ·聚簇存取方法的选择 ·聚簇的用途：1. 大大提高按聚簇码进行查询的效率；2. 节省存储空间。·聚簇的局限性：1. 聚簇只能提高某些特定应用的性能；2. 建立与维护聚簇的开销相当大。·聚簇的适用范围：1. 既适用于单个关系独立聚簇，也适用于多个关系组合聚簇；2. 当通过聚簇码进行访问或连接是该关系的主要应用，与聚簇码无关的其他访问很少或者是次要的时，可以使用聚簇。 ·HASH存取方法的选择：选择HASH存取方法的规则：当一个关系满足下列两个条件时，可以选择HASH存取方法。7.5.3  确定数据库的存储结构 ·确定数据库物理结构的内容：1. 确定数据的存放位置和存储结构：关系、索引、聚簇、日志、备份；2. 确定系统配置。确定数据存放位置和存储结构的因素:存取时间、存储空间利用率、维护代价。7.5.4  评价物理结构 ·评价内容：对数据库物理设计过程中产生的多种方案进行细致的评价，从中选择一个较优的方案作为数据库的物理结构。评价方法（完全依赖于所选用的DBMS ）：定量估算各种方案（存储空间、存取时间、维护代价）；对估算结果进行权衡、比较，选择出一个较优的合理的物理结构；如果该结构不符合用户需求，则需要修改设计。7.6  数据库的实施和维护 7.6.1  数据的载入和应用程序的调试 7.6.2  数据库的试运行 ·数据库试运行主要工作包括：（1）功能测试；（2）性能测试。7.6.3  数据库的运行和维护 ·在数据库运行阶段，对数据库经常性的维护工作主要是由DBA完成的，包括：1.数据库的转储和恢复；2.数据库的安全性、完整性控制；3.数据库性能的监督、分析和改进；4.数据库的重组织和重构造。
",第七章 数据库设计 3,2022-12-19 23:59:31
2020213353,"1数据是数据库中存储的基本对象。

2数据库（DB）是长期储存在计算机内，有组织的，可共享的大量数据的集合。

3数据库管理系统（DBMS）是位于用户与操作系统之间的一层数据管理软件。是基础软件，是一个大型复杂的软件系统。
用途：科学地组织和存储数据，高效地获取和维护数据。
主要功能：1）数据定义功能
2）数据组织、存储和管理
3）数据操纵功能
4）数据库的事务管理和运行管理
5）数据库的建立和维护功能（实用程序）

4数据库系统是在计算机系统中引入数据库后的系统构成
构成：1）数据库 2）DBMS 3）应用系统 4）数据库管理员

5数据模型：用来抽象、表示和处理现实世界中的数据和信息。
类别：1）概念模型 2）逻辑模型3）物理模型

6数据结构：描述数据库的组成对象，以及对象之间的联系
           对系统静态特性的描述

7数据操作：对数据库中各种对象的实例允许执行的操作及有关的操作规则    对系统动态特性的描述

8数据的完整性约束条件：一组完整性规则的集合

9信息世界中的基本概念：
1）实体：客观存在并可相互区别的事物
2）属性：实体所具有的某一特征
3）码：唯一标识实体的属性集称
4）域：属性的取值范围
5）实体型：用实体名及其属性名集合来抽象和刻画同类实体称为实体型
6）实体集：同一类型实体的集合
7）联系：分为实体内部的联系和实体之间的联系

10两个实体型之间的联系
     1）一对一
     2）一对多
     3）多对多        

11实体-联系方法（E-R方法）
实体：矩形   属性：椭圆  菱形：联系

",目录,2022-09-11 10:53:31
2020213353,"1）层次模型：1.有且只有一个结点没有双亲结点，这个结点称为根节点。2.根以外的其他结点有且只有一个双亲结点。

数据操纵与完整性约束：1进行插入操作时，如果没有双亲结点值就不能插入它的子女结点。2如果删除双亲结点值，则相应的子女结点值也将同时删除。

层次数据库的优点：1数据结构比较简单清晰。 2查询效率高。3层次数据模型提供了良好的完整性支持。
层次数据库的缺点：1现实世界中的非层次性联系不适合用层次模型表示。2对插入和删除操作的限制比较多。3查询子女节点必须通过双亲结点。4由于结构严密，层次命令趋于程序化。

2）网状模型：1允许一个以上的结点无双亲。2一个结点可以有多于一个的双亲。

数据操纵与完整性约束：1支持记录码的概念。2保证一个联系中双亲记录和子女记录之间是一对多的联系。3可以支持双亲记录与子女记录之间的某些约束条件。

网状模型的优点：1能够直观地描述现实世界。2具有良好的性能，存取效率较高。
网状模型的缺点：1结构比较复杂，不利于最终用户掌握。2网状模型的DDL,DML复杂，用户不容易掌握。 3用户必须了解系统结构的细节，加重了编写程序的负担。

3）关系模型：由一组关系组成，每个关系的数据结构是一张规范化的二维表。其中的术语包括 关系：对应一张表   元组：行  属性：列   码：某个属性组，可以唯一确定一个元组   域：一组具有相同数据类型的值的集合   分量：元组中的一个属性值

数据操纵与完整性约束：1关系模型要求必须是规范化的。关系的每一个分量必须是一个不可分的数据项。2关系模型的数据操纵主要包括查询、插入、删除和更新数据。这些操作必须满足关系的完整性约束条件。3关系模型的数据操作是集合操作，操作对象和操作结果都是关系。4关系模型把存储路径向用户隐蔽起来，用户只要指出“干什么”和“找什么”，不必详细说明“怎么干”和“怎么找”。

关系模型的优点：1建立在严格的数学概念的基础上。2关系模型的数据结构简单、清晰，用户易懂易用。3存储路径对用户透明，从而具有更高的数据独立性，更好的安全保密性。
关系模型的缺点：1由于存取路径对用户是隐蔽的，查询效率往往不如格式化数据。",数据库反思（二）常用的数据模型,2022-09-17 11:00:55
2020213353,"一．关系模型
关系模型由关系数据结构，关系操作集合和关系完整性约束三部分组成。

二．关系
1域：一组具有相同数据类型的值的集合。
2笛卡尔积：给定一组域D1,D2……，Dn,允许其中某些域是相同的，D1,D2,……,Dn的笛卡尔积为D1*D2*……Dn={(d1,d2,……，dn)|di属于Di,i=1,2,……，n}
3元组：笛卡尔积中每一个元素(d1,d2,……，dn)叫作一个n元组，简称元组。
4基数：一个域允许的不同取值个数称为这个域的基数。
5关系：D1*D2*……*Dn的子集叫做在域D1,D2,……，Dn上的关系，表示为R(D1,D2,……，Dn)，关系是元组的集合，n是关系的目或度。				
6属性：由于域可以相同，为了加以区分，必须对每列起一个名字，称为属性。n目关系必有n个属性。
7候选码：若关系中的某一属性的值能够唯一地标识一个元组，而其子集不能，则称该属性组为候选码。候选码的诸属性称为主属性。
8主码：若一个关系中有多个候选码，则选定其中一个为主码。
9全码：若关系模式的所有属性是这个关系的候选码，称为全码。

三．关系的三种类型
1基本表：实际存在的表，是实际存储数据的逻辑表示。
2查询表：查询结果对应的表。
3视图表：由基本表或其他视图表导出的表。是虚表，不对应实际存储的数据。
4当关系作为关系数据模型的数据结构时，限定关系数据模型中的关系必须是有限集合。

四．基本关系的性质
1列是同质的。
2不同的列可以出自同一个域。
3列的顺序无所谓。
4任意两个元组的候选码不能取相同的值。
5行的顺序无所谓。
6分量必须取原子值。

五．关系模式
1关系模式：关系的描述称为关系模式。（型）它可以形式化地表示为R(U,D,DOM,F)，关系模式是静态的，稳定的。R:关系名 U：属性名集合 D：属性所来自的域 DOM：属性向域的映像集合 F：属性间数据的依赖关系集合
2关系：关系是关系模式在某一时刻的状态或内容。关系是动态的。
3关系数据库：在一个给定的应用领域中。所有关系的集合构成一个关系数据库。

六，关系操作
1关系操作：查询操作，插入，删除，修改
2查询操作：选择，投影，并，差，笛卡尔积
3关系操作的特点是集合操作方式，即操作的对象和结果都是集合。

七．关系数据语言分类
1关系代数语言（ISBL）
2关系演算语言。分为元组关系演算语言（ALPHA,QUEL）和域关系演算语言（QBE）
3结构化查询语言（SQL）",数据库反思（三）,2022-09-24 12:18:12
2020213353,"1关系模型中有三类完整性约束：实体完整性，参照完整性，用户定义的完整性。实体完整性和参照完整性是关系的两个不变性。
2实体完整性规则：若属性（指一个或一组属性）A是基本关系R的主属性，，则A不能取空值。
实体完整性规则是针对基本关系而言的。一个基本关系通常对应现实世界的一个实体集。
现实世界中的实体是可区分的。
关系模型中以主码作为唯一性标识。
主码的属性不能为空值。
3参照完整性：设F是基本关系R的一个或一组属性，但不是关系R的码，Ks是基本关系S的主码。如果F与Ks相对应，则称F为R的外码。并称基本关系R为参照关系，基本关系S为被参照关系或目标关系。
Ks和F必须定义在同一个域上。
外码并不一定需要与相应的主码同名。
4参照完整性规则：若F是基本关系R的外码，它与基本关系S的主码Ks相对应，（R和S可以是同一个关系）则对于R中每个元组在F上的值必须：或者取空值或者等于S中某个元组的主码值。
二关系代数
1关系代数可以分为传统的集合运算和专门的关系运算。
2传统的集合运算：是二目运算，包括并，差，交，笛卡尔积。
并：R∪S={t|t∈R或者t属于S}n目
差：R-S={t|t∈R并且t不属于S}n目
交：R∩S={t|t∈R并且t属于S}n目
笛卡尔积：R*S={trts|tr∈R并且ts属于S} （n+m）目",关系的完整性,2022-10-04 14:42:16
2020213353,"关系基本运算包括：选择、投影、连接、除运算等。
1、选择（selection）
1)选择又称为限制。
2)选择运算符的含义：在关系R中选择满足给定条件的诸元组，记作σF(R) = {t | t∈R∧F(t)= '真'}。F表示选择条件，是一个逻辑表达式， 基本形式为X1θY1。
3)选择运算是单目运算，它从一个关系R中选择出满足给定条件的所有元组，并同R具有相同的结构。
4)关系R的选择运算是从关系R中选择满足指定条件（用F表示）的元组构成的新关系。选择运算是选择关系中行的子集，即选择满足条件的元组。
2、投影（projection）
1)投影运算符的含义：从R中选择出若干属性列组成新的关系。记作πP(R)={t[A] | t∈R}，其中A为R中的属性列。
2)投影操作主要是从列的角度进行运算。但投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组(避免重复行)。
3)投影运算是单目运算，它从一个关系R所有属性中选择某些指定属性，组成一个新的关系。
连接（join）
1)连接也称为θ连接
2)连接运算的含义：从两个关系的笛卡尔积中选取属性间满足一定条件的元组。
3)两类常用连接运算
■等值连接
①“=”的连接运算称为等值连接
②等值连接的含义：从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组。
■自然连接
①自然连接是一种特殊的等值连接。两个关系中进行比较的分量必须是相同的属性组；在结果中把重复的属性列去掉。
②自然连接的含义：R和S具有相同的属性组，则U为R和S的全体属性集合。
4)一般的连接操作是从行的角度进行运算。自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。
5)三类外连接运算
■外连接：如果把舍弃的元组也保存在结果关系中，而在其他属性上填空值(Null)，这种连接就叫做外连接。
■左外连接：如果只把左边关系R中要舍弃的元组保留就叫做左外连接。
■右外连接：如果只把右边关系S中要舍弃的元组保留就叫做右外连接。

3、除运算（division）
1)设关系R除以关系S的结果为关系T，则T包括所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中。
2)给定关系R(X，Y)和S(Y，Z)，其中X，Y，Z为属性组。R中的与S中的可以有不同的属性名，但必须出自相同的域集。与S的除运算得到一个新的关系P(x)，P是R中满足下列条件的元组在X属性列上的投影：元组在X上分量值x的象集YX包含S在Y上投影的集合。
3)除操作是同时从行和列角度进行运算。
小结
■关系代数运算：并、差、交、笛卡尔积、投影、选择、连接、除
■基本运算：并、差、笛卡尔积、投影、选择
■交、连接、除：可以用5种基本运算来表达。引进它们并不增加语言的能力，但可以简化表达。",第五次反思,2022-10-30 14:31:08
2020213353,"关系数据库标准语言SQL
1结构化查询语言是关系数据库的标准语言，也是一个通用的，功能性极强的关系数据库语言。功能：查询，数据库
模式创建，数据库数据的插入与修改，数据库安全性完整性定义与控制等。
2 SQL集数据查询，数据操纵，数据定义和数据控制功能于一体。主要特点:1综合统一2高度非过程化3面向集合的操作方式4以同一种语法结构提供多种使用方式5语言简洁，易学易用 
3 支持SQL的关系数据库管理系统同样支持关系数据库三级模式结构。
4一个关系数据库管理系统的实例中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表，视图和索引等数据库对象。
5定义模式CREATE SCHEMA<模式名> AUTHORIZATION<用户名>
6删除模式 DROP SCHAMA<模式名>CASCADE|RESTRICT>
7定义基本表CREATE TABLE<表名>(<列名><数据类型>[列级完整性约束条件]）;
8数据类型：SQL中域的概念用数据类型来实现
9模式与表：每一个基本表都属于某一个模式，一个模式包含多个基本表。
10修改基本表:1 ALTER TABLE<表名> 2[ADD [COLUMN]<新列名><数据类型>[完整性约束]] 3[ADD<表级完整性约束>] 4[DROP[COLUMN]<列名>[CASCADE|RESTRICT]] 4[DROP CONSTRAINT<完整性约束名>[RESTRICT|CASCADE]] 5[ALTER COLUMN<列名><数据类型>];
11删除基本表：DROP TABLE<表名>[RESTRICT|CASCADE];
12索引的建立：CREATE [UNIQUE][CLUSTER]INDEX<索引名> ON <表名>(<列名>[<次序>][,<列名>[<次序>]]);
13修改索引：ALTER INDEX<旧索引名>RENAME TO<新索引名>;
14删除索引 DROP INDEX<索引名>;
15数据查询 
SELECT [ALL|DISTINCT]<目标列表达式>[,<目标列表达式>]
FROM <表名或视图名>[,<表名或视图名>]|(<SELECT语句>)[AS]<别名>
[WHERE <条件表达式>]
[GROUP BY<列名1>[HAVING<条件表达式>]]
[ORDER BY<列名2>[ASC|DESC]];
16单表查询 1选择表中的若干列2选择表中的若干元组 3ORDER BY子句 4聚集函数 5GROUP BY子句:将查询结果按某一列或多列的值分组，值相等的为一组",第六次反思,2022-10-30 14:31:36
2020213353,"3.5数据更新
3.5.1插入数据
1插入元组
INSERT 
INTO<表名>[(<属性列1>[,<属性列2>]…)]
VALUES(<常量1>[,<常量2>]…);
INTO子句没有出现过的属性列，新元组在这些列上取空值。
2插入子查询结果
INSERT 
INTO<表名>[(<属性列1>[,<属性列2>]…)]
子查询；
3.5.2修改数据
UPDATE<表名>
SET<列名>=<表达式》[,列名>=<表达式》]…
[WHERE<条件>]；
如果省略WHERE子句，则表示要修改表中的所有元组。
3.5.3 删除数据
DELETE
FRPM<表名>
[WHERE<条件>];
DELETE删除的是表中的数据，而不是关于表的定义。

3.6空值的处理
1空值的产生 2空值的判断 3空值的约束条件 4空值的算术运算，比较运算和逻辑运算

3.7视图
3.7.1.1定义视图
CREATE VIEW<视图名>[(<列名>[,<列名>]…)]
AS<子查询>
[WITH CHECK OPTION]；
1子查询可以是任意的SELETE语句。
2WITH CHECK OPTION表示对视图进行UPDATE,INSERT,DELETE时要保证操作行满足视图定义中的谓词条件。
3组成视图的属性列要么全部省略要么全部指定。
4CREATE VIEW只是把视图的定义存入数据字典，并不执行SELECT语句。
5视图不仅可以建立在一个或多个基本表上，也可以建立在一个或多个已经定义好的视图上，或建立在基本表与视图上。
6带虚拟列的视图也称为带表达式的视图。
7用带有聚集函数和GROUP BY子句的查询来定义视图，称为分组视图。
3.7.1.2删除视图
DROP VIEW<视图名>[CASCADE];
3.7.2查询视图
定义视图并查询：视图一旦被定义就永久保存早数据字典中。
基于派生表的查询：只是在执行语句时临时定义，语句执行后定义即被删除。
3.7.3更新视图
1由于视图是不存在的虚表，所以对视图的更新最终要转换为对基本表的更新。
2并不是所有的视图都可更新。
3.7.4视图的作用
1视图能简化用户的操作。
2视图能使用户以多种角度看待同一数据。
3视图对重构数据库提供了一定程度的逻辑独立性。
4视图能够对机密数据提供安全保护。
5适当利用视图可以更清晰地表达查询。",第八次反思,2022-11-04 11:26:18
2020213353,"第四章数据库安全性
4.1.1 计算机系统的三类安全性问题
1. 计算机系统安全性：
为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
2. 三类计算机系统安全性问题：
①技术安全类
②管理安全类
③政策法律类
4.1.2 安全标准简介
（1）TCSEC/TDI
1. TCSEC/TDI标准的基本内容：
从四个方面来描述安全性级别划分的指标
①安全策略
②责任
③保证
④文档
2.TCSEC/TDI安全级别划分
A1验证设计( Verified Design )
B3安全域(Security Domains)
B2结构化保护( Structural Protection )
B1标记安全保护(Labeled Security Protection)
C2受控的存取保护( Controlled Access Protection)
C1自主安全保护(Discretionary Security Protection)
D最小保护(Minimal Protection )
（1）按系统可靠或可信程度逐渐增高
（2）各安全级别之间:偏序向下兼容
（3）B2以上的系统：
还处于理论研究阶段；
应用多限于一些特殊的部门，如军队等；
美国正在大力发展安全产品，试图将目前仅限于少数领域应用的B2安全级别下放到商业应用中来，并逐步成为新的商业标准。
（2）CC
1.CC标准的基本内容：
提出国际公认的表述信息技术安全性的结构，
把信息产品的安全要求分为
①安全功能要求
②安全保证要求
2.CC文本组成
①简介和一般模型
②安全功能要求
③安全保证要求

3.CC评估保证级划分
EAL1功能测试(functionally tested)
EAL2结构测试(structurally tested)
EAL3系统地测试和检查( methodically tested and checked)
EAL4系统地设计、测试和复查(methodically designed, tested, and reviewed )
EAL5半形式化设计和测试(semiformally designed and tested )
EAL6半形式化验证的设计和测试(semiformally verified design and tested )
EAL7形式化验证的设计和测试( formally verified design and tested )
4.2 数据库安全性控制概述：
非法使用数据库的情况
①编写合法程序绕过DBMS及其授权机制
②直接或编写应用程序执行非授权操作
③通过多次合法查询数据库从中推导出一些保密数据
数据库安全性控制的常用方法：
①用户标识和鉴定
②存取控制
③视图
④审计
⑤密码存储
4.2.1 用户标识与鉴别(Identification & Authentication)
系统提供的最外层安全保护措施
4.2.2存取控制
1.存取控制机制组成：
①定义用户权限
②合法权限检查
2.用户权限定义和合法权检查机制一起组成了DBMS的安全子系统
3.常用存取控制方法
①自主存取控制( Discretionary Access Control，简称DAC)——C2级、灵活
②强制存取控制( Mandatory Access Control，简称MAC)——B1级、严格
4.2.3自主存取控制方法
1.通过SQL的GRANT语句和REVOKE语句实现
2.用户权限组成：
①数据对象
②操作类型
3.定义用户存取权限：定义用户可以在哪些数据库对象上进行哪些类型的操作
4.定义存取权限称为授权
4.2.4授权与回收
（1）GRANT
1.GRANT语句的一般格式：
GRANT <权限>[, <权限>]...
[ON <对象类型> <对象名>]
To <用户>[,<用户>...
[WITH GRANT OPTION];
语义:将对指定操作对象的指定操作权限授予指定的用户

2.发出GRANT：
①DBA
②数据库对象创建者(即属主Owner)
③拥有该权限的用户
按受权限的用户：
①一个或多个具体用户
②PUBLIC (全体用户)
3.WITH GRANT OPTION子句
指定:可以再授予
没有指定:不能传播
不允许循环授权
（2）REVOKE
1. 授予的权限可以由DBA或其他授权者用REVOKE语句收回
2. REVOKE语句的一般格式为:
REVOKE <权限>[,<权限>]...
[ON <对象类型> <对象名>]
FROM <用户>[,<用户>...;
4.2.5数据库角色
数据库角色：被命名的一组与数据库操作相关的权限
①角色的创建
CREATE ROLE <角色名>
②给角色授权
GRANT <权限> [，<权限>] ...
ON <对象类型>对象名
TO<角色> [，<角色>]...
③将一个角色授予其他的角色或用户
GRANT <角色1> [，<角色2>]
TO <角色3> [，<用户1>]...
[ WITH ADMIN OPTION]
④角色权限的收回
REVOKE <权限> [，<权限>] ...
ON <对象类型> <对象名>
FROM <角色> [，<角色> ]...
4.3视图机制
1.把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护。
①主要功能是提供数据独立性，无法完全满足要求。
②间接实现了支持存取谓词的用户权限定义。",第九次反思,2022-11-19 13:41:53
2020213353,"第五章数据库完整性
数据库的完整性是指数据的正确性和相容性。
数据库管理系统必须实现如下功能：
1提供定义完整性约束条件的机制
2提供完整性检查的方法
3进行违约处理

5.1实体完整性
5.1.1定义实体完整性
关系模型的实体完整性在CREATE TABLE中用PRIMARY KEY定义。
对单属性构成的码有两种说明方法，一种是定义为列级约束条件，另一种是定义为表级约束条件。
对多个属性构成的码只有一种说明方法，即定义为表即约束条件。

5.1.2实体完整性检查和违约处理
用PRIMARY KEY短语定义了关系的主码后，每当用户程序对基本表插入一条记录或对主码列进行更新操作时，关系数据库会对实体完整性规则进行检查：
1检查主码是否唯一
2检查主码的各个属性是否为空

5.2参照完整性
5.2.1定义参照完整性
关系模型的参照完整性在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码，用REFERENCES短语指明这些外码参照哪些表的主码。

5.2.2参照完整性检查和违约处理
参照完整性将两个表中的相应元组联系起来了。因此，对被参照表和参照表进行增，删，改操作时可能破坏参照完整性，必须进行检查以保证这两个表的相容性。
当不一致发生时，系统可以采用以下策略：
1拒绝（NO ACTION）执行
2级联（CASCADE）操作
3设置为空值

5.3用户定义的完整性
5.3.1属性上的约束条件
1属性上约束条件的定义
列值非空（NOT NULL）
列值唯一（UNIQUE）
检查列值是否满足一个条件表达式（CHECK短语）
2属性上约束条件的检查和违约处理

5.3.2元组上的约束条件
1元组上约束条件的定义
在CREATE TABLE语句中可以用CHECK短语定义元组上的约束条件，即元组级的限制。
同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。
2元组上约束条件的检查和违约处理

5.4完整性约束命名子句
1完整性约束命名子句
CONSTRAINT<完整性约束条件名><完整性约束条件>
2修改表中的完整性限制
ALTER TABLE

5.5域中的完整性限制

5.6断言
1创建断言的语句格式
CREATE ASSERTION<断言名><CHECK子句>
2删除断言的语句格式

5.7触发器
触发器是用户定义在关系表上的一类由事件驱动的特殊过程

5.7.1定义触发器
触发器又叫做事件—条件—动作规则。
CREATE TRIGGER<触发器名>
{BEFORE|AFTER}<触发事件>ON<表名>
REFERENCEING NEW|OLD ROW AS<变量>
FOR EACH{ROW|STATEMENT}
[WHEN<触发条件>]<触发动作体>

5.7.2激活触发器
同一个表上的多个触发器激活时遵循如下的执行顺序：
1执行该表上的BEFORE触发器
2激活触发器的SQL语句
3执行该表上的AFTER触发器

5.7.3删除触发器
DROP TRIGGER<触发器名>ON<表名>;",第十次反思,2022-11-27 13:40:38
2020213353,"第六章关系数据理论
6.1问题的提出
（1）关系模式
由五部分组成，即一个五元组：R(U, D, DOM, F)。
R：关系名；
U：组成该关系的属性名集合；
D：属性组U中属性所来自的域；
DOM：属性向域的映象集合；
F：属性间数据的依赖关系集合。
（2）数据依赖
①一个关系内部属性与属性之间的约束关系
②现实世界属性间相互联系的抽象
③数据内在的性质
④语义的体现
（3）数据依赖的主要类型
①函数依赖
②多值依赖

6.2规范化
6.2.1函数依赖
（1）函数依赖定义：设R(U)是一个属性集U上的关系模式，X和Y是U的子集。
若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称“X函数确定Y”或“Y函数依赖于X”， 记作X→Y。
（2）平凡函数依赖与非平凡函数依赖：
在关系模式R(U)中，对于U的子集X和Y
①X→Y，但Y不属于X，则称X→Y是非平凡的函数依赖
②X→Y，但Y属于X，则称X→Y是平凡的函数依赖。
③若X→Y，则X称为这个函数依赖的决定属性组，也称为决定因素。
④若X→Y，Y→X， 则记作X←→Y。
⑤若Y不函数依赖于X，则记作X→/Y。
（3）完全函数依赖与部分函数依赖定义：
在R(U)中，如果X→Y，并且对于X的任何一个真子集X'，都有X'Y,则称Y对X完全函数依赖。若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖。",第十一次反思,2022-11-30 17:52:29
2020213353,"7.3概念结构设计
7.3.1概念模型
1）能真实，充分地反映现实世界。
2）易于理解
3）易于更改
4）易于向关系，网状，层次等各种数据模型转换。

7.3.2 E-R模型
1）实体型用矩形表示
2）属性用椭圆形表示
3）联系用菱形表示

7.3.5概念结构设计
1.实体与属性的划分原则
1）作为属性，不能再具有需要描述的性质，即属性必须是不可分的数据项。
2）属性不能与其他实体具有联系。
2.E-R图的集成
1）合并E-R图，生成初步的E-R图
在开发一个大型信息系统时，最经常采用的策略是自顶向下地进行需求分析，然后再自底向上地设计概念结构。
冲突：
属性冲突 
命名冲突 
结构冲突
3）消除不必要的冗余，设计基本E-R图

7.4逻辑结构设计
逻辑结构设计的任务就是把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构。
7.4.1 E-R图向关系模型的转换
一个实体型转换为一个关系模式，关系的属性就是实体的属性，关系的码就是实体的码。
1）一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。
2）一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。
3）一个m:n联系转换为一个关系模式，与该联系相连的各实体的码以及联系本身属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。
4）三个或三个以上实体间的一个多元联系可以转换为一个关系模式。
5）具有相同码的关系模式可合并。

7.4.2数据模型的优化
数据库逻辑设计的结果不是唯一的

7.4.3设计用户子模式
1）使用更符合用户习惯的别名
2）可以对不同级别的用户定义不同的视图
3）简化用户对系统的使用

7.5物理结构设计
数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于选定的数据库管理系统。为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构的过程，就是数据库的物理设计。
1）确定数据库的物理结构。
2）对物理结构进行评价。

7.5.2关系模式存储方法选择
1）B+树索引存取方法的选择
2）hash索引存取方法的选择
3）聚簇存取方法的选择

7.6数据库的实施和维护
7.6.1数据的载入和应用程序的调试
数据库应用程序的设计应该与数据库设计同时进行

7.6.2数据库的试运行
在原有系统的数据有一小部分已输入数据后，就可以开始对数据库系统进行联合调试了，这又称为数据库的试运行。

7.6.3数据库的运行和维护
1）数据库的转储和恢复
2）数据库的安全性，完整性控制
3）数据库性能的监督，分析和改造
4）数据库的重组织与重构造",第十二次反思,2022-12-18 14:01:15
2020213354,"一、数据库系统概述（产生和发展、特点和优点、为什么学习使用）

数据库的4个基本概念
1数据（Data）：数据库中存储的基本对象
     定义：描述事物的符号记录
     种类：数字、文字、图形、图像、音频、视频、学生的档案记录、
                订单情况等等
     特点：数据与其语义是不可分的！
2数据库（Database）：长期储存在计算机内、有组织的、可共享的
                                          大量数据的集合
     基本特征：数据按一定的数据模型组织、描述和储存；可为各种用
                       户共享；冗余度较小；数据独立性较高；易扩展
3数据库管理系统（DBMS）：位于用户应用与操作系统之间的一层
                                                   数据管理软件，是计算机的基础软
                                                   件，是一个大型复杂的软件系统
    主要功能：数据定义功能；数据组织、存储和管理；数据操纵功
                      能；数据库的事务管理和运行管理；数据库的建立和维
                      护功能；其他功能
4数据库系统（DBS）：指在计算机系统中引入数据库后的系统构成
     构成：数据库、数据库管理系统（及其应用开发工具）、应用程
                序、数据库管理员


二、数据模型（数据库系统的核心和基础）

数据模型是对现实世界数据特征的抽象，用来抽象、表示和处理现实世界中的数据和信息，通俗地讲就是现实世界的模拟。
三方面要求：能比较真实地模拟现实世界
                      容易为人所理解
                      便于在计算机上实现

两类数据模型
1概念模型（信息模型）
2逻辑模型和物理模型
客观对象的抽象过程——两步抽象：现实世界中的客观对象抽象为概念模型；把概念模型转换为某一DBMS支持的逻辑模型
（逻辑模型->物理模型由DBMS完成）

概念模型
用途：概念模型用于信息世界的建模
           是现实世界到机器世界的一个中间层次
           是数据库设计的有力工具
           数据库设计人员和用户之间进行交流的语言
基本要求：较强的语义表达能力
                  能够方便、直接地表达应用中的各种语义知识
                  简单、清晰、易于用户理解
信息世界中的基本概念
实体：客观存在并且可以互相区分的事物
属性：实体所具有的某一特性（只考虑重要的，注意空间大小）
码：唯一标识实体的属性集（eg：学号）
域：属性的取值范围称为该属性的域
实体型：用实体名及其属性名集合来抽象和刻画同类实体（eg：学生)
实体集：同一类型实体的集合（eg：所有学生）
联系：现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部（各属性之间）和实体之间（不同实体集之间）的联系
两个实体型之间的联系
一对一联系（1:1）、一对多联系（1:n）、多对多联系（m：n）
概念模型的一种表示方法：实体-联系方法（E-R方法/E-R模型）
实体型：矩形框
属性：椭圆形框+无向边连接
联系：菱形框+无向边连接+联系类型
存在的冲突：命名冲突、结构冲突

数据模型的组成要素
1数据结构：描述数据库的组成对象以及对象之间的联系
  （对系统静态特性的描述）
2数据操作：对数据库中各种对象（型）的实例（值）允许执行的操
                       作及有关的操作规则
     类型：查找和更新
     数据模型对操作的定义：
            操作的确切含义、操作符号、操作规则、实现操作的语言
3数据的完整性约束条件：一组完整性规则的集合
     完整性规则：给定的数据模型中数据及其联系所具有的制约和储存
                          规则，用以限定符合数据模型的数据库状态以及状态
                          的变化，以保证数据的正确、有效、相容
     数据模型对完整性约束条件的定义：
            反映和规定本数据模型必须遵守的基本的通用的完整性约束条
     件，提供定义完整性约束条件的机制，以反映具体应用所涉及的数
     据必须遵守的特定的语义约束条件",第一章 绪论（第1课）,2022-09-13 13:07:37
2020213354,"常用的数据模型
1非关系模型：层次模型、网状模型
2关系模型
3面向对象模型
4对象关系模型

层次模型
	层次模型用树形结构来表示各类实体以及实体间的联系
层次数据模型的数据结构
定义：
	满足下面两个条件的基本层次联系的集合为层次模型
	1 有且只有一个结点没有双亲结点，这个结点称为根结点
	2 根以外的其它结点有且只有一个双亲结点
特点：
	1 结点的双亲是唯一的
	2 只能直接处理一对多的实体联系
	3 每个记录类型可以定义一个排序字段，也称为码字段
	4 任何记录值只有按其路径查看时，才能显出它的全部意义
	5 没有一个子女记录值能够脱离双亲记录值而独立存在
多对多联系在层次模型中的表示（间接表示）
方法：
	将多对多联系分解成一对多联系
分解方法：
	冗余结点法、虚拟结点法
层次数据模型的数据操纵与完整性约束
数据操纵：查询、插入、删除、更新
完整性约束条件：
	1 无相应的双亲结点值就不能插入子女结点值
	2 如果删除双亲结点值，则相应的子女结点值也被同时删除
	3 更新操作时，应更新所有相应记录，以保证数据的一致性
层次数据模型的存储结构
	邻接法（层次树前序遍历）
	链接法（子女-兄弟链接法、层次序列链接法）
优点：
	1 层次模型的数据结构比较简单清晰
	2 查询效率高，性能优于关系模型，不低于网状模型
	3 层次数据模型提供了良好的完整性支持
缺点：
	1 结点之间的多对多联系表示不自然
	2 对插入和删除操作的限制多，应用程序的编写比较复杂
	3 查询子女结点必须通过双亲结点
	4 由于结构严密，层次数据库的命令（语音）趋于程序化

网状模型
	网状数据库系统采用网状模型作为数据的组织方式
网状数据模型的数据结构
定义：
	满足下面两个条件的基本层次联系的集合：
	1 允许一个以上的结点无双亲
	2 一个结点可以有多余一个的双亲
特点：
	1 允许多个结点没有双亲结点
	2 允许一个结点有多个双亲结点
	3 允许两个结点之间有多种联系
	4 要为每个联系命名并指出与该联系有关的双亲记录和子女记录
 多对多联系在网状模型中的表示（间接表示）
方法：
	将多对多联系直接分解成一对多联系（eg：引进一个学生选课的联结记录）
网状数据模型的操纵与完整性约束
数据操纵：
	导航式的查询语言和增删改操作语言
提供了一定的完整性约束：
	1 支持码的概念：唯一标识记录的数据项的集合，取唯一的值
	2 保证一个联系中双亲记录与子女记录之间是一对多联系
	3 可以定义双亲记录和子女记录之间某些约束条件
网状数据模型的存储结构
关键：实现记录之间的联系
常用方法：单向链接、双向链接、环向链接、向首链接
网状数据模型的优缺点
优点：
	1 能够更为直接地描述现实世界，如一个结点可以有多个双亲
	2 具有良好的性能，存取效率较高
缺点：
	1 结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握
	2 DDL、DML语言复杂，用户不容易使用
	3 记录之间联系是通过存取路径实现的，应用程序必须选择存取路径，加重了程序员的负担

关系模型
关系数据库系统采用关系模型作为数据的组织方式
关系数据模型的数据结构
1关系：一个关系对应通常说的一张表
2元组：表中的一行
3属性：表中的一列，给每一个属性起一个名称即属性名
4主码（码键）：表中的某个属性组，它可以唯一确定一个元组
5域：属性的取值范围
6分量：元组中的一个属性值
7关系模式：对关系的描述
	关系名（属性1，属性2，…，属性n）  eg：学生（学号，姓名，年龄，性别，系，年级）
‼️关系必须是规范化的，满足一定的规范条件
最基本的规范条件：
	关系的每一个分量必须是一个不可分的数据项，不允许表中还有表
关系数据模型的操纵与完整性约束
数据操纵：查询、插入、删除、更新
	数据操作集合操作，操作对象和操作结果都是关系，即若干元组的集合
	存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”
关系的完整性约束条件：
	1 实体完整性
	2 参照完整性
	3 用户定义的完整性
关系数据模型的存储结构
	1 实体及实体间的联系都用表来表示
	2 表以文件形式存储
关系数据模型的优缺点
优点：
	1 建立在严格的数学概念的基础上
	2 概念单一：
		实体和各类联系都用关系来表示；对数据的检索结果也是关系
	3 关系模型的存储路径对用户透明：
		具有更高的数据独立性，更好的安全保密性；简化了程序员的工作和数据库开发建立的工作
缺点：
	1 存取路径对用户透明导致查询效率往往不如非关系数据模型
	2 为提高性能，必须对用户的查询请求进行优化，增加了开发DBMS的难度",第一章 绪论（第2课）,2022-09-13 13:11:06
2020213354,"
——1970年提出关系数据模型（美国IBM公司的E.F.Codd）
——之后  提出关系代数和关系演算
——1972年提出关系的第一、第二、第三范式
——1974年提出关系的BC范式
 
一、关系数据结构及形式化定义

关系
1 只包含单一的数据结构——关系，实体以及实体间的各种联系均用关系来表示
2 逻辑结构——二维表
3 建立在集合代数的基础上
一些概念：
域：一组具有相同数据类型的值的集合
笛卡尔积：域上的一种集合运算，是所有域的所有取值的一个组合，不能重复






     元组：笛卡尔积中每一个元素叫作一个n元组或简称元组
     分量：笛卡尔积元素中的每一个值叫作一个分量
     基数：所有域的大小的乘积，表示笛卡尔积的大小





     表示方法：二维表（每行  一个元组 || 每列  一个域）
关系：笛卡尔积的子集










     元组：通常用t表示
     单元关系与二元关系：n=1，单元/一元
				        n=2，二元
     关系的表示：也是一个二维表（每行  一个元组 || 每列  一个域）
     属性：关系中不同列可以对应相同的域，为加以区分对每列起一个名字，称为属性

     候选码：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码
     全码：关系模式的所有属性组是这个关系模式的候选码，称为全码
     主码：若一个关系有多个候选码，则选定其中一个为主码
     主属性：候选码的诸属性称为主属性
     非主属性：不包含在任何候选码中的属性称为非主属性
三类关系
     基本关系（基本表或基表）：实际存在的表，是实际存储数据的逻辑表示
     查询表：查询结果对应的表
     视图表：由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据
基本关系的性质
     1 列是同质的（同类型、同域）
     2 不同的列可出自同一个域
     3 列的顺序无所谓，列的次序可以任意交换
     4 任意两个元组的候选码不能相同
     5 行的顺序无所谓，行的次序可以任意交换
     6 分量必须取原子值（规范条件中最基本的一条）

关系模式
什么是关系模式
     关系模式 is 型
     关系 is 值
     关系模式是对关系的描述，需要指出
	  元组集合（关系）的结构（属性构成、属性来自的域、属性与域之间的映象关系）
	  元组语义以及完整性约束条件
	  属性间的数据依赖关系集合
定义关系模式
	R（U, D, DOM, F）






	通常可以简记为R（U）或R（A1, A2, …, An）









关系模式与关系
     关系模式->对关系的描述；静态的、稳定的
     关系->关系模式在某一时刻的状态或内容；动态的、随时间不断变化的



关系数据库
关系数据库：在一个给定的应用领域中，所有关系的集合构成一个关系数据库
关系数据库的型：关系数据库模式，对关系数据库的描述


关系数据库的值：关系模式在某一时刻对应的关系的集合，简称为关系数据库


二、关系操作
基本关系操作
常用的关系操作
     查询：选择、投影、连接、除、并、交、差
     数据更新：插入、删除、修改
     查询的表达能力是其中最主要的部分
关系操作的特点
     集合操作方式：操作的对象和结果都是集合，一次一集合的方式
关系数据库语言的分类
     关系代数语言：用对关系的运算来表达查询要求（ISBL）
     关系演算语言：用谓词来表达查询要求
			（元组关系演算语言：APLHA、QUEL；域关系演算语言：QBE）
     具有关系代数和关系演算双重特点的语言（SQL）",第二章 关系数据库（第1课）,2022-09-26 00:47:31
2020213354,"三、关系的完整性

关系的三类完整性约束
     实体完整性和参照完整性：
	关系模型必须满足的完整性约束条件，关系的两个不变性，应该由关系系统自动支持
     用户定义的完整性：
	应用领域需要遵循的约束条件，体现了具体领域中的语义约束

实体完整性
	若属性A是基本关系R的主属性，则属性A不能取空值
实体完整性规则的说明
1 实体完整性规则是针对基本关系而言的，一个基本表通常对应现实世界的一个实体集
2 现实世界中的实体是可区分的，即它们具有某种唯一性标识。
3 关系模型中以主码作为唯一性标识。
4 主码中的属性即主属性不能取空值。
	主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，
	这与第（2）点相矛盾，因此这个规则称为实体完整性

参照完整性
关系间的引用
	在关系模型中实体及实体间的联系都是用关系来描述的，因此可能存在着关系与关系间的引用
外码
	设F是基本关系R的一个或一组属性，但不是关系尺的码。如果F与基本关系S的主码Ks相对应，则称F是基本关系R的外码
	基本关系R称为参照关系
	基本关系S移为被参照关系或目标关系
关系R和S不一定是不同的关系
目标关系S的主码Ks和参照关系的外码F必须定义在同一个（或一组）域上
外码并不一定要与相应的主码同名
     当外码与相应的主码属于不同关系时，往往取相同的名字，以便于识别
参照完整性规则
	若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：
	*或者取空值 （F的每个属性值均为空值）
	*或者等于S中某个元组的主码值

用户定义的完整性
	针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求
	关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能

四、关系代数

概述
	关系代数的运算按运算符的不同可分为传统的集合运算和专门的关系运算两类
	比较运算符和逻辑运算符是用来辅助专门的关系运算符进行操作的

传统的集合运算
并、差、交、笛卡尔积",第二章 关系数据库（第2课）,2022-09-26 15:29:46
2020213354,"专门的关系运算
选择
	又称为限制
	选择运算符含义：在关系R中选择满足给定条件的诸元组
	从行的角度进行的运算
投影
	投影运算符含义：从R中选择出若干属性列组成新的关系
	主要是从列的角度进行运算
	    （不仅取消了原关系中的某些列，而且还可能取消某些元组，避免重复行）
连接
	也称为0连接
	连接运算的含义：
		从两个关系的笛卡尔积中选取属性间满足一定条件的元组
	两类常用连接运算：等值连接、自然连接
	一般的连接：从行的角度进行运算
	     自然连接：还需要取消重复列，同时从行和列的角度进行运算
	外连接：把舍弃的元组也保存在结果关系中，而在其他属性上填空值
	     左外连接：只把左边关系R中要舍弃的元组保留
	     右外连接：只把右边关系S中要舍弃的元组保留
除
	P与S的除运算得到一个新的关系P(X)，P是R中满足下列条件的元组在X属性列上的投影：
		元组在X上分量值x的象集Yx包含S在Y上投影的集合
	同时从行和列角度进行运算",第二章 关系数据库（第3课）,2022-10-29 17:48:27
2020213354,"连接查询
	• 连接查询：同时涉及多个表的查询
	• 连接条件或连接谓词：用来连接两个表的条件
	• 连接查询的执行过程

等值与非等值连接查询
	等值连接：连接运算符为=
	自然连接：等值基础上去掉重复列

自身连接
	• 一个表与其自己进行连接
	• 需要给表起别名以示区别
	• 由于所有属性名都是同名属性，因此必须使用别名前缀

外连接（左外连接、右外连接）
	外连接与普通连接的区别
		• 普通连接操作只输出满足连接条件的元组
		• 外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出

复合条件连接
	WHERE子句中含多个连接条件

嵌套查询
	嵌套查询概述
	• 一个SELECT-FROM-WHERE语句称为一个查询块
	• 将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询
	• 子查询的限制
		＞不能使用ORDER BY子句
	• 层层嵌套方式反映了SQL语言的结构化
	• 有些嵌套查询可以用连接运算替代

带有IN谓词的子查询

带有比较运算符的子查询
	当能确切知道内层查询返回单值时，可用比较运算符（>, <, =, >=, <=, !=或<>）
	与ANY或ALL谓词配合使用

带有ANY （SOME）或ALL谓词的子查询
	ANY：任意一个值
	ALL：所有值

带有EXISTS谓词的子查询
	EXISTS谓词
		• 存在量词彐
		• 带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值 “false”
			＞若内层查询结果非空，则外层的WHERE子句返回真值
			＞若内层查询结果为空，则外层的WHERE子句返回假值
		• 由EXISTS引出的子查询，其目标列表达式通常都用*，
		  因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义
	NOT EXISTS谓词
			＞若内层查询结果非空，则外层的WHERE子句返回假值
			＞若内层查询结果为空，则外层的WHERE子句返回真值

集合查询
	集合操作的种类
		• 并操作UNION
		• 交操作INTERSECT
		• 差操作EXCEPT
	参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同

Select语句的一般形式",第三章 关系数据库标准语言SQL（第2课）,2022-10-30 18:52:08
2020213354,"四、数据更新

插入数据
两种插入方式：
插入元组
	• INTO子句
		＞属性列的顺序可与表定义中的顺序不一致
		＞没有指定属性列
		＞指定部分属性列
	• VALUES子句
		提供的值必须与INTO子句匹配
		＞值的个数
		＞值的类型

插入子查询结果（可以一次插入多个元组）
	• INTO子句（与插入元组类似）
	• 子查询
		SELECT子句目标列必须与INTO子句匹配
		＞值的个数
		＞值的类型
DBMS在执行插入语句时会检查所插元组是否破坏表上己定义的完整性规则
	• 实体完整性
	• 参照完整性
	• 用户定义的完整性
		> NOT NULL约束
		> UNIQUE约束
		> 值域约束

修改数据
	• SET子句
		＞指定修改方式
		＞要修改的列
		＞修改后取值
	• WHERE子句
		＞指定要修改的元组
		＞缺省表示要修改表中的所有元组

三种修改方式：
修改某一个元组的值
修改多个元组的值
带子查询的修改语句
DBMS在执行修改语句时会检查修改操作是否破坏表上己定义的完整性规则
	• 实体完整性
	• 主码不允许修改
	• 用户定义的完整性
		> NOT NULL约束
		> UNIQUE约束
		> 值域约束

删除数据
	• WHERE子句
		> 指定要删除的元组
		> 缺省表示要删除表中的全部元组，表的定义仍在字典中

三种删除方式：
删除某一个元组的值
删除多个元组的值
带子查询的删除语句

五、视图
视图的特点：
	• 虚表，是从一个或几个基本表（或视图）导出的表
	• 只存放视图的定义，不存放视图对应的数据
	• 基表中的数据发生变化，从视图中查询出的数据也随之改变
基于视图的操作：
	查询、删除、受限更新、定义基于该视图的新视图

定义视图
建立视图
	• RDBMS执行CREATE VIEW语句时只是把视图定义存入数据字典，并不执行其中的SELECT语句。
	• 在对视图查询时，按视图的定义从基本表中将数据查出。
对IS_Student视图的更新操作：
	修改操作：自动加上Sdept=‘IS’的条件
	删除操作：白动加上Sdept=‘IS’的条件
	插入操作：自动检查Sdept属性值是否为’IS’
		• 如果不是，则拒绝该插入操作
		• 如果没有提供Sdept属性值，则自动定义Sdept为’IS’
基于多个基表的视图
基于视图的视图
带表达式的视图
分组视图
不指定属性列

删除视图
	• 该语句从数据字典中删除指定的视图定义
	• 如果该视图上还导出了其他视图，使用CASCADE级联
	  删除语句，把该视图和由它导出的所有视图一起删除
	• 删除基表时，由该基表导出的所有视图定义都必须显式地
	  使用DROP VIEW语句删除

查询视图
	用户角度：查询视图与查询基本表相同
	RDBMS实现视图查询的方法
		• 视图消解法
			进行有效性检查
			转换成等价的对基本表的查询
			执行修正后的查询

视图消解法的局限
	有些情况下，视图消解法不能生成正确查询。

更新视图
• 更新视图的限制：一些视图是不可更新的，因为对这些视
    图的更新不能唯一地有意义地转换成对相应基本表的更新
• 允许对行列子集视图进行更新
• 对其他类型视图的更新不同系统有不同限制

视图的作用
视图能够简化用户的操作
视图使用户能以多种角度看待同一数据
视图对重构数据库提供了一定程度的逻辑独立性
视图能够对机密数据提供安全保护
适当的利用视图可以更清晰的表达查询",第三章 关系数据库标准语言SQL（第3课）,2022-11-28 16:58:05
2020213354,"第五章 数据库完整性（数据的正确性和相容性）
数据的完整性和安全性是两个不同概念
	• 数据的完整性
		＞ 防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据
		＞ 防范对象：不合语义的、不正确的数据
	• 数据的安全性
		＞ 保护数据库防止恶意的破坏和非法的存取
		＞ 防范对象：非法用户和非法操作
为维护数据库的完整性，DBMS必须：
	1.提供定义完整性约束条件的机制
	2.提供完整性检查的方法
	3.违约处理

一、实体完整性

实体完整性定义
关系模型的实体完整性
	• CREATE TABLE中用PRIMARY KEY定义
单属性构成的码有两种说明方法
	• 定义为列级约束条件
	• 定义为表级约束条件
对多个属性构成的码只有一种说明方法
	• 定义为表级约束条件

实体完整性检查和违约处理
	插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。包括：
	检查主码值是否唯一，如果不唯一则拒绝插入或修改
	检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改
	检查记录中主码值是否唯一的一种方法是进行全表扫描

二、参照完整性

参照完整性定义
	关系模型的参照完整性定义
	• 在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码
	• 用REFERENCES短语指明这些外码参照哪些表的主码

eg：关系SC中一个元组表示一个学生选修的某门课程的成绩，
     （Sno，Cno）是主码。Sno， Cno分别参照引用Student
       表的主码和Course表的主码。

参照完整性检查和违约处理
参照完整性违约处理
拒绝(NO ACTION)执行
	• 默认策略
级联(CASCADE)操作
设置为空值 (SET-NULL)
	• 对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值

三、用户定义的完整性

• 用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求
• RDBMS提供，而不必由应用程序承担

属性上的约束条件的定义
CREATE TABLE时定义
列值非空 (NOT NULL)
列值唯— (UNIQUE)
检查列值是否满足一个布尔表达式 (CHECK)

属性上的约束条件检查和违约处理
• 插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足
• 如果不满足则操作被拒绝执行

元组上的约束条件的定义
• 在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制
• 同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件

元组上的约束条件检查和违约处理
• 插入元组或修改属性的值时，RDBMS检查元组上的约束条件是否被满足
• 如果不满足则操作被拒绝执行

四、完整性约束命名字句

CONSTRAINT约束

修改表中的完整性限制
	使用ALTER TABLE语句修改表中的完整性限制

五、域中的完整性限制

六、触发器
	触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程
		• 由服务器自动激活
		• 可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力

定义触发器
创建者：表的拥有者
触发器名
表名：触发器的目标表
触发事件：INSERT、DELETE、UPDATE
触发器类型
	＞ 行级触发器（FOR EACH ROW)
	＞ 语句级触发器 (FOR EACH STATEMENT)
触发条件
	• 触发条件为真
	• 省略WHEN触发条件
触发动作体
	• 触发动作体可以是一个磨名PL/SQL过程块
	• 也可以是对己创建存储过程的调用

激活触发器
• 触发器的执行，是由触发事件激活的，并由数据库服务器自动执行
• 一个数据表上可能定义了多个触发器，遵循如下的执行顺序：
（1）执行该表上的BEFORE触发器；
（2）激活触发器的SQL语句；
（3）执行该表上的AFTER触发器。

删除触发器
• 删除触发器的SQL语法：
	DROP TRIGGER<触发器名＞ ON <表名＞；
• 触发器必须是一个已经创建的触发器，
    并且只能由具有相应权限的用户删除",第五章 数据库完整性,2022-12-18 20:36:03
2020213354,"第四章 数据库安全性

问题的提出
	• 数据库的一大特点是数据可以共享
	• 数据共享必然带来数据库的安全性问题
	• 数据库系统中的数据共享不能是无条件的共享
数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏
系统安全保护措施是否有效是数据库系统主要的性能指标之一

一、计算机安全性概述（自学）

数据库的不安全因素
非授权用户对数据库的恶意存取和破坏
数据库中重要或敏感的数据被泄露
安全环境的脆弱性

计算机系统安全性
	为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等
三类计算机系统安全性问题：
	技术安全类
	管理安仝类
	政策法律类

安全标准简介

二、数据库安全性控制

非法使用数据库的情况：
• 编写合法程序绕过DBMS及其授权机制
• 直接或编写应用程序执行非授权操作
• 通过多次合法查询数据库从中推导出一些保密数据

数据库安全性控制的常用方法：
  用户标识和鉴定
  存取控制
  视图
  审计
  数据加密

用户标识与鉴别
	系统提供的最外层安全保护措施
静态口令鉴别
	• 用户标识、口令
	• 系统核对口令以鉴别用户身份
	• 用户名和口令易被窃取
动态口令鉴别
	每个用户预先约定好一个计算过程或者函数
智能卡鉴别
	不可复制的硬件
生物特征鉴别
	指纹、虹膜掌纹等生物特征

存取控制
存取控制机制组成：
	• 定义用户权限
	• 合法权限检查
用户权限定义和合法权检查机制一起组成了DBMS的安全子系统
常用存取控制方法：
	自主存取控制（DAC）、强制存取控制（MAC）

自主存取控制方法
自助存取控制
	• 用户对不同的数据对象有不同的存储权限
	• 不同的用户对同一对象也有不同的权限
	• 用户还可以将其拥有的存取权限转授给其他用户
	• 通过 SQL 的 GRANT 语句和 REVOKE 语句实现
用户权限
	• 用户权限组成：
		数据对象+操作类型
	• 定义用户存取权限：
		定义用户可以在哪些数据库对象上进行哪些类型的操作
	• 定义存取权限称为：授权

授权与回收
GRANT语句
• 发出GRANT：
	＞DBA
	＞数据库对象创建者（即属主Owner）
	＞拥有该权限的用户
•  接受权限的用户
	＞一个或多个具体用户
	＞PUBLIC （全体用户）
• WITH GRANT OPTION子句：
	＞指定：可以再授予
	＞没有指定：不能传播
• 不允许循环授权

REVOKE语句
SQL灵活的授权机制
DBA：拥有所有对象的所有权限
	• 不同的权限授予不同的用户
用户：拥有自己建立的对象的全部的操作权限
	• GRANT：授予其他用户
被授权的用户
	• “继续授权” 许可：再授予
所有授予出去的权力在必要时又都可用REVOKE语句收回

数据库角色
数据库角色
	被命名的一组与数据库操作相关的权限
	• 角色是权限的集合
	• 可以为一组具有相同权限的用户创建一个角色
	• 简化授权的过程

强制存取控制方法
自主存取控制缺点
	• 可能存在数据的“无意泄露”
	• 原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记
	• 解决：对系统控制下的所有主客体实施强制存取控制策略
强制存取控制 (MAC)
	• 保证更高程度的安全性
	• 用户不能直接感知或进行控制
	• 适用于对数据有严格而固定密级分类的部门
		＞军事部门
		＞政府部门
主体是系统中的活动实体
	＞DBMS所管理的实际用户
	＞代表用户的各进程
客体是系统中的被动实体，是受主体操纵的
	＞文件
	＞基表
	＞索引
	＞视图
敏感度标记
	• 绝密
	• 机密
	• 可信
	• 公开 
主体的敏感度标记称为许可证级别，客体的敏感度标记称为密级
强制存取控制规则
	• 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体
	• 仅当主体的许可证级别（小于或）等于客体的密级时，该主体才能写相应的客体
修正规则
	• 主体的许可证级别＜=客体的密级主体能写客体
规则的共同点
	禁止了拥有高许可证级别的主体更新低密级的数据对象
MAC与DAC
	DAC与MAC共同构成DBMS的安全机制
	实现MAC时要首先实现DAC
	• 原因：较高安全性级别提供的安全保护要包含较低级别的所有保护

视图机制
	把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护
	• 主要功能是提供数据独立性，无法完全满足要求
	• 间接实现了支持存取谓词的用户权限定义",第四章 数据库安全性,2022-12-18 20:36:10
2020213354,"第六章 关系数据理论

一、问题的提出

关系数据库逻辑设计
• 针对具体问题，如何构造一个适合于它的数据模式
• 数据库逻辑设计的工具——关系数据库的规范化理论

概念回顾
	关系、关系模式、关系数据库、关系数据库的模式

关系模式的形式化定义
	关系模式由五部分组成，即它是一个五元组：R(U, D, DOM, F)
	R：关系名
	U：组成该关系的属性名集合
	D：属性组U中属性所来自的域
	DOM：属性向域的映象集合
	F：属性间数据的依赖关系集合

什么是数据依赖
完整性约朿的表现形式
• 限定属性取值范围：例如学生成绩必须在0-100之间
• 定义属性值间的相互关连(主要体现于值的相等与否)，这就是数据依赖，它是数据库模式设计的关键

数据依赖
• 一个关系内部属性与属性之间的约束关系
• 现实世界属性间相互联系的抽象
• 数据内在的性质
• 语义的体现

数据依赖的类型
	函数依赖（FD）、多值依赖（MVD）、其他

关系模式的简化定义
• 关系模式R (U, D, DOM, F) 简化为一个三元组：R (U, F)
• 当且仅当U上的一个关系 r 满足F时，r 称为关系模式 R (U, F）的一个关系

数据依赖对关系模式影响
关系模式Student<U，F>中存在的问题：
	数据冗余太大、更新异常、插入异常、删除异常
结论：
	• Student关系模式不是一个好的模式。
	• “好”的模式：
		不会发生插入异常、删除异常、更新异常，数据冗余应尽可能少
原因：
	由存在于模式中的某些数据依赖引起的
解决方法：
	通过分解关系模式来消除其中不合适的数据依赖",第六章 关系数据理论（第1课）,2022-12-25 21:18:22
2020213354,"第六章 关系数据理论

一、问题的提出

关系数据库逻辑设计
• 针对具体问题，如何构造一个适合于它的数据模式
• 数据库逻辑设计的工具——关系数据库的规范化理论

概念回顾
	关系、关系模式、关系数据库、关系数据库的模式

关系模式的形式化定义
	关系模式由五部分组成，即它是一个五元组：R(U, D, DOM, F)
	R：关系名
	U：组成该关系的属性名集合
	D：属性组U中属性所来自的域
	DOM：属性向域的映象集合
	F：属性间数据的依赖关系集合

什么是数据依赖
完整性约朿的表现形式
• 限定属性取值范围：例如学生成绩必须在0-100之间
• 定义属性值间的相互关连(主要体现于值的相等与否)，这就是数据依赖，它是数据库模式设计的关键

数据依赖
• 一个关系内部属性与属性之间的约束关系
• 现实世界属性间相互联系的抽象
• 数据内在的性质
• 语义的体现

数据依赖的类型
	函数依赖（FD）、多值依赖（MVD）、其他

关系模式的简化定义
• 关系模式R (U, D, DOM, F) 简化为一个三元组：R (U, F)
• 当且仅当U上的一个关系 r 满足F时，r 称为关系模式 R (U, F）的一个关系

数据依赖对关系模式影响
关系模式Student<U，F>中存在的问题：
	数据冗余太大、更新异常、插入异常、删除异常
结论：
	• Student关系模式不是一个好的模式。
	• “好”的模式：
		不会发生插入异常、删除异常、更新异常，数据冗余应尽可能少
原因：
	由存在于模式中的某些数据依赖引起的
解决方法：
	通过分解关系模式来消除其中不合适的数据依赖",第六章 关系数据理论（第1课）,2022-12-25 21:18:22
2020213354,"二、规范化

	规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。

函数依赖
• 函数依赖
• 平凡函数依赖与非平凡函数依赖
• 完全函数依赖与部分函数依赖
• 传递函数依赖

码
主属性与非主属性
• 包含在任何一个候选码中的属性，称为主属性
• 不包含在任何码中的属性，称为非主属性或非码属性
全码
• 整个属性组是码，称为全码

范式
• 范式是符合某一种级别的关系模式的集合
• 关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式
• 范式的种类：
	第一范式(1NF)
	第二范式(2NF)
	第三范式(3NF)
	BC范式(BCNF)
	第四范式(4NF)
	第五范式(5NF)
• 各种范式之间存在联系
• 一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化

2NF
1NF：一个关系模式Ｒ的所有属性都是不可分的基本数据项
2NF：Ｒ属于1NF，且每一个非主属性完全函数依赖于码

3NF
3NF：Ｒ属于2NF，且每一个非主属性既不部分依赖于码也不传递依赖于码

BCNF
BCNF：每一个决定因素都包含码",第六章 关系数据理论（第2课）,2022-12-25 21:19:36
2020213354,"第七章 数据库设计

三、概念结构设计

概念结构
什么是概念结构设计
	• 将需求分析得到的用户需求抽象为信息结构(即概念模型)的过程就是概念结构设计
	• 概念结构是各种数据模型的共同基础，它比数据模型更独立于机器、更抽象，从而更加稳定
	• 概念结构设计是整个数据库设计的关键
概念结构设计的特点
	• 能真实、充分地反映现实世界
	• 易于理解
	• 易于更改
	• 易于向关系、网状、层次等各种数据模型转换
描述概念模型的工具
	E-R模型

概念结构设计的方法与步骤
• 设计概念结构的四类方法：自顶向下、自底向上、逐步扩张、混合策略
• 常用策略：自顶向下地进行需求分析、自底向上地设计概念结构

数据抽象与局部视图设计
数据抽象
	抽象是对实际的人、物、事和概念中抽取所关心的共同特性，忽略非本质的细节，并把这些特性用各种概念精确地加以描述。
	• 概念结构是对现实世界的一种抽象
	• 三种常用抽象：
		分类、聚集、概括

局部视图设计
设计分E-R图的步骤：
选择局部应用
	• 在多层的数据流图中选择一个适当层次的数据流图，作为设计分E-R图的出发点
	• 通常以中层数据流图作为设计分E-R图的依据
逐一设计分E-R图
	任务：
	◦ 将各局部应用涉及的数据分别从数据字典中抽取出来
	◦ 参照数据流图，标定各局部应用中的实体、实体的属性、标识实体的码
	◦ 确定实体之间的联系及其类型 （1:1, 1:n, m:n）
	两条准则：
	◦ 属性不能再具有需要描述的性质，即属性必须是不可分的数据项，不能再由另一些属性组成
	◦ 属性不能与其他实体具有联系，联系只发生在实体之间

视图的集成
	各个局部视图即分E-R图建立好后，还需要对它们进行合并，集成为一个整体的数据概念结构即总E-R图。（多个分E-R图一次集成、逐步集成）
• 集成局部E-R图的步骤
	合并、修改与重构
• 各分E-R图存在冲突
	各个分E-R图之间必定会存在许多不一致的地方
• 合并分E-R图的主要工作与关键
	合理消除各分E-R图的冲突
• 冲突的种类
	属性冲突、命名冲突、结构冲突",第七章 数据库设计,2022-12-25 21:42:27
2020213355,"在绪论这一章中，首先我学习了数据库的四个基本概念：
1.数据
数据是数据库中存储的基本对象
数据定义：描述事物的符号记录
数据的种类：文本、图形、图像、音频、视频、学生的档案记录、货物的运输情况
数据的特点：数据与其语义是不可分的

2.数据库
数据库定义：长期存储在计算机内、有组织的、可共享的大量数据的集合。
数据库的基本特征：
数据按一定的数据模型组织、描述和存储
可为各种用户共享
冗余度较小
数据独立性较高
易扩展

3.数据库管理系统
DBMS（DataBase Management System）：
位于用户与操作系统之间的一层数据管理软件
是基础软件，是一个大型复杂的软件系统
DBMS的用途：科学地组织和存储数据、高效地获取和维护数据
DBMS的主要功能：
数据定义功能
数据组织、存储和管理
数据操纵功能
数据库的事务管理和运行管理
数据库的建立和维护功能（实用程序）

4.数据库系统
数据库系统的定义：在计算机系统中引入数据库后的系统构成
数据库的构成：
数据库
数据库管理系统（及其开发工具）
应用系统
数据库管理员

在第二部分，我认识了数据模型：
在数据库中用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息。通俗地讲数据模型就是现实世界的模拟。
数据模型应满足三方面要求：
能比较真实地模拟现实世界
容易为人所理解
便于在计算机上实现

而后，我知道了两大类数据模型：
1.概念模型
也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。
2.逻辑模型和物理模型
逻辑模型主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于DBMS实现。
物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。

客观对象的抽象过程是两步抽象
现实世界中的客观对象抽象为概念模型；
把概念模型转换为某一DBMS支持的数据模型。

数据模型的组成要素：
数据结构
数据操作
完整性约束条件

数据结构：描述数据库的组成对象，以及对象之间的联系
数据结构是对系统静态特性的描述

数据操作：
对数据库中各种对象的实例允许执行的操作及有关的操作规则   
对系统动态特性的描述

数据的完整性约束条件：一组完整性规则的集合 

信息世界中的基本概念：
1.实体：客观存在并可相互区别的事物
2.属性：实体所具有的某一特征
3.码：唯一标识实体的属性集称
4.域：属性的取值范围
5.实体型：用实体名及其属性名集合来抽象和刻画同类实体称为实体型
6.实体集：同一类型实体的集合
7.联系：分为实体内部的联系和实体之间的联系

两个实体型之间的联系     
一对一  
一对多
多对多

实体―联系方法(E-R方法)
用E-R图来描述现实世界的概念模型
E-R方法也称为E-R模型",第一章 绪论,2022-09-11 12:21:33
2020213355,"这节课中，我们巩固了有关数据的概念。
1. 数据是描述事物的符号记录。
2. 数据库是长期储存在计算机内的、有组织的、可共享的大量数据的集合。
3. 数据库管理系统是位于用户与操作系统之间的一层数据管理软件，用于科学地组织和存储数据、高效地获取和维护数据。
4. 数据库管理系统是指在计算机系统中引入数据库后的系统构成，一般由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员构成。

我们学习了常用的数据模型——层次模型、网状模型、关系模型。
层次模型
1. 满足条件：①有且只有一个结点没有双亲结点。②根以外的其他结点有且只有一个双亲结点。
2. 层次模型结点的双亲是惟一的，只能处理一对多的联系。
3. 层次模型的数据操纵主要有查询、插入、删除和更新。
4. 层次数据库的优点：
①层次模型的数据结构比较简单清晰。
②层次数据库的查询效率高。
③层次数据模型提供了良好的完整性支持。
5. 层次数据库的缺点：
①非层次联系不适合用层次模型表示。
②如果一个结点具有多个双亲结点等，用层次模型表示这类联系就很笨拙，只能通过引入冗余数据或创建非自然的数据结构来解决。对插入和删除操作的限制比较多，因此应用程序的编写比较复杂。
③查询子女结点必须通过双亲结点。
④由于结构严密，层次命令趋于程序化。

网状模型
1. 满足条件：①允许一个以上的结点无双亲。②一个结点可以有多于一个的双亲。
2. 层次模型结点的双亲可以不惟一。
3. 网状数据库的优点：
①能够更为直观地描述现实世界，如一个结点可以有多个双亲。
②具有良好的性能，存取效率较高。
4. 网状数据库的缺点：
①结构比较复杂，而且随着应用环境的扩大，数据库的结构就会变得越来越复杂，不利于最终用户掌握。
②网状模型的DDL、DML复杂，并且要嵌入某一种高级语言中。用户不容易掌握，不容易使用。
③由于记录之间的联系是通过存取路径实现的，应用程序在访问数据时必须选择适当的存取路径，因此用户必须了解系统结构的细节，加重了编写应用程序的负担。

关系模型
1. 关系模型中的术语：
①关系：一个关系对应通常说的一张表；
②元组：表中的一行即为一个元组；
③属性：表中的一列即为一个属性；
④码：某个属性组可以唯一确定一个元组，即为码；
⑤域：域是一组具有相同数据类型的值的集合；
⑥分量：元组中的一个属性值；⑦关系模式：对关系的描述。
2. 关系模型要求关系必须是规范的，关系的每一个分量必须是一个不可分的数据项。
3. 关系数据库的优点：
①关系模型与格式化模型不同，它是建立在严格的数学概念的基础上的。
②关系模型的概念单一。无论实体还是实体之间的联系都用关系来表示。对数据的检索和更新结果也是关系。所以其数据结构简单、清晰、用户易懂易学。
③关系模型的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作。
4. 关系数据库的缺点：
①由于存取路径对用户是隐蔽的，查询效率往往不如格式化数据模型。
②为了优化查询系统提高性能，增加了开发数据库管理系统的难度。",第一章 绪论-2,2022-09-17 10:44:30
2020213355,"2.1.1关系
关系模型只包含单一的数据结构——关系，现实世界的实体以及实体间的各种联系均用关系来表示。在用户角度，关系模型中数据的逻辑结构是一张二维表。
1.域：域是一组具有相同数据类型的值的集合。
2.笛卡尔积：给定一组域D1,D2,……,Dn，允许其中某些域是相同的，这组域的笛卡尔积为：D1*D2*……*Dn=｛（d1，d2，...，dn）｜diDi，i＝1，2，...，n｝笛卡尔积中每一个元素（d1，d2，...，dn）叫做一个n元组，简称元组。
3.关系：D1*D2*……*Dn的子集叫做在域D1，D2，……，Dn上的关系，表示R（D1,D2,……,Dn），关系是元组的集合。R:关系名。n:关系的目或度。
4.属性：
①关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域。
②由于域可以相同，为了加以区分，必须对每列起一个名字，称为属性。
③n目关系必有n个属性。
5. 主码：
①最极端的情况:关系模式的所有属性组是这个关系模式的候选码，称为全码。
②若一个关系有多个候选码，则选定其中一个为主码。
6. 候选码：若关系中某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码。
7. 主属性：
①候选码的诸属性称为主属性( Prime attribute)
②不包含在任何侯选码中的属性称为非主属性(Non-Prime attribute)或非码属性( Non-key attribute )
8. 关系有三种类型——基本关系（基本表或基表）、查询表和视图表。
①基本关系(基本表或基表)：实际存在的表，是实际存储数据的逻辑表示。
②查询表：查询结果对应的表。
③视图表：由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。
9.基本关系的性质
①列是同质的( Homogeneous) (同类型、同域)
②不同的列可出自同一个域
■其中的每一列称为一个属性
■不同的属性要给予不同的属性名
③列的顺序无所谓，列的次序可以任意交换
④任意两个元组的候选码不能相同
⑤行的顺序无所谓，行的次序可以任意交换
⑥分量必须取原子值，即每一个分量都必须是一个不可分的数据项。

2.1.2关系模式
1.关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。
2.关系模式(Relation Schema)是型，关系是值，关系模式是对关系的描述。
3.关系模式(关系的描述)可以形式化地表示为:R (U, D，DOM，F)
①R：关系名；
②U：组成该关系的属性名集合；
③D属性组U中属性所来自的域；
④D：OM属性向域的映象集合；
⑤F：属性间的数据依赖关系集合。
4.关系模式通常可以简记为R(U)或R(A1, A2, ... An)
①R:关系名；
②A,，A2，... An:属性名。
注:域名及属性向域的映象常常直接说明为属性的类型、长度。
5.关系模式与关系
①关系模式：关系的描述称为关系模式。
②关系：关系是关系模式在某一时刻的状态或内容。关系模式是静态的、稳定的，而关系是动态的、随着时间不断变化的。

2.1.3关系数据库
1.关系数据库：在一个给定的应用领域中，所有关系的集合构成一个关系数据库。
2.关系数据库的型:关系数据库模式对关系数据库的描述。
3.关系数据库模式包括：
■若干域的定义；
■在这些域上定义的若干关系模式。
4.关系数据库的值:关系模式在某一时刻对应的关系的集合，简称为关系数据库。

2.2.1基本关系操作
1.常用的关系操作
■查询:选择、投影、连接、除、并、交、差
■数据更新:插入、删除、修改
■查询的表达能力是其中最主要的部分
■选择、投影、并、差、笛卡尔基是5种基本操作
2.关系操作的特点
■集合操作方式:操作的对象和结果都是集合，一次一集合的方式。

2.2.2关系数据库语言的分类
1.关系代数语言：用对关系的运算来表达查询要求，代表: ISBL。
2.关系演算语言:用谓词来表达查询要求
①元组关系演算语言：谓词变元的基本对象是元组变量，代表: APLHA, QUEL。
②域关系演算语言：谓词变元的基本对象是域变量，代表：QBE。
3.具有关系代数和关系演算双重特点的语言，代表: SQL。",第二章 关系数据库,2022-09-24 12:24:19
2020213355,"在这堂课中，我们学习了关系的三类完整性约束——实体完整性、参照完整性和用户定义的完整性。

2.3.1关系的三类完整性约束
1.实体完整性和参照完整性:
关系模型必须满足的完整性约束条件称为关系的两个不变性，应该由关系系统自动支持。
2.用户定义的完整性:
应用领域需要遵循的约束条件，体现了具体领域中的语义约束。

2.3.2实体完整性规则
规则1 实体完整性规则：若属性A是基本关系R的主属性，则属性A不能取空值。
实体完整性规则的说明
①实体完整性规则是针对基本关系而言的。一个基木表通常对应现实世界的一个实体集，即它们具有某种唯一性标识。
②现实世界中的实体是可区分的
③关系模型中以主码作为唯一性标识。
④主码中的属性即主属性不能取空值。主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性。

2.3.3参照完整性
规则2 参照完整性规则：若属性（或属性组）F是基本关系R的外码它与基本关系S的主码K相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为:取空值（F的每个属性值均为空值)或者等于S中某个元组的主码值。
1.关系间的引用：
在关系模型中实体及实体间的联系都是用关系来描述的，因此可能存在着关系与关系间的引用。
2.外码：
①设F是基本关系尺R的一个或一组属性，但不是关系R的码。如果F与基木关系S的主码K相对应，则称F是基本关系R的外码。（基本关系R称为参照关系；基本关系S称为被参照关系或目标关系）
②关系R和S不一定是不同的关系。
③目标关系S的主码K和参照关系的外码F必须定义在同一个（或一组）域上。
④外码并不一定要与相应的主码同名。当外码与相应的主码属于不同关系时，往往取相同的名字，以便于识别。

2.3.4 用户定义的完整性
1. 针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。
2. 关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能。

而后，我们学习了关系代数。
2.4.1并(Union)
1.R和S具有相同的目n（即两个关系都有n个属性），相应的属性取自同一个域。
2.R∪S仍为n目关系，由属于R或属于S的元组组成R∪S={t|t∈R∨t∈S}

2.4.2 差(Difference)
1.R和S具有相同的目n，相应的属性取自同一个域。
2.R-S仍为n日关系，由属于R而不属于S的所有元组组成R-S={t|t∈R∧t∉S}

2.4.3 交（Intersection)
1.R和S具有相同的目n，相应的属性取自同一个域。
2.R∩S仍为n目关系，由既属于R又属于S的元组组成
①R∩S={t|t∈R∧t∈S}
②R∩S=R-(R-S)

2.4.4 笛卡尔积(Cartesian Product）
1.R:n目关系，k1个元组；
2.S:m目关系，k2个元组；
3.R×S
列:(n+m）列元组的集合
①元组的前n列是关系R的一个元组。
②后m列是关系S的一个元组。
行:k1×k2个元组
R×S={tr ts|tr∈R∧ts∈S}",第二章 关系数据库-2,2022-10-04 14:41:01
2020213355,"关系基本运算包括：选择、投影、连接、除运算等。
1、选择（selection）
1)选择又称为限制。
2)选择运算符的含义：在关系R中选择满足给定条件的诸元组，记作σF(R) = {t | t∈R∧F(t)= '真'}。F表示选择条件，是一个逻辑表达式， 基本形式为X1θY1。
3)选择运算是单目运算，它从一个关系R中选择出满足给定条件的所有元组，并同R具有相同的结构。
4)关系R的选择运算是从关系R中选择满足指定条件（用F表示）的元组构成的新关系。选择运算是选择关系中行的子集，即选择满足条件的元组。

2、投影（projection）
1)投影运算符的含义：从R中选择出若干属性列组成新的关系。记作πP(R)={t[A] | t∈R}，其中A为R中的属性列。
2)投影操作主要是从列的角度进行运算。但投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组(避免重复行)。
3)投影运算是单目运算，它从一个关系R所有属性中选择某些指定属性，组成一个新的关系。

3、连接（join）
1)连接也称为θ连接
2)连接运算的含义：从两个关系的笛卡尔积中选取属性间满足一定条件的元组。
3)两类常用连接运算
■等值连接
①“=”的连接运算称为等值连接
②等值连接的含义：从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组。
■自然连接
①自然连接是一种特殊的等值连接。两个关系中进行比较的分量必须是相同的属性组；在结果中把重复的属性列去掉。
②自然连接的含义：R和S具有相同的属性组，则U为R和S的全体属性集合。
4)一般的连接操作是从行的角度进行运算。自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。
5)三类外连接运算
■外连接：如果把舍弃的元组也保存在结果关系中，而在其他属性上填空值(Null)，这种连接就叫做外连接。
■左外连接：如果只把左边关系R中要舍弃的元组保留就叫做左外连接。
■右外连接：如果只把右边关系S中要舍弃的元组保留就叫做右外连接。

4、除运算（division）
1)设关系R除以关系S的结果为关系T，则T包括所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中。
2)给定关系R(X，Y)和S(Y，Z)，其中X，Y，Z为属性组。R中的与S中的可以有不同的属性名，但必须出自相同的域集。与S的除运算得到一个新的关系P(x)，P是R中满足下列条件的元组在X属性列上的投影：元组在X上分量值x的象集YX包含S在Y上投影的集合。
3)除操作是同时从行和列角度进行运算。

小结
■关系代数运算：并、差、交、笛卡尔积、投影、选择、连接、除
■基本运算：并、差、笛卡尔积、投影、选择
■交、连接、除：可以用5种基本运算来表达。引进它们并不增加语言的能力，但可以简化表达。",第二章 关系数据库-3,2022-10-29 15:42:24
2020213355,"关系数据库标准语言SQL
1.结构化查询语言是关系数据库的标准语言，也是一个通用的，功能性极强的关系数据库语言。功能：查询，数据库
模式创建，数据库数据的插入与修改，数据库安全性完整性定义与控制等。
2.SQL集数据查询，数据操纵，数据定义和数据控制功能于一体。
主要特点:
①综合统一
②高度非过程化
③面向集合的操作方式
④以同一种语法结构提供多种使用方式
⑤语言简洁，易学易用 
3.支持SQL的关系数据库管理系统同样支持关系数据库三级模式结构。
4.一个关系数据库管理系统的实例中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表，视图和索引等数据库对象。
5.定义模式CREATE SCHEMA<模式名> AUTHORIZATION<用户名>
6.删除模式 DROP SCHAMA<模式名>CASCADE|RESTRICT>
7.定义基本表CREATE TABLE<表名>(<列名><数据类型>[列级完整性约束条件]）;
8.数据类型：SQL中域的概念用数据类型来实现
9.模式与表：每一个基本表都属于某一个模式，一个模式包含多个基本表。
10.修改基本表:1ALTER TABLE<表名> 2[ADD [COLUMN]<新列名><数据类型>[完整性约束]] 3[ADD<表级完整性约束>] 4[DROP[COLUMN]<列=名>[CASCADE|RESTRICT]] 4[DROP CONSTRAINT<完整性约束名>[RESTRICT|CASCADE]] 5[ALTER COLUMN<列名><数据类型>];
11.删除基本表：DROP TABLE<表名>[RESTRICT|CASCADE];
12.索引的建立：CREATE [UNIQUE][CLUSTER]INDEX<索引名> ON <表名>(<列名>[<次序>][,<列名>[<次序>]]);
13.修改索引：ALTER INDEX<旧索引名>RENAME TO<新索引名>;
14.删除索引 DROP INDEX<索引名>;
15.数据查询 
SELECT [ALL|DISTINCT]<目标列表达式>[,<目标列表达式>]
FROM <表名或视图名>[,<表名或视图名>]|(<SELECT语句>)[AS]<别名>
[WHERE <条件表达式>]
[GROUP BY<列名1>[HAVING<条件表达式>]]
[ORDER BY<列名2>[ASC|DESC]];
16.单表查询 
①选择表中的若干列
②选择表中的若干元组 
③ORDER BY子句 
④聚集函数 
⑤GROUP BY子句:将查询结果按某一列或多列的值分组，值相等的为一组",第三章 关系数据库标准语言SQL,2022-10-30 15:56:35
2020213355,"3.5数据更新
3.5.1插入数据
1.两种插入方式
①插入元组
INSERT 
INTO<表名>[(<属性列1>[,<属性列2>]…)]
VALUES(<常量1>[,<常量2>]…);
INTO子句没有出现过的属性列，新元组在这些列上取空值。
②插入子查询结果
INSERT 
INTO<表名>[(<属性列1>[,<属性列2>]…)]
子查询；

3.5.2修改数据
1.语句格式
UPDATE<表名>
SET<列名>=<表达式》[,列名>=<表达式》]…
[WHERE<条件>]；
如果省略WHERE子句，则表示要修改表中的所有元组。
2.三种修改方式
①修改某一个元组的值
②修改多个元组的值
③带子查询的修改语句

3.5.3删除数据
1.语句格式
DELETE
FRPM<表名>
[WHERE<条件>];
DELETE删除的是表中的数据，而不是关于表的定义。

3.5.4空值的处理
1. 空值的产生 
2.空值的判断 
3.空值的约束条件 
4.空值的算术运算，比较运算和逻辑运算

3.6视图
3.6.1定义视图
CREATE VIEW<视图名>[(<列名>[,<列名>]…)]
AS<子查询>
[WITH CHECK OPTION]；
①子查询可以是任意的SELETE语句。
②WITH CHECK OPTION表示对视图进行UPDATE,INSERT,DELETE时要保证操作行满足视图定义中的谓词条件。
③组成视图的属性列要么全部省略要么全部指定。
④CREATE VIEW只是把视图的定义存入数据字典，并不执行SELECT语句。
⑤视图不仅可以建立在一个或多个基本表上，也可以建立在一个或多个已经定义好的视图上，或建立在基本表与视图上。
⑥带虚拟列的视图也称为带表达式的视图。
⑦用带有聚集函数和GROUP BY子句的查询来定义视图，称为分组视图。

3.7.2删除视图
DROP VIEW<视图名>[CASCADE];

3.7.3查询视图
定义视图并查询：视图一旦被定义就永久保存早数据字典中。
基于派生表的查询：只是在执行语句时临时定义，语句执行后定义即被删除。

3.7.4更新视图
①由于视图是不存在的虚表，所以对视图的更新最终要转换为对基本表的更新。
②并不是所有的视图都可更新。

3.7.5视图的作用
①视图能简化用户的操作。
②视图能使用户以多种角度看待同一数据。
③视图对重构数据库提供了一定程度的逻辑独立性。
④视图能够对机密数据提供安全保护。
⑤适当利用视图可以更清晰地表达查询。",第三章 关系数据库标准语言SQL-3,2022-11-06 10:49:51
2020213355,"第四章 数据库安全性
4.1.1 计算机系统的三类安全性问题
1. 计算机系统安全性：
为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。

2. 三类计算机系统安全性问题：
①技术安全类
②管理安全类
③政策法律类

4.1.2 安全标准简介
（1）TCSEC/TDI
1. TCSEC/TDI标准的基本内容：
从四个方面来描述安全性级别划分的指标
①安全策略
②责任
③保证
④文档

2.TCSEC/TDI安全级别划分
A1验证设计( Verified Design )
B3安全域(Security Domains)
B2结构化保护( Structural Protection )
B1标记安全保护(Labeled Security Protection)
C2受控的存取保护( Controlled Access Protection)
C1自主安全保护(Discretionary Security Protection)
D最小保护(Minimal Protection )

■按系统可靠或可信程度逐渐增高
■各安全级别之间:偏序向下兼容
■B2以上的系统：
还处于理论研究阶段；
应用多限于一些特殊的部门，如军队等；
美国正在大力发展安全产品，试图将目前仅限于少数领域应用的B2安全级别下放到商业应用中来，并逐步成为新的商业标准。


（2）CC
1.CC标准的基本内容：
提出国际公认的表述信息技术安全性的结构，
把信息产品的安全要求分为
①安全功能要求
②安全保证要求
2.CC文本组成
①简介和一般模型
②安全功能要求
③安全保证要求

3.CC评估保证级划分
EAL1功能测试(functionally tested)
EAL2结构测试(structurally tested)
EAL3系统地测试和检查( methodically tested and checked)
EAL4系统地设计、测试和复查(methodically designed, tested, and reviewed )
EAL5半形式化设计和测试(semiformally designed and tested )
EAL6半形式化验证的设计和测试(semiformally verified design and tested )
EAL7形式化验证的设计和测试( formally verified design and tested )

4.2 数据库安全性控制概述：
非法使用数据库的情况
①编写合法程序绕过DBMS及其授权机制
②直接或编写应用程序执行非授权操作
③通过多次合法查询数据库从中推导出一些保密数据

数据库安全性控制的常用方法：
①用户标识和鉴定
②存取控制
③视图
④审计
⑤密码存储

4.2.1 用户标识与鉴别(Identification & Authentication)
系统提供的最外层安全保护措施

4.2.2存取控制
1.存取控制机制组成：
①定义用户权限
②合法权限检查
2.用户权限定义和合法权检查机制一起组成了DBMS的安全子系统
3.常用存取控制方法
①自主存取控制( Discretionary Access Control，简称DAC)——C2级、灵活
②强制存取控制( Mandatory Access Control，简称MAC)——B1级、严格

4.2.3自主存取控制方法
1.通过SQL的GRANT语句和REVOKE语句实现
2.用户权限组成：
①数据对象
②操作类型
3.定义用户存取权限：定义用户可以在哪些数据库对象上进行哪些类型的操作
4.定义存取权限称为授权

4.2.4授权与回收
（1）GRANT
1.GRANT语句的一般格式：
GRANT <权限>[, <权限>]...
[ON <对象类型> <对象名>]
To <用户>[,<用户>...
[WITH GRANT OPTION];
语义:将对指定操作对象的指定操作权限授予指定的用户

2.发出GRANT：
①DBA
②数据库对象创建者(即属主Owner)
③拥有该权限的用户
按受权限的用户：
①一个或多个具体用户
②PUBLIC (全体用户)

3.WITH GRANT OPTION子句
指定:可以再授予
没有指定:不能传播
不允许循环授权

（2）REVOKE
1. 授予的权限可以由DBA或其他授权者用REVOKE语句收回
2. REVOKE语句的一般格式为:
REVOKE <权限>[,<权限>]...
[ON <对象类型> <对象名>]
FROM <用户>[,<用户>...;

4.2.5数据库角色
数据库角色：被命名的一组与数据库操作相关的权限
①角色的创建
CREATE ROLE <角色名>
②给角色授权
GRANT <权限> [，<权限>] ...
ON <对象类型>对象名
TO<角色> [，<角色>]...
③将一个角色授予其他的角色或用户
GRANT <角色1> [，<角色2>]
TO <角色3> [，<用户1>]...
[ WITH ADMIN OPTION]
④角色权限的收回
REVOKE <权限> [，<权限>] ...
ON <对象类型> <对象名>
FROM <角色> [，<角色> ]...

4.3视图机制
1.把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护。
①主要功能是提供数据独立性，无法完全满足要求。
②间接实现了支持存取谓词的用户权限定义。",第四章 数据库安全性,2022-11-19 12:39:09
2020213355,"第五章 数据库完整性
数据库的完整性是指数据的正确性和相容性。
数据库管理系统必须实现如下功能：
①提供定义完整性约束条件的机制
②提供完整性检查的方法
③进行违约处理

5.1实体完整性
5.1.1定义实体完整性
（1）关系模型的实体完整性在CREATE TABLE中用PRIMARY KEY定义。
（2）对单属性构成的码有两种说明方法，一种是定义为列级约束条件，另一种是定义为表级约束条件。
（3）对多个属性构成的码只有一种说明方法，即定义为表即约束条件。

5.1.2实体完整性检查和违约处理
（1）用PRIMARY KEY短语定义了关系的主码后，每当用户程序对基本表插入一条记录或对主码列进行更新操作时，关系数据库会对实体完整性规则进行检查：
①检查主码是否唯一
②检查主码的各个属性是否为空

5.2参照完整性
5.2.1定义参照完整性
关系模型的参照完整性在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码，用REFERENCES短语指明这些外码参照哪些表的主码。

5.2.2参照完整性检查和违约处理
参照完整性将两个表中的相应元组联系起来了。因此，对被参照表和参照表进行增，删，改操作时可能破坏参照完整性，必须进行检查以保证这两个表的相容性。
当不一致发生时，系统可以采用以下策略：
①拒绝（NO ACTION）执行
②级联（CASCADE）操作
③设置为空值

5.3用户定义的完整性
5.3.1属性上的约束条件
（1）属性上约束条件的定义
列值非空（NOT NULL）
列值唯一（UNIQUE）
检查列值是否满足一个条件表达式（CHECK短语）
（2）属性上约束条件的检查和违约处理

5.3.2元组上的约束条件
（1）元组上约束条件的定义
在CREATE TABLE语句中可以用CHECK短语定义元组上的约束条件，即元组级的限制。
同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。
（2）元组上约束条件的检查和违约处理

5.4完整性约束命名子句
（1）完整性约束命名子句
CONSTRAINT<完整性约束条件名><完整性约束条件>
（2）修改表中的完整性限制
ALTER TABLE

5.5域中的完整性限制

5.6断言
（1）创建断言的语句格式：
CREATE ASSERTION<断言名><CHECK子句>
（2）删除断言的语句格式

5.7触发器
触发器是用户定义在关系表上的一类由事件驱动的特殊过程

5.7.1定义触发器
触发器又叫做事件-条件-动作规则。
CREATE TRIGGER<触发器名>
{BEFORE|AFTER}<触发事件>ON<表名>
REFERENCEING NEW|OLD ROW AS<变量>
FOR EACH{ROW|STATEMENT}
[WHEN<触发条件>]<触发动作体>

5.7.2激活触发器
同一个表上的多个触发器激活时遵循如下的执行顺序：
①执行该表上的BEFORE触发器
②激活触发器的SQL语句
③执行该表上的AFTER触发器

5.7.3删除触发器
DROP TRIGGER<触发器名>ON<表名>;",第五章 数据库完整性,2022-11-27 13:46:54
2020213355,"第六章 关系数据理论
6.1问题的提出
（1）关系模式
由五部分组成，即一个五元组：R(U, D, DOM, F)。
R：关系名；
U：组成该关系的属性名集合；
D：属性组U中属性所来自的域；
DOM：属性向域的映象集合；
F：属性间数据的依赖关系集合。
（2）数据依赖
①一个关系内部属性与属性之间的约束关系
②现实世界属性间相互联系的抽象
③数据内在的性质
④语义的体现
（3）数据依赖的主要类型
①函数依赖
②多值依赖

6.2规范化
6.2.1函数依赖
（1）函数依赖定义：设R(U)是一个属性集U上的关系模式，X和Y是U的子集。
若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称“X函数确定Y”或“Y函数依赖于X”， 记作X→Y。
（2）平凡函数依赖与非平凡函数依赖：
在关系模式R(U)中，对于U的子集X和Y
①X→Y，但Y不属于X，则称X→Y是非平凡的函数依赖
②X→Y，但Y属于X，则称X→Y是平凡的函数依赖。
③若X→Y，则X称为这个函数依赖的决定属性组，也称为决定因素。
④若X→Y，Y→X， 则记作X←→Y。
⑤若Y不函数依赖于X，则记作X→/Y。
（3）完全函数依赖与部分函数依赖定义：
在R(U)中，如果X→Y，并且对于X的任何一个真子集X'，都有X'Y,则称Y对X完全函数依赖。若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖。
（4）传递函数依赖定义：
在R(U)中，如果X→Y(Y不属于X) ,Y→/Y，Y→Z，Z不属于Y则称Z对X传递函数依赖。如果Y→X，即X←→Y，则Z直接依赖于X。",第六章 关系数据理论,2022-11-28 17:10:49
2020213355,"6.2.2码
（1）定义：设K为R<U,F>中的属性或属性组合。若U完全依赖K,则K称为R的侯选码。
若候选码多于一个，则选定其中的一个做为主码。
（2）主属性与非主属性：
①包含在任何一个候选码中的属性，称为主属性。
②不包含在任何码中的属性称为非主属性或非码属性。
（5）全码：整个属性组是码，称为全码。
（6）外部码：关系模式R中属性或属性组X并非R的码，但X是另一个关系模式的码，则称X是R的外部码，也称外码。

6.2.3范式
（1）范式：符合某一种级别的关系模式的集合。
（2）关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。
（3）范式的种类:
①第一范式(1NF)
②第二范式(2NF)
③第三范式(3NF)
④BC范式(BCNF)
⑤第四范式(4NF)
⑥第五范式(5NF)
（4）1NF的定义：如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。
（5）2NF的定义：若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF。
（6）3NF的定义：关系模式R<U,F>中若不存在这样的码X、属性组Y及非主属性Z (Z不属于Y)，使得X→Y，Y→Z成立，Y→\\X，则称R<U,F>∈3NF.
■若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。
（7）BCNF的定义：关系模式R<U,F>∈1NF，若X→\\Y且Y包含于X时X必含有码，则R<U,F>∈BCNF。
（8）4NF的定义：关系模式R<U，F>∈1NF，如果对于R的每个非平凡多值依赖X→→Y (Y不包含于X)，X都含有码，则R∈4NF。
■如果R∈4NF，则R∈BCNF。不允许有非平凡且非函数依赖的多值依赖；允许的非平凡多值依赖是函数依赖。
（9）关系模式规范化的基本步骤：
1NF （消除非主属性对码的部分函数依赖）→2NF（消除非主属性对码的传递函数依赖）→3NF（消除主属性对码的部分和传递函数依赖）→BCNF（消除非平凡且非函数依赖的多值依赖）→4NF",第六章 关系数据理论-2,2022-12-18 17:49:41
2020213355,"7.3概念结构设计
7.3.1概念模型
①能真实，充分地反映现实世界。
②易于理解
③易于更改
④易于向关系，网状，层次等各种数据模型转换。

7.3.2 E-R模型
（1）实体型用矩形表示
（2）属性用椭圆形表示
（3）联系用菱形表示

7.3.5概念结构设计
（1）实体与属性的划分原则
①作为属性，不能再具有需要描述的性质，即属性必须是不可分的数据项。
②属性不能与其他实体具有联系。
（2）E-R图的集成
①合并E-R图，生成初步的E-R图。
在开发一个大型信息系统时，最经常采用的策略是自顶向下地进行需求分析，然后再自底向上地设计概念结构。
冲突：
属性冲突 
命名冲突 
结构冲突
②消除不必要的冗余，设计基本E-R图。

7.4逻辑结构设计
逻辑结构设计的任务就是把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构。
7.4.1 E-R图向关系模型的转换
一个实体型转换为一个关系模式，关系的属性就是实体的属性，关系的码就是实体的码。
①一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。
②一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。
③一个m:n联系转换为一个关系模式，与该联系相连的各实体的码以及联系本身属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。
④三个或三个以上实体间的一个多元联系可以转换为一个关系模式。
⑤具有相同码的关系模式可合并。

7.4.2数据模型的优化
数据库逻辑设计的结果不是唯一的

7.4.3设计用户子模式
（1）使用更符合用户习惯的别名
（2）可以对不同级别的用户定义不同的视图
（3）简化用户对系统的使用

7.5.1物理结构设计
数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于选定的数据库管理系统。为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构的过程，就是数据库的物理设计。
（1）确定数据库的物理结构。
（2）对物理结构进行评价。

7.5.2关系模式存储方法选择
DBMS常用存取方法：
①B+树索引存取方法的选择
②hash索引存取方法的选择
③聚簇存取方法的选择

7.6数据库的实施和维护
7.6.1数据的载入和应用程序的调试
数据库应用程序的设计应该与数据库设计同时进行

7.6.2数据库的试运行
在原有系统的数据有一小部分已输入数据后，就可以开始对数据库系统进行联合调试了，这又称为数据库的试运行。

7.6.3数据库的运行和维护
（1）数据库的转储和恢复
（2）数据库的安全性，完整性控制
（3）数据库性能的监督，分析和改造
（4）数据库的重组织与重构造",第七章 数据库设计,2022-12-18 17:59:26
2020213369,"1.数据库系统概述
四个基本概念：
①数据（包括其定义，种类，特点）（数据的含义称为数据的语义，数据与其语义是不可分的）
②数据库（包括其定义，基本特征）
③数据库管理系统（DBMS 数据管理软件）（用途，功能）
④数据库系统（DBS）（构成）（注意与数据库管理系统的区分④包含③）
2.数据模型
①两类：概念模型（信息模型）
             逻辑模型（用于DBMS实现）和物理模型（硬件设备上实现）
 两步抽象：客观对象→概念模型→数据模型
②数据模型的组成要素：
数据结构（对系统静态特性的描述）
数据操作（对系统动态特性的描述）
数据的完整性约束条件（一组完整性规则的集合）
3.概念模型
①用途及基本要求
②信息世界中的基本概念：
实体 
属性 
码（唯一识别实体的属性集称为码）
域（属性的取值范围） 
实体型（用实体名及其属性名集合来抽象和刻画同类实体） 
实体集（同一类型实体的集合）
联系（区分实体内部联系和实体之间的联系）

△实体－联系方法(E-R方法)
（1）矩形表示实体，菱形表示联系（2）注意局部E-R图合并为全局E-R图时，命名冲突和结构冲突",第一章概论1——第二周（9.5）课程反思,2022-12-24 22:34:27
2020213369,"第二周的课程主要学习了几种常用的数据模型（特点 存放 优缺点）
1.层次模型（最早 代表：IBM公司的IMS  树形结构表示各类实体间的联系）
特点：只能处理一对多的联系；记录值按其路径查看时才会有全部意义
存储：邻接法（前序遍历）、链接法（指引，子女-兄弟链接法，层次序列链接法）
2.网状模型（代表：DBTG系统）
特点：一个结点可以有多个双亲；可一对多/多对多
存储：单向、双向、环装、向首链接
优点：存储效率高，描述直接；
缺点：结构复杂；DDL、DML语言复杂
3.关系模型
①关系数据模型的数据结构
用户观点——二维表
关系（对应一张表） 元组（一行） 属性（一列） 
主码（表中某个属性组，可唯一确定一个元组）
分量（元组中的一个属性值） 关系模式（对关系的描述） 非规范关系（表中嵌表）
②关系数据模型的操作与完整性约束
（1）操作是集合操作，对象和结果都是关系
（2）完整性约束条件：实体完整性、参照完整性、用户定义的完整性
③关系数据模型的存储结构
实体与实体间的联系都用表来表示；表以文件的形式存储。
④优缺点
优：建立在严格的数学概念的基础上；概念单一；关系模型的存取路径对用户透明
缺：查询效率不如费关系模型；开发DBMS难度增加",第一章概论2——第三周（9.12）课程反思,2022-12-24 22:34:42
2020213369,"第三周，主要学习了关系数据库章节的关系数据结构及形式化定义。
一.关系数据结构及形式化定义
主要概念：1.关系：单一的数据结构（逻辑结构—二维表）
①域
②笛卡尔积 （元组 元量 基数） 
③关系
（元组 单元关系与二元关系 属性 码 全码 主码 主属性 
△三类关系（基本关系 查询表 视图表）
△基本关系的性质（列是同质的（同类型、同域）；不同的列可以出自同一个域；任意两个元组的候选码不能相同；分量必须取原子值）
） (笛卡尔积和关系的表示：行对元组，列对域）
2.关系模式
关系模式（对关系的描述）是型，关系是值
关系模式是静态稳定的，关系是动态的
3.关系数据库
在一个给定的应用领域中，所有关系的集合构成一个关系数据库
关系数据库的型（关系数据库模式）与值（关系模式在某一时刻对应的关系的集合，简称为关系数据库）
",第二章关系数据库1——第四周（9.19）课程反思,2022-12-24 22:35:43
2020213369,"关系数据库——关系代数——专门的关系运算
1.选择（限制）
在关系R中选择满足给定条件的诸元组
σF(R)={t|tR∧F(t)='真'}（F：选择条件，是一个逻辑表达式，基本形式为：X1θY1
） 选的是元组，是从行的角度进行的
2.投影（从R中选择出若干属性列组成新的关系） 从列的角度进行的（取消了原关系的某些列，还可能取消某些元组）
3.连接（θ连接）
a.从两个关系的笛卡尔积R×S中选取属性间满足一定条件的元组
b.两类常用连接运算：等值连接θ为=/自然连接（两个关系中进行比较的分量必须是相同的属性组，且在结果中把重复的属性列去掉）
c.一般从行的角度进行，自然连接同时从行和列的角度进行
d.外连接；左外连接；右外连接
4.除 除运算的结果是一个新的关系
同时从行和列的角度进行",第二章关系数据库3——第七周（10.10）课程反思,2022-12-24 22:35:43
2020213369,"
第四周主要学习了关系的完整性以及关系代数和关系的演算
1.关系的完整性
关系的三类完整性约束（实体完整性（主属性不能取空值），参照完整性（关系间的引用，外码，（基本关系R的外码属性F，且属性F与基本关系S的主码相对应，R中的每个元组在F上的值要么为空值要么等于S中某个元组的主码值）），用户定义的完整性（语义要求））
2.关系代数
注意笛卡尔积的运算：列相加，行相乘
",第二章关系数据库2——第五周（9.26）课程反思,2022-12-24 22:35:55
2020213369,"SQL概述
结构化查询语言，是关系数据库的标准语言
特点：
综合统一（集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体）；
高度非过程化；
面向集合的操作方式；
以同一种语法结构提供多种使用方法；
语言简洁，易学易用；
基本概念：三级模式结构；基本表（SQL中一个关系就对应一个基本表）；存储文件；视图
",第三章 关系数据库标准语言SQL预习——第八周（10.17）SQL第三章自习,2022-12-24 22:36:23
2020213369,"第三章关系数据库标准语言SQL——学生-课程数据库，数据定义，数据查询（单表查询）
一.数据定义
SQL的数据定义功能: 模式定义、表定义、视图和索引的定义
1.模式的定义与删除
a.定义模式 定义模式实际上定义了一个命名空间
b.删除模式 DROP SCHEMA <模式名> 
CASCADE:   删除模式的同时把该模式中所有的数据库对象全部删除
RESTRICT:如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。
2.基本表的定义、删除与修改
a.定义基本表
CREATE TABLE<表名>
           （<列名><数据类型>[<列级完整性约束条件>]
             [，<列名><数据类型>[<列级完整性约束条件>]]...
             [，<表级完整性约束条件>]）；
b.数据类型
c.模式与表（每一个基本表都属于某一个模式；一个模式包含多个基本表）
d.修改基本表
ALTERTABLE<表名>
	[ADD<新列名><数据类型>[完整性约束]]
	[DROP<完整性约束名>]	[ALTERCOLUMN<列名><数据类型>]；
e.删除基本表
DROP TABLE <表名>［RESTRICT| CASCADE］；
RESTRICT：删除表是有限制的。（不能被其他表的约束所引用）
CASCADE：删除该表没有限制。（相=相关依赖的对象一起 删除）
3.索引的建立与删除
建立索引语句格式：
CREATE[UNIQUE][CLUSTER]INDEX<索引名>ON<表名>(<列名>[<次序>][,<列名>[<次序>]]...)；
删除索引DROPINDEX<索引名>；
二.数据查询
语句格式
SELECT[ALL|DISTINCT]<目标列表达式>
	[，<目标列表达式>] ...
FROM <表名或视图名>[，<表名或视图名> ] ...
[WHERE<条件表达式>]
[GROUPBY<列名1>[HAVING<条件表达式>]]
[ORDERBY<列名2>[ASC|DESC]]；
1.单表查询
查询仅涉及一个表：
a.选择表中的若干列
（查询全部列选出所有属性列：
在SELECT关键字后面列出所有列名
将<目标列表达式>指定为*）
b.选择表中的若干元组
（1.消除取值重复的行
如果没有指定DISTINCT关键词，则缺省为ALL；指定DISTINCT关键词，去掉表中重复的行
2.查询满足条件的元组：
比较大小><；
确定范围BETWEEN ...AND  ...NOT BETWEEN  ...AND  ...;
确定集合IN<值表>,NOTIN<值表>；
字符匹配[NOT]LIKE‘<匹配串>’[ESCAPE‘<换码字符>’]
涉及空值的查询IS NULL 或IS NOT NULL “IS” 不能用“=” 代替
多重条件查询 AND高于OR）
c.ORDERBY子句
可以按一个或多个属性列排序
升序：ASC；降序：DESC；缺省值为升序
d.聚集函数
计数COUNT；计算总和SUM；计算平均值AVG；最大最小值MAX/MIN
e.GROUPBY子句
HAVING短语与WHERE子句的区别：
作用对象不同
WHERE子句作用于基表或视图，从中选择满足条件的元组
HAVING短语作用于组，从中选择满足条件的组。
",第三章 关系数据库标准语言SQL1——第九周（10.24）课程反思,2022-12-24 22:36:32
2020213369,"第三章数据库标准语言SQL（续）——数据查询（连接查询、嵌套查询、集合查询、Select语句的一般形式）
1.连接查询（同时涉及多个表的查询）
①等值与非等值连接查询（=）
②自身连接（一个表与其自己进行连接）
③外连接（外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出）（左外连接，由外连接）
④复合条件连接（）WHERE子句中含多个连接条件
2.嵌套查询：
①将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询
②子查询的限制：不能使用ORDER BY子句
③不相关子查询：子查询的查询条件不依赖于父查询；
相关子查询：子查询的查询条件依赖于父查询
a.带有IN谓词的子查询 b.带有比较运算符的子查询 c.带有ANY（SOME）或ALL谓词的子查询 d.带有EXISTS谓词的子查询
3.集合查询
①并操作：UNION交操作：INTERSECT差操作：EXCEPT②参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同
4.Select语句的一般形式",第三章 关系数据库标准语言SQL2——第十周（10.31）课程反思,2022-12-24 22:36:49
2020213369,"第三章数据库标准语言SQL（续2）——数据更新（插入、修改、删除）、视图（定义、查询、更新、作用）
一、数据更新
1.插入数据
①插入元组（INTO子句/VALUES子句）
②插入子查询（SELECT子句目标列必须与INTO子句匹配；值的个数，值的类型）结果
2.修改数据：
修改指定表中满足WHERE子句条件的元组
方法：①修改某一个元组的值②修改多个元组的值③ 带子查询的修改语句
3.删除数据：删除指定表中满足WHERE子句条件的元组
删除方式：① 删除某一个元组的值② 删除多个元组的值③ 带子查询的删除语句
二、视图
1.定义视图
CREATE  VIEW<视图名>  [(<列名>  [，<列名>]...)]
AS<子查询>[WITH  CHECK  OPTION]；
子查询不允许含有ORDER BY子句和DISTINCT短语
（基于多个基表的视图；基于视图的视图；带表达式的视图；分组视图；不指定属性列）
ps.删除视图：DROP  VIEW  <视图名>；
2.查询视图
例如：
SELECT  Sno，Sage       
FROM  Student
WHERE  Sdept= 'IS'  AND  Sage<20；
3.更新视图
①允许对行列子集视图进行更新②对其他类型视图的更新不同系统有不同限制
4.视图的作用
① 视图能够简化用户的操作②视图使用户能以多种角度看待同一数据③ 视图对重构数据库提供了一定程度的逻辑独立性④视图能够对机密数据提供安全保护⑤适当的利用视图可以更清晰的表达查询",第三章 关系数据库标准语言SQL3——第十一周课程反思,2022-12-24 22:36:59
2020213369,"第四章数据库安全性
一.计算机安全性概述
1.计算机系统的三类安全性问题：技术安全类，管理安全类，政策法律类
2.安全标准简介：
TCSEC/TDI标准（安全策略，责任，保证，文档；A1,B3,B2,B1,C2,C1,D偏序向下兼容），
CC标准（安全功能要求，安全保证要求）
二.数据库安全性控制
1.非法使用数据库的情况：绕过DBMS及其授权机制；非授权操作；多次合法查询推导保密数据
2.数据库安全性控制的常用方法：
用户标识和鉴定（最外层安全保护措施；口令；用户名和口令易被窃取）
存取控制（定义用户权限/合法权限检查）（常用存取控制方法：自主存取控制（通过SQL的GRANT语句和REVOKE语句实现；用户权限组成：数据对象，操作类型；授权与回收）；强制存取控制）；
视图；审计；密码存储

2.4授权与回收：
①GRANT 将对指定操作对象的指定操作权限授予指定的用户
a.发出GRANT：DBA 数据库对象创建者 拥有该权限的用户
b.接受权限的用户：一个或多个具体的用户 PUBLIC
c.WITH GRANT OPTION子句 指定（可以再授予）没有指定（不能传播）
对属性列的授权时必须明确指出相应属性列名
②REVOKE 授予的权限可以有DBA或其他授权者用REVOKE语句收回
2.5数据库角色：被命名的一组与数据库操作相关的权限（角色是权限的集合）
角色的创建（CREATE ROLE<角色名>）
给角色授权（GRANT<权限>[,<权限>]
	    ON<对象类型>对象名
	     TO<角色>[,<角色>]）
将一个角色授予其他的角色或用户（GRANT  <角色1>［，<角色2>］...
   TO  <角色3>［，<用户1>］... 
 ［WITH ADMIN OPTION）
角色权限的回收
（REVOKE <权限>［，<权限>］...
  ON <对象类型> <对象名>
  FROM <角色>［，<角色>］...）
2.6强制存取控制方法
强制存取控制（MAC）主体是系统中的活动实体；客体是系统中的被动实体，是受主体操纵的
强制存取控制规则(1)仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体(2)仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体",第四章数据库安全性——第十二周（11.14）课程反思,2022-12-24 22:37:20
2020213369,"第五章 数据库完整性
数据库的完整性：数据的正确性和相容性
1.实体完整性
①实体完整性定义
②实体完整性检查和违约处理
a.检查主码值是否唯一，如果不唯一则拒绝插入或修改
b.检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改
2.参照完整性
①参照完整性定义
关系模型的参照完整性定义：
a.在CREATE  TABLE中用FOREIGN KEY短语定义哪些列为外码
b.用REFERENCES短语指明这些外码参照哪些表的主码
②参照完整性检查和违约处理
3.用户定义的完整性
用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求
a.属性上的约束条件的定义
CREATE TABLE时定义：
列值非空（NOT NULL）；
列值唯一（UNIQUE）；
检查列值是否满足一个布尔表达式（CHECK；
b.属性上的约束条件检查和违约处理c.元组上的约束条件的定义：
在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制
d.元组上的约束条件检查和违约处理
4.完整性约束命名字句
①CONSTRAINT 约束：
CONSTRAINT <完整性约束条件名>
［PRIMARY KEY短语
|FOREIGN KEY短语
|CHECK短语］
②修改表中的完整性限制：使用ALTER TABLE语句修改表中的完整性限制
5.触发器
①定义触发器
CREATE TRIGGER语法格式：
CREATE TRIGGER <触发器名>  
{BEFORE | AFTER} <触发事件> ON <表名>
FOR EACH  {ROW | STATEMENT}
［WHEN <触发条件>］
<触发动作体>
②激活触发器
③删除触发器
DROP TRIGGER <触发器名> ON <表名>;",第五章 数据库完整性 课程反思,2022-12-24 22:48:57
2020213369,"第六章 关系数据理论
1.问题的提出
①关系 关系模式 关系数据库 关系数据库的模式
②关系模式的形式化定义
③数据依赖
a.完整性约束的表现形式
（1）限定属性取值范围（2）定义属性值间的相互关连（主要体现于值的相等与否），这就是数据依赖，它是数据库模式设计的关键
b.数据依赖：一个关系内部属性与属性之间的约束关系
c.数据依赖的类型：函数依赖；多值依赖；其他。
④关系模式的简化表示：
关系模式R（U, D, DOM, F）简化为一个三元组：R（U, F）
当且仅当U上的一个关系r满足F时，r称为关系模式R（U, F）的一个关系
2.规范化
①函数依赖：函数依赖；平凡函数依赖与非平凡函数依赖；完全函数依赖与部分函数依赖；
②码：设K为R<U,F>中的属性或属性组合。若K属于U，则K称为R的侯选码（Candidate Key）；（主属性与非主属性；全码；外部码）
③范式：符合某一种级别的关系模式的集合
（一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化）
④2NF：
a.1NF的定义：如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF；
b.2NF的定义：若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF
⑤3NF：若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码。
⑥ BCNF（BC范式）：关系模式R<U，F>∈1NF，若X→Y且Y ÍX时X必含有码，则R<U，F> ∈BCNF。
⑦多值依赖（平凡的多值依赖；非平凡的多值依赖）
⑧4NF：如果R ∈4NF，则R∈BCNF，不允许有非平凡且非函数依赖的多值依赖，允许的非平凡多值依赖是函数依赖。
3.数据依赖的公理系统",第六章 关系数据理论 课程反思,2022-12-28 20:48:30
2020213369,"第七章 数据库设计
1. 数据库设计概述：
特点；设计方法；基本步骤（需求分析阶段；概念结构设计阶段；逻辑结构设计阶段；数据库物理设计阶段；数据库实施阶段；数据库运行和维护阶段）；各级模式
2.需求分析：
任务；方法；数据字典（数据项；数据结构；数据流；数据存储；处理过程）
3.概念结构设计：
①概念结构（工具：E-R模型）；
②概念结构设计的方法（自顶向下；自定向上；逐步扩张；混合策略；常用策略）与步骤；③数据抽象（分类；聚集；概括）与局部视图设计（选择局部应用→逐一设计分E-R图）；④视图的集成
设计局部视图:a.选择局部应用b.逐一设计分E-R图
集成局部视图:
a.多个分E-R图一次集成；逐步集成
b.合并分E-R图，生成初步E-R图：各分E-R图存在冲突
c.冲突的种类：属性冲突（属性域冲突；属性取值单位冲突），命名冲突（同名异义；异名同义），结构冲突（同一对象在不同应用中具有不同的抽象；同一实体在不同分E-R图中所包含的属性个数和属性排列次序不完全相同；实体之间的联系在不同局部视图中呈现不同的类型）
d.消除不必要的冗余，设计基本E-R图：冗余；消除冗余的方法
e.验证整体概念结构
4.逻辑结构设计:
①E-R图向关系模型的转换（转换内容；转换原则（(1)一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并；(2)一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并；(3) 一个m:n联系转换为一个关系模式。(4)三个或三个以上实体间的一个多元联系转换为一个关系模式。(5)具有相同码的关系模式可合并）;
②数据模型的优化; 
③设计用户子模式
5.数据库的物理设计：
①数据库物理设计的内容和方法
② 关系模式存取方法选择（索引存取方法的选择；聚簇存取方法的选择；HASH存取方法的选择）
③确定数据库的存储结构（ 确定数据的存放位置；确定系统配置）
④评价物理结构
6.数据库实施和维护
①数据的载入和应用程序的调试
②数据库的试运行
③数据库的运行和维护
",第七章 数据库设计 课程反思,2022-12-31 23:32:24
2020213375,"在经过了一节课的学习和预习后面的学习内容后，我感到我的学习成果还有很大的不足，我对很多专业术语的理解程度不够，还有对一些数据库的概念的认识程度还不够深刻，导致我在课后习题中出现了一部分的错误。
之后我会努力在课下学习，努力跟上老师的脚步，争取取得更好的学习效果。",第一节课反思,2022-09-11 16:57:19
2020213375,在这节课中，老师为我们讲解了关系数据结构及形式化定义以及关系操作的相关内容，让我对这些内容有了一个深入，系统的理解。,第三节课反思,2022-10-08 22:34:26
2020213375,这节课中老师讲解了关系的完整性，还有关系代数应该怎么运算，并给了我们充足的时间进行尝试演算。解开了一直以来我对关系代数运算的误解。,第四节课反思,2022-10-08 22:37:02
2020213375,第二节课反思,在这节课中，老师为我们讲解了我们之前预习过的内容。经过老师细致耐心的讲解后，我对数据库的一些概念，比如数据模型深入等有了更加深入准确的理解。但对于关系的演算这个部分我还是有一些不太理解的地方，我会在课下进行针对性的学习。,2022-10-08 22:37:29
2020213375,"这节课老师讲解了关系数据库标准语言SQL，重点讲解了SQL 的产生与发展、SQL的特点、SQL的基本概念，并举了学生数据库的例子让我们更好地理解。
",第五节课反思,2022-12-30 16:07:20
2020213375,"在这节课中老师给我们讲解了什么是单表查询、连接查询、嵌套查询、集合查询、Select语句的一般形式。还讲了什么是等值查询与非等值查询，自身连接、外连接、复合条件连接等等内容。

",第六节课反思,2022-12-30 16:21:04
2020213375,"这节课老师主要讲授了数据更新，包括插入数据，修改数据，删除数据。还介绍了视图，基于视图的操作、查询、删除、受限更新、定义基于该视图的新视图
",第七节课反思,2022-12-30 16:32:51
2020213375,这节课的主要内容是数据库安全性，比如数据库安全性问题的产生是因为：数据库的一大特点是数据可以共享，数据共享必然带来数据库的安全性问题，数据库系统中的数据共享不能是无条件的共享,第八节课反思,2022-12-30 16:47:31
2020213375,"这节课的内容是如何保证数据库的安全性，比如用户标识与鉴别，存取控制，自主存取控制方法，授权与回收，数据库角色，强制存取控制方法
",第九节课反思,2022-12-30 16:49:43
2020213375,这节课我们学习了数据库完整性中的完整性约束命名字句，域中的完整性限制，触发器。,第十一节课反思,2022-12-30 16:56:48
2020213375,这节课我们学习了数据库完整性，主要内容有实体完整性，参照完整性，用户定义的完整性,第十节课反思,2022-12-30 16:56:57
2020213375,"这节课我们学习了关系数据理论，我们先回顾了一些概念：关系，关系模式，关系数据库，关系数据库的模式，然后学习了关系模式的形式化定义
",第十二节课反思,2022-12-30 16:59:48
2020213375,这节课我们学习了什么是范式，包括数据库的第一范式，第二范式，第三范式等等。然后学习了数据库的规范化。比如怎么把第一范式转化为第二范式，把第二范式转化为第三范式。,第十三节课反思,2022-12-30 17:01:51
2020213375,这节课我们学习了什么是概念结构设计以及概念结构设计的特点,第十四节课反思,2022-12-30 17:09:16
2020213375,这节课我们学习了数据库的逻辑结构设计，比如逻辑结构设计的任务，逻辑结构设计的步骤。还有ER图的画法,第十五节课反思,2022-12-30 17:09:45
2020213380,"       在第一堂的学习中，首先对这门课要学习的内容有了基本的了解，明确了数据、数据库、数据库管理系统、数据库系统这四个概念。了解了两大类数据模型，会用E-R图描述模型。
       可能是因为第一次接触数据库的相关知识，遇到一些比较专业的名词，如域、码等的时候，理解起来会有一些困难，需要反复思索才能弄明白。同时在画一些比较复杂的E-R图是有些吃力。",绪论学习反思,2022-09-11 21:14:31
2020213380,第二节课主要对常用几种数据模型进行了深入了解。学习到了层次模型、网状模型、关系模型的结构、特点、优缺点等，使得头脑中对于数据模型的概念更加清晰完整。在预习时一些理解不了的专业词汇以及结构，如关系模型中的元组、域等概念，配合上实例讲解也理解得更加清楚了。课后做的习题也都比较基础，再加上对这几种模型已经有了深入理解，不只是停留在表面的记忆，因此做起来并不是很困难。但在做习题的过程中发现，一些书上的细节知识并没有被注意到，因此在之后的学习中，跟着老师理解完知识后，要及时回顾课本和PPT，看看有没有遗漏的细节知识。,1.2 数据模型深入,2022-09-18 15:29:33
2020213380,"这节课深入学习了关系数据库，学到了关系数据结构和关系操作。在关系数据结构及形式化定义这一部分，主要学习了关系、关系模式、关系数据库三方面的内容，特别是笛卡尔积这一概念，在预习的时候理解仅停留在表面，这也使得我在看后面的内容时也觉得很难理解，经过上课老师的讲解，了解到笛卡尔积其实就是一种集合运算，是所有域的所有取值的一个组合。随后，学习了候选码、主码、全码等概念，这些概念可能但看起来有一些难理解，但是结合具体例子后就很好理解了。之后就是一些比较简单的内容：基本关系的性质、关系模式等。本来以为对于这一节的内容已经理解了，但是在做题时还是发现了问题，我没有将现有的知识和原来的知识结合起来，比如，之前学习了码，这次学习了候选码，遇到题的时候，我对于这两者的定义和区别就会有一些模糊。在之后的学习中，我会更加注重知识的系统性，将新知识与旧知识之间建立联系，进一步形成和完善自己的知识体系。
",2.1关系数据结构及形式化定义＆2.2关系操作,2022-09-24 22:46:04
2020213380,"        在这节课中，重点学习了关系的完整性约束：实体完整性、参照完整性和用户定义的完整性。实体完整性和用户定义的完整性在理解和应用的过程中都比较简单，但参照完整性对于我来说难度稍微有一些大。学习了概念并看了一个简单的例子后，觉得自己理解了。但面对更加复杂的例子的时候，就又觉得思维有一些混乱。经过反思，发现还是没有将参照完整性的基本概念和底层逻辑搞清楚。于是，我又在头脑中将参照完整性的概念和规则反复回忆并理解。结合一些具体的实例后，终于对参照完整性有了更加深入的理解，也理解了老师上课讲的一些小技巧，如主码不能被叫外码等。
        随后，学习了关系代数中一些传统的集合运算：并、差、交、笛卡尔积4种。由于高中有一定的基础，对于并、差和交的学习非常容易，很快就理解了。对于笛卡尔积的学习，在理解后觉得比较简单，但在实际做题时还是可能会出错，在这一点上之后会多加练习。",2.3关系的完整性＆2.4(1)关系代数,2022-10-04 08:50:03
2020213380,"在这节课中，学习了选择、投影、连接和除这四种专门运算。在学习这一节的内容时，就明显感觉比学习上一节的并、差、交、笛卡儿积的难度更大，在理解时也更加困难。
首先是选择运算，它可以提取出满足给定条件的诸元组，简单地来说，就是提取行。除此之外，还学习到了之前没有见过的“不等于”的运算符：<>。投影运算是选择出若干属性列，来组成新的关系，简单地来说，就是一种提取列的运算。同时，在进行投影运算时，要注意取消那些完全相同的行。连接运算需要从两个关系的笛卡儿积中选择属性间满足一定条件的元组，它是从行和列的角度进行运算的。有两个较为重要的连接：等值连接和自然连接。除此之外，还学习了外连接（右外连接、左外连接）。除运算是对我来说最难的一个运算，但是通过实例的讲解后，也能大致掌握，它也是从行和列的角度进行运算的。
经过课堂上一些题目的练习，我对于这四种运算已经基本掌握，但在完成除和连接的相关运算时，思考时间较长，之后还需多加练习。",2.4(2) 关系代数之专门的关系运算,2022-10-31 09:48:58
2020213380,"在这节课的学习中，我对关系数据库标准语言SQL有了初步的了解，还学习了数据定义、数据查询和数据更新的方法。它具有综合统一；高度非过程化；面向集合的操作方式；以同一种语法结构提供多种使用方式；语言简洁，易学易用五大特点。
在进行数据定义时，有模式定义、表定义、视图和索引的定义，针对每一个对象还可以进行创建、删除和修改的操作。在数据查询中，有单表查询、连接查询、嵌套查询、集合查询四种方式。这一节习题的难度属于中等偏简单，所以并没有遇到很大的问题，只不过在做习题时有些需要联系之前学习的内容，这让帮助我进一步巩固了之前所学知识。",3(1) SQL,2022-10-31 10:31:43
2020213380,"这节课针对上节课没有学习完的数据查询继续了学习，学习了连接查询、嵌套查询、集合查询三种查询方式。这一节的内容相较于上一届提升了一点难度。连接查询是同时涉及多个表的查询，又可细分为等值与非等值连接、自身链接、外连接和符合条件连接。嵌套查询是要将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询，但是嵌套查询中的子查询不能使用ORDER BY子句。根据子查询的查询条件是否依赖于父查询，又可将其分为不相关子查询和相关子查询。除此之外，还有带有IN谓词的子查询、带有比较运算符的子查询、带有ANY（SOME）或ALL谓词的子查询、带有EXISTS谓词的子查询。集合查询可以进行并操作、交操作、差操作，但是参加集合操作的各查询结果的列数必须相同，对应项的数据类型也必须相同。最后学习了SELECT语句的一般格式。在完成这一节习题的过程中，明显感觉到有一点吃力，需要联系之前的知识，所以我在发现有一些题目有些吃力的时候，复习了前面学习的内容，再做起来就会好很多。
",3（2）SQL,2022-10-31 10:57:22
2020213380,"这节课主要学习了SQL中的数据更新以及视图。数据更新包括插入数据，修改数据和删除数据。插入数据有两种方式：插入元组（可以一次插入多个元组）和插入子查询结果。修改数据有三种方式：修改某一个元组的值、修改多个元组的值和带子查询的修改语句。删除数据有三种方式：删除某一个元组的值、删除多个元组的值和带子查询的删除语句。这三种数据更新在理解和实践起来都没有很困难，同时在数据更新中很多地方都涉及到嵌套子查询，这也帮助我回顾复习了先前的知识，使知识更加系统。
随后，对视图进行了学习，学习了视图的定义、查询和更新。这些内容与前面学习的内容有很多相似之处，所以理解起来比较容易，但要特别注意的是，一定不要和前面学习的东西相混淆，因此课后我还需要加强对前面知识的复习，将新知识与旧知识进行对比，便于新知识的理解和旧知识的巩固。",3（3）SQL,2022-11-06 15:13:23
2020213380,"这节课并没有学习新的知识，而是通过第三章的练习题对所学的知识进行了巩固。
在做题的过程中，我也发现了一些存在的问题，特别是一些细节的知识。如is和=的区别和使用情景，汉字需要占两个字符，转义符的使用等。还有一些题在看题目的时候有一点思路，但是在真正写的时候就发现写不太出来，需要很长的思考时间，有时甚至需要翻书进行查阅。我认为这还是对知识理解的不够深入、不够系统，也不太能够灵活地运用。之后会及时复习，使知识形成逻辑体系，明确各种小知识点和语句的区别和使用场景。
",第三章习题课,2022-11-09 16:05:59
2020213380,"在这一节课中学习了数据库安全性的相关知识。了解了两种数据库安全标准：TCSEC标准和CC标准，同时掌握了这两种安全标准对于安全级别的划分和每一个级别的具体内容和应用场景。随后，重点学习了数据库的安全性控制。了解到编写合法程序绕过DBMS及其授权机制、直接或编写应用程序执行非授权操作、通过多次合法查询数据库从中推导出一些保密数据都属于非法使用数据库的情况。同时，在计算机系统中，安全措施是一级一级层层设置的，有用户、DBMS、OS、DB四个层级。数据库常用的安全性控制方法有：用户标识和鉴定、存取控制、视图、审计、密码存储等用户标识与鉴别是系统提供的最外层安全保护措施，可以通过口令来鉴别用户身份；存取控制机制由定义用户权限和合法权限检查组成，常用存取控制方法有自主存取控制和强制存取控制，自主存取控制是C2级，比较灵活。强制存取控制是B1级，较为严格。自主存取控制方法是通过GRANT语句和REVOKE语句实现的。同时，SQL拥有非常灵活的授权机制，用户可以将权限授予给其他用户。在这个过程中，可以为一组具有相同权限的用户创建一个角色，以此来简化授权的过程。但由于自主存取控制可能存在数据的“无意泄露”，出现了安全性更高的强制存取控制，规定仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体。最后学习了视图机制：把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护。
这一节的内容理解起来比较容易，GRANT语句和REVOKE语句因为有前面的基础理解起来也很容易，但是依然要及时复习巩固，使自己的知识形成体系，不然很容易遗忘，也会在一定程度上影响后续的学习。",4.数据库安全性,2022-11-18 11:55:30
2020213380,"这节课学习了数据库的完整性（指数据的正确性和相容性）。与数据库的安全性不同，它是为了防止数据库中存在不符合语义的数据，即不正确的数据。数据库管理系统必须能够提供定义、检查和违约机制。
随后学习了针对实体完整性、参照完整性和用户自定义完整性的定义、检查和违约处理的相关语句。
实体完整性在CREATE TABLR中用PRIMARY KEY进行定义。单属性可以在列级或表级进行定义，但多属性只能在表级进行定义。
在检查时需要确保主码值唯一以及主码各个属性为空，否则会拒绝插入或修改。
同时，为了提高效率，避免对全表进行扫描，会在主码上建立一个索引。
参照完整性在CREATE TABLR中用FOREIGN KEY定义哪些列为外码，用REFERENCES指明这些外码参照哪些表的主码。
它有三种违约处理机制：拒绝、级联和设置为空值，具体执行哪一种机制可以使用默认策略，也可以自行定义。
用户自定义的完整性可在属性上和元组上进行定义，均在CREATE TABLR中用CHECK短语定义。
之后学习了如何对完整性约束条件进行命名，这使得我们可以灵活地增加、删除一个完整性约束条件。
最后，学习了触发器的定义、激活与删除语句。
这次学习的知识比较简单易懂，但依然要注意对不同概念和语句的区分，做到及时复习。
",5.数据库完整性,2022-11-23 09:19:52
2020213380,"这节课主要学习了数据库中的规范化理论。
它是用来改造关系模式，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题的。
在复习和学习了一些基本的概念如：关系、关系模式、数据依赖等之后，
正式开始了对规范化理论的学习。
一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式集合,这种过程就叫关系模式的规范化。
规范化程度有6个不同的级别，即6个范式。
一个关系只要其分量都是不可分的数据项，它就是规范化的关系，但这只是最基本的规范化，只满足第一范式的要求。
在第一范式的基础上消除非主属性对码的部分函数依赖就达到了第二范式，
再消除非主属性对码的传递函数依赖就达到了第三范式，
再消除主属性对码的部分和传递函数依赖就达到了BC范式，
再消除非平凡且非函数依赖的多值依赖就达到了第四范式。
对于我来说，其中最难理解的是第三范式向BC范式的转化，后来将第四范式的定义等价为每一个决定属性因素都包含码就好理解多了。
这次学习的知识相较于之前学习的知识来说更难理解，特别是BC范式和第四范式，
我也是在反复理解概念，反复思考后才大致掌握的，但感觉还是有一些不太熟练，可能换一种问题情景就不能很好地区分具体哪一种范式了。
之后会加强复习，争取熟练掌握各个范式的要求，将其应用于不同的问题情境中。
",6.关系数据理论,2022-12-02 10:37:25
2020213380,"这节课主要学习了数据库设计，可分为需求分析、概念结构设计、逻辑结构设计、物理结构设计、数据库实施、数据库运行和维护六个阶段。
其中重点学习了概念结构的设计。
概念结构设计是将需求分析得到的用户需求抽象为信息结构(即概念模型)的过程，在这个过程中利用E-R模型来描述概念模型。
一般会自顶向下地进行需求分析，自底向上地设计概念结构。
在概念结构设计的过程中，需要就行数据抽象，有分类，聚集，概括三种抽象方法。
随后就可以设计E-R图了，可以分为两大步骤：选择局部应用，逐一设计分E-R图，
通常以中层数据流图作为设计分E-R图的依据。
之后就可以对分E-R图进行集成，形成总E-R图。在集成的过程中，需要进行合并、修改与重构。
在这个过程中，最关键的是要合理消除各分E-R图的冲突（属性冲突、命名冲突、结构冲突）。
这是就形成了初步的E-R图，再在这个基础上消除不必要的冗余，就形成了基本E-R图。
在逻辑设计阶段需要将E-R图转换成具体的数据库产品支持的数据模型如关系模型，
形成数据库逻辑模式。首先根据转换规则，将概念结构转换成一般数据模型，
再根据DBMS的特点与限制形成特定的DBMS支持下的数据模型，最后形成优化的数据模，
同时还要设计用户子模式。
在物理设计阶段，要为一个给定的逻辑数据模型选取一个最适合应用环境的物理结构，即
数据库在物理设备上的存储结构与存取方法。主要包括为关系模式选择存取方法，
以及设计关系、索引等数据库文件的物理存储结构。
最后，就可以进行数据库的实施与维护了。
这一章的内容对于我来说理解起来有些困难，每一个阶段包含的内容也很多，我实在看了两三遍ppt和书后才对这一章的内容有了基本的理解，
之后会及时复习，加深理解，防止遗忘。",7.数据库设计,2022-12-15 17:54:54
2020213381,这节课主要学了四个基本概念（数据、数据库、数据库管理系统、数据库系统）、数据模型（分为概念模型、逻辑模型、物理模型）及其组成要素、信息世界的基本概念（实体、属性、码、域、实体型、实体集、联系），以及E-R图的画法,第一章 绪论（第一节课）,2022-09-05 19:01:12
2020213381,这节课的主要内容有三个概念：层次模型、网状模型、关系模型。其中层次模型是网状模型在“根节点唯一、子节点和双亲结点联系唯一、且除根节点外不存在节点无双亲节点”情况下的特例。关系模型是当前主流的数据模型，表（关系）、表中一行（元组）、表中一列（属性）、主码唯一、分量（元组中任一属性值）、关系模式（表名+属性）,第一章 绪论（第二节课）,2022-09-13 15:23:37
2020213381,这节课主要介绍了几个概念域、笛卡尔积、关系、关系模式、关系数据库，和几个重点概念候选码、主码、全码、主属性、非主属性,第二章 关系数据库（第一节）,2022-09-20 17:23:54
2020213381,这节课讲了关系的完整性（实体完整性、参照完整性、用户自定义完整性）和关系代数中的传统集合运算（并、交、差、笛卡尔积），以及这些运算中可能得到的最大最小元组数和列数,第二章 关系数据库（第二节）,2022-10-01 15:17:32
2020213381,本节课的主要内容是“关系代数”中的专门的关系运算，包括选择、投影、连接（等值连接、自然连接），除运算。其中自然连接又分为外连接（保留悬浮元素），左外连接和右外连接,第二章 关系数据库（第三节）,2022-10-14 16:37:22
2020213381,自学，主要内容有SQL语言的基本概述，以及基本操作（模式，表，索引的定义与删除，数据的查询等）,第三章 关系数据库标准语言（第一节）,2022-11-02 09:17:58
2020213381,数据库查询中的连接查询，嵌套查询和集合查询，和SELECT语句的一般形式,第三章 关系数据库标准语言（第二节）,2022-11-02 09:19:35
2020213381,数据的更新（插入数据、修改数据、删除数据），视图（作用，定义，查询，更新）,第三章 关系数据库标准语言（第三节）,2022-11-02 09:21:40
2020213392,"先学习了数据、数据库、数据库管理系统、数据库系统的基本概念、功能、构成；紧接着，学习了数据模型的组成要素，再进一步学习了两大类数据模型。信息世界中的一些基本概念，帮助我们更加深入地学习概念模型，学习了E-R图，并进行了练习。
第一节课主要学习的是一些基础概念，一开始有些抽象，但在知识的不断拓展中，理解也更加深入。
",数据库系统概述、数据模型,2022-09-19 08:12:16
2020213392,着重理解域、笛卡尔积、关系、元组、属性的区别与联系，发现这节课学习的内容和上一节课学习的内容串起来了，在这节课中对关系的定义更严谨抽象，记忆更深刻。比如，原来讲的关系就是二维表，现在严格来讲，关系是在域上的笛卡尔积的子集，从上节课到这节课的过渡，从通俗到严谨，让我对关系的概念理解更深刻。 除此之外，主码、候选码、全码需要注意区分。候选码是关系的属性组中能够唯一标识一个元组，而其中的任意一个属性缺一不可，也就是任意子集不能标识元组。主码是候选码中选定的一个。全码是无论哪个属性都可以作为候选码时，就是任何一个属性都可以标识这个元组，则也叫全码。 关系代数还没有学习到，但在预习中我对这部分内容很感兴趣，期待下一次课的学习。预习后，我很期待关系代数中从文字理解，能够运用到题目里的数理逻辑思维。,关系数据结构及形式化定义,2022-10-30 16:12:43
2020213392,这个部分自己学习，还是有些吃力。前面概念的描述有些不知所云，后面语句学习，当一堆英文字母堆在一起的时候，我很难找到他们之间的逻辑与关系，但照着ppt和书上的内容对应学，也能够做出课后习题，但熟练度不够。希望在下一节课好好听讲能解答我的困惑。,SQL的整体概述以及基本语句的用法介绍,2022-10-30 16:18:07
2020213392,"简单了解了数据模型，并对层级模型进行了深入的学习。学习了层级模型的结构特点、数据操纵、完整性约束条件，还学习层级模型的多种储存结构，看起来那些线条错综复杂，但通过学习链接的方法后，就较容易理解了，最后对层级模型，学习了它的优缺点。接着，类比学习了网状模型和关系模型。
—————————————————————————————————————————————————
了解了这么多数据模型后，我觉得数据模型都尤其独特的优缺点，比如关系模型的存取路径对用户透明，这样的好处是数据独立性更强、安全保密性更好，还简化了数据库开发的工作；但与此同时，查询效率就不如其他数据模型。再比如，网状模型的约束条件比层级模型宽松很多，允许结点没有双亲结点或者有多个双亲结点，节点间也可以有多种联系。这些条件放开后，自然，网状模型更能够直接地去描述现实世界。
具体要使用哪种数据模型，还是需要具体看要描述什么内容，再针对性选取数据模型来使用。
—————————————————————————————————————————————————
这节课的学习逻辑性较强，课上的练习加固了我的记忆，不断的学习，让我感觉自己对数据库的理解更进一步。",数据模型,2022-10-31 13:45:46
2020213392,"着重理解域、笛卡尔积、关系、元组、属性的区别与联系，发现这节课学习的内容和上一节课学习的内容串起来了，在这节课中对关系的定义更严谨抽象，记忆更深刻。比如，原来讲的关系就是二维表，现在严格来讲，关系是在域上的笛卡尔积的子集，从上节课到这节课的过渡，从通俗到严谨，让我对关系的概念理解更深刻。
—————————————————————————————————————————————————
除此之外，主码、候选码、全码需要注意区分。候选码是关系的属性组中能够唯一标识一个元组，而其中的任意一个属性缺一不可，也就是任意子集不能标识元组。主码是候选码中选定的一个。全码是无论哪个属性都可以作为候选码时，就是任何一个属性都可以标识这个元组，则也叫全码。
—————————————————————————————————————————————————
关系代数还没有学习到，但在预习中我对这部分内容很感兴趣，期待下一次课的学习。预习后，我很期待关系代数中从文字理解，能够运用到题目里的数理逻辑思维。",关系数据结构及形式化定义,2022-10-31 13:45:56
2020213392,"这一节课的内容比较容易理解，我认为理解外码这个概念上有难度，但在老师后来讲解后就清晰了很多。我先梳理一遍课程流程与知识结构。
—————————————————————————————————————————————————
首先学习了关系的三类完整性约束，分别是实体完整性、参照完整性和用户定义完整性。第一，实体完整性。性就是主码不能取空值，这个也很好理解，既然主码需要作为元组的标识，肯定不能取空值。第二，参照完整性。我了解到关系间是可以互相引用的，同时学习了外码。现在理解了，外码其实就是被引用的属性，与另一个关系的主码对应。外码所在的关系叫参照关系，另一个关系叫被参照关系。参照完整性就是，外码需要等于另一个关系的主码值，也可以为空值（比如班长未选出）。第三，用户定义的完整性。是用户给关系数据库设置约束条件时，需要满足语义要求，同时关系模型要提供定义和检验这列完整性的机制。
—————————————————————————————————————————————————
之后学习了关系代数。我好像很喜欢这类将所学到的数理知识运用于题目中。这节课学习了传统的集合运算，并、差、交、笛卡尔积。和数学集合一样。并就是涵盖这两个集合所有元组；交就是涵盖两个集合中重复的元组；差就是前面一个集合减去两个集合中重复的元组；笛卡尔积是两个集合的元组的排列组合，目数等于两个集合目数之和。并交差三个关系代数需要两个集合的目数相同，而笛卡尔积没有这个约束。
—————————————————————————————————————————————————
期待下一节课的新关系代数！",关系的完整性及关系代数,2022-10-31 13:46:09
2020213392,"这节课主要将前面学习的关系运算符操作用SQL表示。难度并不大，就是需要记忆些语句的使用方法。最主要学到的是嵌套查询和连接查询其实是可以互相转换的。
————————————————————————————————————————————————自己不足的地方是，语句的使用不熟练，没有能够完全记忆住，在脑海中没有一个知识架构。准备下去好好整理一张思维导图来帮助梳理。",数据定义、数据查询 ,2022-10-31 13:55:35
2020213392,"首先学习了一下表示分量、属性组的一些概念，为后面更方便的学习打好基础。简单来说，我理解的就是t[A列行]表示二维表中第几列第几行的分量。补集的概念与数学里一样，就是在表示上有所不同。需要着重学习的概念是象集。通俗来解释就是，当选择一个属性等于某个值的时候，这个值所在元组的其他分量的集合。这个概念对后面除运算的理解起到很大帮助。————————————————————————————————————————————————接着，学习了选择、投影、连接、除运算这四个关系运算符。————————————————————————————————————————————————选择表示形式：σ条件(关系名)，在条件表达式中可以用到＞、≥，<>等常用比较运算符，也可以用到￢（非）、^（与）、v（或）这样的逻辑运算符。选择运算得到的从关系里选取出条件为真的元组。————————————————————————————————————————————————投影运算的表示形式：Π属性组（关系），它可以从关系中得到仅需要的那些属性列，同时在进行运算时，遇到重复的会删掉，所以它不仅可以删除属性列，还可能会使某些元组消失。————————————————————————————————————————————————连接运算是将两个可比关系的笛卡尔积中选取属性满足一定条件的选组，可以通俗理解为是先做笛卡尔积然后做选择运算。但是也有不同，连接的分类比较复杂。等值连接是选取两个关系中的属性值相等的元组，自然连接是特殊的等值连接，它不再区分比较属性列的关系是哪个，它会删掉重复的属性列。也可以做非等值连接，条件上可以参考之前的选择关系中提到的条件。在自然连接的时候，很多不满足条件的元组会被删掉，这些元组叫悬浮元组。关于这些悬浮元组的处理，又可以分为外连接、左外连接、右外连接，符号表示就是留哪边，就把哪边伸出来一点。因为两个关系中的要选择的属性没有等值的，那就说明两个关系连接不上，那么目是一定的，连接不上的元组就在空的目上添上NULL就可以了。————————————————————————————————————————————————在做除运算的时候，是用象集来定义的。通俗理解就是R÷S，就是先将两个关系中有重复属性的元组挑出来，再取相同属性的象集。比如说，R(A,B)÷S（B,C），那么最后得出来的结果会使A中满足条件的集合，看A中同一个属性值对应的B值，如果它包含S中所含有的所有B值，那么A就可以挑进集合里。————————————————————————————————————————————————我一开始并不理解，这些关系运算如果只停留在简单数学运算上，就是花拳绣腿了，尤其是比较复杂的除运算。但是，当联系到生活实际时，我才能理解这些含义。选择运算就是字面意思上需要做选择，连接的运算就是，当有几个关系错综复杂的织在一起时，需要把这个关系表按需求连接起来，加大关系表的目数。投影关系就是有时候仅仅只需要那几个属性列的信息，这样节省空间也比较便捷。除运算是运用到选择条件非常复杂的运算中，比如带有“至少”的题目，这样选择的种类非常多，那么就可以来做除运算。————————————————————————————————————————————————在做题时，我又发现，其实写题的答案也不唯一，可以先做投影再连接后选择，也可以先连接选择完再做投影。做题的时候还是尽量地考虑到运算的复杂性，尽量不要加大关系运算的规模。",专门的关系运算符,2022-11-11 13:39:30
2020213392,"这次课程学习了数据库的安全性。数据的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。而之所以会有安全性，就是因为数据库的可共享性。
————————————————————————————————————————————————
非法使用数据库有三种情况：1、编写合法程序绕过DBMS及其授权机制；2、直接或编写应用程序执行非授权操作；3、通过多次合法查询，从中推导保密数据。老师上课进行了举例，如对张三的成绩保密，但对其他的查询和总的平均值的查询，可以推导出张三的成绩。
————————————————————————————————————————————————
保护措施有：用户身份鉴别是最外层的安全保护措施。使用用户标识，常见方式有静态口令鉴别、动态口令鉴别、生物特征鉴别、智能卡鉴别。比如与每个用户预先约定要计算过程或者函数。存取控制机制包括定义用户权限和合法权限检查两部分。有两种方法：1、自主存取控制，是C2级别的，非常灵活；2、强制存取控制，是B1级别的，比较严格。
————————————————————————————————————————————————
授权与收回语句比较简单，使用【GRANT】和【REMOVE】语句。可以将表或列的查询、插入等权限授予给一个用户，通过【WITH GRANT OPTION】，还可以传递，但不允许循环。【REMOVE】收回时，可以通过【CASCADE】级联收回之前传递的权限。
可以创建角色，这样的话方便授权与收回。
————————————————————————————————————————————————
在强制存取控制中，需要注意有两个规则。1、仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体；2、仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体。
————————————————————————————————————————————————
在实验中，我们核对了上一次实验的答案，发现自己很多“想当然”的行为，许多需要自身连接的地方都没有，设置别名也很重要。这次实验的内容中EXISTS的嵌套是难度较大的，需要捋顺逻辑与思路，这个是需要后续继续努力的。",数据库安全性、数据库安全性控制，数据库高级查询实验,2022-11-16 18:53:03
2020213392,"一、总的定义：数据库的完整性包括正确性（数据符合语义）与相容性（数据库同一对象在不同关系表中的数据是符合逻辑的）；要注意和安全性区分，安全性是保护数据库被恶意破坏和非法窃取的，防范的是非法用户和非法操作。为维护数据库的完整性，DBMS必须提供定义完整性约束条件的机制、提供完整性检查的方法、进行违约处理。
—————————————————————————————————————————————————二、学习了实体完整性、参照完整性、用户定义的完整性的语句使用、完整性检查和违约处理。—————————————————————————————————————————————————
	（1）实体完整性：可以在列级与表级定义主码。但对于多个属性构成的码只能在表级定义。RDBMS检查时会检查主码值是否唯一，不唯一则拒绝插入和修改；也会检查主码的各个属性是否为空，只要一个为空也会拒绝插入和修改。检查方式有全表扫描和索引两种，索引的方式更简洁。—————————————————————————————————————————————————
（2）参照完整性：用FOREIGN KEY短语定义哪些列为外码、用REFERENCES短语指明这些外码参照哪些表的主码。在参照表里插入元组和修改外码值的时候，就可能破坏被参照表的、参照完整性，违约处理为拒绝；在被参照表删除元组和修改主码值的时候，参照表可能被破坏参照完整性，违约处理为拒绝（NO ACTION）、级联修改(CASCADE)、空值设置(SET-NULL)。在设置的时候，可以对DELETE和UPDATE采取不同的策略，根据环境要求而定。—————————————————————————————————————————————————
（3）用户定义的完整性：可以分别在属性上和元组上定义。建立表定义属性时，包括列值非空（NOT NULL）、列值唯一（UNIQUE）、检查列值是否满足一个布尔表达式（CHECK）。建立表可以用CHECK定义元组约束条件，还可以设置不同属性之间的取值的相互约束条件。在插入和修改时，RDBMS会检查，不满足就拒绝执行。—————————————————————————————————————————————————
三、学习了完整性约束命名子句。就是可以使用CONSTRAINT <约束条件名称>来为上面提到的完整性约束命名。这样的好处是，之后可以方便删除（DROP）和增加（ADD）新的约束条件—————————————————————————————————————————————————
四、在域中的完整性限制。我理解的就是约束条件里可以设置取值只能取“1”、“2”、“3”，那么域就是把“1”、“2”、“3”放到一个范围里，这样修改删除也比较方便。—————————————————————————————————————————————————
五、触发器。就是可以理解为“如果，那么”，定义时也分为在语句级定义和行级定义两种。当一个表定义了多个触发器的时候，激活时也按照BEFROE、SQL、AFTER顺序执行；同时也可以删除触发器。
—————————————————————————————————————————————————
实验收获的经验正好与学习的内容对应：
—————————————————————————————————————————————————
一、三大完整性约束需要时刻遵循：
做这个实验一开始遇到了问题，发现无法直接在Customer表里面插入信息，分析得出需要遵守数据库定义的参照完整性规则，外键的取值不为空的情况下，与其对应的主键在参照表中必须存在。
所以直接插入主键，不满足参照完整性规则。这个时候为了处理外键约束，除了可以直接添加数据，也可以先将外键暂时都置为 null，所有数据插入以后，再依次更新这些数据的 外键的值。该方法的优点是复杂性低，容易实现。
插入数据的时候，不是按表中的顺序插入，而是根据数据依赖的关系插入数据。
—————————————————————————————————————————————————
二、数据更新操作与查询操作逻辑类似：
	需要连接或者嵌套的时候，按照查询操作的经验来就可以了。",数据库完整性、数据更新实验,2022-11-27 17:24:02
2020213392,"这节课学习了数据更新与视图，还做了第一次实验。接下来，我将梳理一下本节课学的内容。
————————————————————————————————————————————————
数据更新分为插入、修改、删除三种操作。
————————————————————————————————————————————————
1、插入。插入元组时，使用INSERT INTO<表名>(<属性列1>，<属性列2>，……) VALUES（'字符串常数’，普通常数，……）。其中，属性列与值得数据类型要一致、一一对应；如果有的属性列没有出现在INTO中，元组中的这些属性会赋空值；如果INTO中没有出现任何属性列名，则VALUES中每个属性都要赋值。插入子查询的结果时，就是直接把VALUES子句换成子查询的步骤即可嵌套查询。
————————————————————————————————————————————————
2、修改。修改某一个元组的值的格式为UPDATE<表名> SET<列名>=<表达式> WHERE<条件>，需要注意的是如果没有WHERE子句，则表示要修改表中所有元组。修改多个元组的值，即不使用WHERE子句，修改全部元组，或者在WHERE子句中多给限定条件，用OR连接。修改语句也可以再WHERE子句中放子查询嵌套。
————————————————————————————————————————————————
3、删除。删除语句的一般格式为DELETE FROM<表名> WHERE<条件>。删除语句就是删除满足WHERE子句条件的所有元组，若省略WHERE子句则删除全部元组，但只是删除表中数据，不删除表的定义。同样也可以带子查询嵌套删除。
————————————————————————————————————————————————
视图其实就是一个虚表，只存放视图的定义而没有数据。从视图中查询数据，其实还是在基本表里查询，视图只是作为一个窗口。视图的操作分为定义、查询、更新。
————————————————————————————————————————————————
定义视图分为建立视图和删除视图。建立视图的格式为CREATE VIEW<视图名>（<列名1>,<列名2>……） AS<子查询> WITH CHECK OPTION;属性列名需要全部省略或者全部指定。但定义视图的时候，并不执行子查询语句，只有在查询视图时才查出。WITH CHECK OPTION子句是可以在后续对视图进行操作时，也会执行子查询中的WHERE子句。其中视图不仅可以建立在基本表上，也可以建立在视图上。删除视图的格式为DROP VIEW<视图名>CASCADE；同时CASCADE会级联将该视图与由它导出的所有视图都删除。如果基本表被删除，视图不可使用但定义并未被删除，需要使用DROP VIEW<表名>。如果删除定义时，没有CASCADE，且视图还被导出为其他视图，则会被拒绝执行。
————————————————————————————————————————————————
查询视图里举了很多例子，更证明视图其实只是一个虚表，将视图消解后其实就是普通的查询语句。但视图与派生表不同，视图不会被删除，派生表用完就会被删除。
更新视图同样也是通过视图消解。但更新视图遇到视图的属性里经过有意义转换时，无法对基本表更新；一般行列子集视图可更新，其他不能更新还有很多种情况，要具体针对系统而言。
————————————————————————————————————————————————
视图可以简化操作、提供一定的逻辑独立性、对机密数据提供安全保护、更清晰地表达查询。
————————————————————————————————————————————————
实验主要是学会定义模式与基本表，做完后发现，按照模式来套其实难度不大，但需要还是有几点需要注意：
————————————————————————————————————————————————
1.格式问题。一定要在英文输入法状态下输入语句，否则会报错。
————————————————————————————————————————————————
2.输入问题。Microsoft SQL Server Management Studio不像Visual Studio，不能够在输入前两个字母后自动弹出可能的语句，需要全部手动输入，要小心，避免出现输入错误。系统语句字体会变蓝，这可作为检查依据。
————————————————————————————————————————————————
3.建立表顺序要提前想好。因为完整性约束的限制，被引用的表要先创建，否则会报错。
————————————————————————————————————————————————
4.自己对于语句使用还不熟练。需要勤加记忆和练习，争取在下一次实验中取得进步！",数据更新、视图、数据库定义实验,2022-11-27 17:24:52
2020213392,本次课程主要是做查询练习，练习使自己对原来不太理解的GROUP BY和HAVING语句都有了更深入的理解。同时，非常开心能够在程序里可视化看到自己做题的成果，整个实验内容比较简单，经过前期的训练，自己应对这次实验已经是游刃有余了，同时能够非常清晰地认知各个语句、函数的使用。,查询练习、数据库基本查询实验,2022-11-27 17:25:02
2020213392,"一、数据依赖。简单理解就是属性间的联系的抽象。
—————————————————————————————————————————————————
（1）数据依赖会对关系模式造成影响，如数据冗余、更新异常、插入异常、删除异常。—————————————————————————————————————————————————
（2）数据依赖分为函数依赖和多值依赖（一对多）。其中，函数依赖与映射的关系类似，一对一或多对一。如X→Y，就是X上的每一个值都有Y的唯一一个值与之对应；函数依赖又分为平凡函数依赖和非平凡函数依赖，简单理解有意义的就是非平凡函数依赖<比如（SNO,CNO）→GRADE>，平凡函数意义不大<如（SNO,CNO）→SNO>。函数依赖还可以分成完全函数依赖和部分函数依赖，从字面意思上理解就可以，（(Sno,Cno)→Grade是完全函数依赖，(Sno,Cno)→Sdept）；传递函数依赖就是X→Y，Y→Z，则X→Z。—————————————————————————————————————————————————
	二、码。码在这里就可以有新的表述。设K为R中的属性或属性组合，若U完全依赖于K，则K称为R的侯选码。若候选码多于一个，则选定其中的一个做为主码；在候选码中的任意一个属性，都称为主属性，反之，则为非主属性；如果整个属性组是码，就是全码。外码的定义也学习过，这里再次进行了复习。—————————————————————————————————————————————————
	三、范式。范式的定义就是符合某一种级别的关系模式的集合。其实我理解的就是不同的标准与要求，由低到高有1NF、2NF、3NF、BCNF、4NF。通过模式分解可以将低一级范式的关系模式转换为高一级范式的关系模式的集合，这个过程就是规范化。—————————————————————————————————————————————————
（1）INF。第一范式一般不做探讨，因为只要是关系模式都满足第一范式。要求是所有属性都是不可分的基本数据项。—————————————————————————————————————————————————
（2）2NF。相比第一范式，第二范式的要求就是删除所有部分函数依赖。每一个非主属性都完全函数依赖于码。但这时，也不能完全消除异常情况和数据冗余。—————————————————————————————————————————————————
（3）3NF。相比第二范式，第三范式去除了传递依赖。即，每一个非主属性既不部分依赖于码也不传递依赖于码。简单来说，就是把A→B→C分解为两个关系模式A→B、B→C。—————————————————————————————————————————————————
（4）BCNF。这里的要求更加严苛，消除主属性对码的部分和传递函数依赖。所有非主属性对每一个码都是完全函数依赖；所有的主属性对每一个不包含它的码，也是完全函数依赖；没有任何属性完全函数依赖于非码的任何一组属性。—————————————————————————————————————————————————
（5）4NF。要求在BCNF的基础上，消除平凡且非函数依赖的多值依赖。—————————————————————————————————————————————————
	四、规范化理论为数据库设计提供了理论的指南和工具；也仅仅是指南和工具v并不是规范化程度越高，模式就越好；必须结合应用环境和现实世界的具体情况合理地选择数据库模式。",关系数据理论,2022-12-12 21:12:48
2020213711,第一堂课中主要是讲述了数据库这个概念，并延申拓展了其在生活中的应用实例，着重点明数据库在数媒课程中的重要性帮助我们更好地建立起对数据库的概念认知。在绪论中简要介绍了数据库的四个基础概念，将数据库剖析分层。随后讲述了数据模型中的两大分类，详细介绍了概念模型中的七个基本概念，并通过学习E-R模型初步描述出了简要的概念模型。,第一章 绪论,2022-09-07 09:40:42
2020213711,"由于上一次打的内容网站保存失败了所以这里就不再赘述上课的思路过程，简单明了地总结一下本堂课后对这三种数据模型的总结与分析。
逻辑模型包括层次模型，网状模型，关系模型，它们虽然看起来相差很大，但仍有着内在的逻辑记忆点，首先是模型的数据结构，这一步骤包含了模型的充分不必要条件及特点，也阐述了各个模型使用的数据库系统；二是模型的操纵与完整性约束，三是模型的存储结构，这一步包含了模型间各个节点的链接方法，四是各个模型的优缺点。通过横向对比记忆可以总结出各个模型对应的记忆点，除了这几个大类之外还有各个小细分需要我们特别注意。",第三周反思,2022-09-19 09:26:52
2020213711,本堂课主要讲述了关系模型，关系模型由关系数据结构，关系操作集合和关系完整性。关系的数据结构只包含了关系，其中需要介绍的几个定义由域，笛卡尔积，元组和分量以及关系。关系的表示又细分为元组，表示和属性以及码，码又细分为候选码和主码，这里需要辨别关系中的候选码。关系分为三种类型，同时有6条基本性质需要记忆，最后简要地了解了关系模式和关系数据库，阐述了关系，关系模式和关系数据库这三者的定义与联系。,第四周反思,2022-09-26 09:21:20
2020213711,本周初步学习了关系代数，分为传统的集合运算和专门的关系运算。本周主要讲述了前者中的并，差，交，笛卡尔积4种运算。前三种都是数学中常见关系，要注意的是关系的交可以用差来表示。比较重要的是笛卡尔积，，若R有K1个元组，S有K2个元组，那么R和S的笛卡尔积有K1*K2个元组，没事画个图吧，目的名称要细化为R.A，R.B，S.A这种。,第五周反思,2022-10-10 23:18:24
2020213711,"本周接上讲完了剩下的专门的关系运算，包括选择，投影，连接和除运算。以及引入了象集的概念，并在除运算种会应用到这个概念。第一种选择，选择，在这个运算里可以附加各种
限制条件对行进行操作，常用于题目中要求找出某个或某些目的操作。第二种投影，关系R上的投影是从R中选择出若干属性列组成新的关系，并应取消完全相同的行。第三种连接，从两个关系的笛卡尔积中选取满足一定条件的元组，其中又包括等值连接和自然连接，自然连接是一种特殊的等值连接，要求两个关系中进行比较的分量必须是同名的属性组，并去掉重复属性例。如果不去掉悬浮元组则还会出现左外连接和右外连接。最后一种除运算，过程是先分别找出R关系中某个目的象集，再找出S关系上可比的投影进行比较最后可得。综上运算可以在题目中进行复杂的关系代数表达式。
",第七周反思,2022-10-11 09:00:00
2020214470,"(1）	域、笛卡尔积、关系
域：
	是具有相同类型的值的集合
	可以是有限集或者无限集
	如果域D为有限集时，则称D中元素的个数D的基数，记作|D|
笛卡尔积：
      记作：D1*D2*...*Dn,基数为|D1|*|D2|*...*|Dn|
关系：
     在关系数据库中，任何有意义的关系都要满足一定的约束条件，这些约束都是语义约束。
（2）关系的码
       实体集有三类码：超码、候选码、主码。
（3）关系的完整性约束
       关系的完整性约束包括实体完整性、参照完整性和用户自定义的完整性
（4）关系代数
       基本的运算符包括：选择、投影、并、差和笛卡尔积
      附加的运算包括：交、除、连接和自然连接运算
（5）关系演算
      元组关系演算以元组为单位，通过谓词公式约束索要查找元组的条件。
运算符优先级：
算术比较符->存在量词、全称量词->逻辑运算符
",Chapter2,2022-09-12 00:02:15
2020214470,"1.数据（Data）是数据库中存储的基本对象
2.数据库（Database，简称DB）是长期存储在计算机内、有组织、可共享的大量数据的集合。
3.数据库的基本特征：数据按一定的数据模型组织、描述和存储；可为各种用户共享；冗余度较小；数据独立性较高；易扩展
4.DBMS是位于用户与操作系统之间的一层数据管理软件。是基础软件，是个大型复杂的软件系统
5.DBMS用途：科学地组织和存储数据、高效地获取和维护数据
6.DBMS功能：数据定义功能；数据组织、存储和管理；数据操纵；数据库的事务管理和运行管理；数据的建立和维护（实用程序）；其他功能：DBMS与网络中其他软件系统的通信；两个DBMS系统的数据转换；异构数据库之间的互访和互操作
7.数据库系统（Database System，简称DBS）是在计算机系统中引入数据库后的系统构成。
8.数据库系统的特点：数据结构化；数据的共享性高、冗余度低、易扩充；数据独立性高；数据用DBMS统一管理和控制。
9.数据管理：对数据进行分类、组织、编码、存储、检索和维护；数据处理的中心问题。
10.数据管理技术的发展过程：
	人工管理阶段(20世纪40年代中–50年代中)
	文件系统阶段(20世纪50年代末–60年代中)
	数据库系统阶段(20世纪60年代末–现在)



",第一章 绪论  1.1数据库系统概述,2022-09-17 01:25:22
2020214470,"1.数据模型的概念：在数据库中使用数据模型这个工具来抽象、表示和处理现实世界中的数据和信息；通俗地将数据模型就是现实世界的模拟。
2.数据模型分为两类（分属两个不同地层次）：概念模型也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计；逻辑模型和物理模型，逻辑模型主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点的数据建模，用于DBMS实现；物理模型是对数据最底层的抽象，描述数据在系统内部的表示方法和存取方法，在磁盘或磁带上的存储方式和存取方法。
3.数据结构是所研究的对象类型的集合。
4.数据操作：对数据库中各种对象（型）的实例（值）允许执行的操作，及有关的操作规则。
5.数据的完整性约束条件：数据的完整性约束条件是一组完整性规则的集合，规定数据库状态及状态变化应满足的条件以保证数据的正确性、有效性和相容性。
6.概念模型：
概念模型的用途：概念模型用于信息世界的建模；是现实世界到机器世界的一个中间层次；是数据库设计的有力工具；数据库设计人员和用户之间进行交流的语言。
对概念模型的基本要求：较强的语义表达能力；能够方便、直接的表达应用中的各种语义知识；简单、清晰、易于用户理解。
7.信息世界中的基本概念
1）实体（Entity）
客观存在并相互区别的事物称为实体//可以是具体的人、事、物或抽象的概念
2）属性（Attribute）
实体所具有的某一特性称为属性//一个实体可以由若干个属性来刻画
3）码（Key）
唯一标识实体的属性集成为码
4）域（Domain）
属性的取值范围成为该属性的域
6）实体型（Entity Type）
用实体名及其属性名集合来抽象和刻画同类实体成为实体型
7）实体集（Entity Set）
同一类型实体的集合称为实体集
8）联系（Relationship）
现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。
实体内部的联系通常是指组成实体的各属性之间的联系。
实体之间的联系通常是指不同实体集之间的联系
8.两个实体型之间存在，1：1，1：n，m:n的联系
9.两个以上实体型之间的联系：存在1：m||1：n；1：1：1；m：n：p的关系。
10.E-R图表示概念模型（实体-联系）：实体型，用矩形表示，矩形框内写明实体名；属性，用椭圆形表示，并用无向边将其与相应的实体连接起来；联系：联系本身：用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型。
11.层次模型：用树形结构来表示各类实体以及实体间的联系。满足下面两个条件的基本层次联系的集合为层次模型：有且只有一个结点没有双亲结点，这个结点称为根结点；根以外的其他结点有且只有一个双亲结点。
12.层次模型特点：结点的双亲是唯一的；只能直接处理一对多的实体联系；每个记录类型可以定义一个排序字段，也称为码字段；任何记录值只有按其路径查看时，才能显出它的全部意义；没有一个子女记录值能够脱离双亲记录值而独立存在。
13.层次模型优缺点
a)	优点：
层次模型的数据结构比较简单清晰；查询效率高，性能优于关系模型，不低于网状模型；层次数据模型提供了良好的完整性支持。
b)	缺点：多对多联系表示不自然；对插入和删除操作的限制多，应用程序的编写比较复杂；查询子女结点必须通过双亲结点；由于结构严密，层次命令趋于程序化
14.网状模型（Network Model）：网状数据库系统采用网状模型作为数据的组织方式，
15.网状模型：满足下面两个条件的基本层次联系的集合：
1.允许一个以上的结点与双亲。
2.一个结点可以有多于一个的双亲。
16.网状模型与层次模型的区别：网状模型允许多个结点没有双亲结点；网状模型允许结点有多个双亲结点；网状模型允许两个结点之间有多种联系（复合联系）；网状模型可以更直接地去描述现实世界；层次模型实际上是一个网状模型的一个特例。
17.网状模型a)	优点
能够更为直接的描述现实世界，如一个结点可以由多个双亲；具有良好的性能，存取效率较高
b)	缺点
结构比较复杂而且随着应用环境的扩大，数据库看看的结构就变得越来越复杂，不利于最终用户掌握；
DDL、DML语言复杂，用户不容易使用；













",第一章 绪论 1.2数据模型,2022-09-17 01:42:41
2020214470,"2.3  关系的完整性
1.关系的完整性包括实体完整性、参照完整性和用户自定义完整性。
2.实体完整性要求基本关系的主属性不能为空值。
3.参照完整性要求基本关系R的外码F与基本关系S的主码相对应，R上的值F必须或取空值或等于某元组的主码。
4.用户自定义完整性是指对某一具体 关系数据可能的约束条件。
2.4关系代数
并、差、交、笛卡尔积
并：两个关系具有相同的目，其属性取自同一个域，R∪S操作将所有 元组叠加。
差：两个关系具有相同的目，其属性取自同一个域，R-S操作留下属于R而不属于S的元组
交：两个关系具有相同的目，其属性取自同一个域，R∩S操作留下既属于R又属于S的元组
笛卡尔积：具有n目关系，k1个元组的关系R，和具有m目关系，k2个元组的关系S，笛卡尔积操作后：具有n+m目，k1*k2个元组

",第二章 关系数据库 2.3-2.4,2022-09-30 18:41:45
2020214470,1.专门的运算关系包括（1）选择【行操作】（2）投影【列操作】（3）连接【包括等值连接和自然连接，行和列同时操作】（4）除【行和列同时操作】；2.等值连接是行操作，而自然连接还需要将重复的行进行删除，是行和列的操作。其中，连接是俩关系之间进行笛卡尔积后进行运算操作；3.外连接是将悬浮元组留下的操作，左外连接则将左边关系的悬浮元组留下，右外连接则将右边关系的悬浮元组留下。,第二章 关系数据库 2.4——专门运算关系,2022-10-11 00:14:11
2020214470,"1.SQL（Structured Query Language）：结构化查询语言，是关系数据库的标准语言。
2.SQL是一个通用的、功能极强的关系数据库语言
3.SQL特点：
1）综合统一
	• 集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能用与一体
	• 可以独立完成数据库生命周期中的全部活动
		○ 定义关系模型，插入数据，建立数据库；
		○ 对数据库中的数据进行查询和更新；
		○ 数据库重构和维护
		○ 数据库安全性、完整性控制等
	• 用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。
	• 数据操作符统一
2）高度非过程化
	• 非关系数据模型的数据操纵语言“面向过程”，必须指定存取路径
	• SQL只要提出“做什么”，无须了解存取路径
	• 存取路径的选择以及SQL的操作过程由系统自动完成
3）面向集合的操作方式
	• 非关系数据模型采用面向记录的操作方式，操作对象是一条记录
	• SQL 采用集合操作方式
		○ 操作对象、查找结果可以是元组的集合
		○ 一次插入、删除、更新操作的对象可以是元组集合
4）以同一种语法结构提供多种使用方式
	• SQL是独立的语言——能够独立地用于联机交互的使用方式
	• SQL又是嵌入式语言——SQL能够嵌入到高级语言（C,C++,Java）程序中，供程序员设计程序时使用
5）语言简洁，易学易用
SQL功能极强，完成核心功能只用了9个动词
4.SQL支持关系数据库三级模式结构。
	• 基本表
		○ 本身独立存在的表
		○ SQL 中一个关系就对应一个基本表
		○ 一个（或多个基本表）对应一个存储文件
		○ 一个表可以带若干索引
	• 存储文件
		○ 逻辑结构组成了关系数据库的内模式
		○ 物理结构时任意的，对用户透明的
	• 视图
		○ 从一个或几个基本表导出的表
		○ 数据库中只存放视图的定义而不存放视图对应的数据
		○ 视图是一个虚表
                ○ 用户可以再视图上再定义视图",3.1 SQL概述,2022-10-31 14:04:17
2020214470,"学生-课程模式S-T
学生表：Student（Sno,Sname.Ssex,Sage,Sdept）
课程表：Course（Cno,Cname,Cpno,Ccredit）
学生选课表：SC（Sno,Cno,Grade）",3.2学生-课程数据库,2022-10-31 14:21:43
2020214470,"1.语句格式
SELECT[ALL|DISTINCT]<目标列表达式>[，<目标列表达式>] …
FROM <表名或视图名>[，<表名或视图名> ] …
[WHERE<条件表达式>]
[GROUPBY<列名1>[HAVING<条件表达式>]]
[ORDERBY<列名2>[ASC|DESC]]；
2.单表查询
列查询：SELECT A,B
              FROM T;
	• 选出所有属性列：
	在SELECTZ关键字后面列出所有列名或在<目标列表达式>指定为*
计算时
        SELECT子句的<目标列表达式>可以为：
	算术表达式
	字符串常量
	函数
        列别名
取消重复行 SELECT DISTINT A;
                   FROM T;
比较大小：SELECT A
                  FROM T
                  WHERE A>20;
确定范围：BETWEEN....AND...
                  NOT BETWEEN...AND...
确定集合：IN<值表>,NOT IN<值表>
字符匹配：LIKE''/NOT LIKE''
空值：IS NULL 或IS NOT NULL
多重条件查询
	• 逻辑运算符AND和OR来联结多个查询条件
		○ AND的优先级高于OR
		○ 可以用括号改变优先级
	• 可用来实现多种其他谓词
		○ [NOT]IN
		○ [NOT]BETWEEN…AND…
ORDERBY子句
	可以按一个或多个属性列排序
	升序：ASC；降序：DESC；缺省值为升序
当排序列含空值时
	ASC：排序列为空值的元组最后显示
DESC：排序列为空值的元组最先显示
3.函数
计数：COUNT
计算总和：SUM
计算平均值:AVG
最大值最小值：MAX/MIN
4.多表查询
直接将两表写入FROM即可
可进行等值连接，自身连接，外连接，


",3.4 数据查询,2022-10-31 14:54:09
2020214470,"3.5.1 插入数据的方式分为：插入元组、插入子查询（可一次插入多个元组），使用INSERT INTO A VALUES('','','',)格式。
3.5.2修改数据，使用UPDATE SET WHERE 格式，可修改某一个元组的值，修改多个元组的值或带子查询的的修改语句。
3.5.3删除数据，使用DELETE FROM A WHERE 条件，的格式，可删除某一个元组的值，删除多个元组的值或带子查询的修改语句。


",3.5 数据更新,2022-11-01 10:41:22
2020214470,"视图的特点：
	虚表，是一个或几个基本表（或视图导出的表）
	只存放视图的定义，不存放视图对应的数据
	基表中的数据发生变化，从视图中查询出的数据也随之改变
基于视图的操作
	查询
	删除
	受限更新
定义基于该视图的新视图
3.6.1 定义视图
1）建立视图：	❖语句格式
		CREATE  VIEW<视图名>  [(<列名>  [，<列名>]...)]
		AS<子查询>
		[WITH  CHECK  OPTION]；
2）删除视图
		❖语句的格式：
			DROP  VIEW  <视图名>；
			▪该语句从数据字典中删除指定的视图定义
			▪如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除
			▪删除基表时，由该基表导出的所有视图定义都必须显式地使用DROP VIEW语句删除
3.6.2 查询视图
	❖用户角度：查询视图与查询基本表相同
	❖RDBMS实现视图查询的方法
		▪视图消解法（View Resolution）
			•进行有效性检查
			•转换成等价的对基本表的查询
			•执行修正后的查询
	❖视图消解法的局限
▪有些情况下，视图消解法不能生成正确查询。
3.6.3更新视图
与表的更新相似
	❖允许对行列子集视图进行更新
❖对其他类型视图的更新不同系统有不同限制
3.6.4视图的作用
	❖1. 视图能够简化用户的操作
	❖2. 视图使用户能以多种角度看待同一数据
	❖3. 视图对重构数据库提供了一定程度的逻辑独立性
	❖4. 视图能够对机密数据提供安全保护
	❖5. 适当的利用视图可以更清晰的表达查询
",3.6 视图,2022-11-01 10:51:26
2020214470,"计算机系统安全性
	为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。
三类计算机系统安全性问题
	技术安全类
	管理安全类
	政策法律类

",4.1计算机安全性概述,2022-11-15 12:37:42
2020214470,"非法使用数据库的情况:
	(1)编写合法程序绕过DBMS及其授权机制;
	(2)直接或编写应用程序执行非授权操作;
(3)通过多次合法查询数据库从中推导出一些保密数据.
数据库安全性控制的常用方法
	用户标识和鉴定
	存取控制
	视图
	审计
	密码存储

4.2.1 用户标识与鉴别

	• 用户标识与鉴别——系统提供的最外层安全保护措施
	• 用户标识
	• 口令——系统核对口令以鉴别用户身份
	• 用户名和口令易被窃取——每个用户预先约定好以恶搞计算过程或函数
	
4.2.2存取控制

	• 存取控制机制组成——定义用户权限、合法权限检查
	• 用户权限定义和合法权检查机制一起组成了DBMS的安全子系统
	• 常用存取控制方法——自主存取控制（DAC）——C2级，灵活
	
4.2.3自主存取控制方法:
	通过SQL的GRANT 语句和REVOKE语句实现;
	用户权限组成——数据对象、操作类型;
	定义用户存取权限：定义用户可以在哪些数据库对象上进行哪些类型的操作;
	定义存取权限称为授权;
4.2.4 授权与回收
	一、GRANT
	❖GRANT语句的一般格式：
		GRANT<权限>[,<权限>]…
		[ON<对象类型><对象名>]
		TO<用户>[,<用户>]…
		[WITHGRANTOPTION];
	❖语义：将对指定操作对象的指定操作权限授予指定的用户
	
	▪发出GRANT：
		➢DBA
		➢数据库对象创建者（即属主Owner）
		➢拥有该权限的用户
	▪按受权限的用户
		➢一个或多个具体用户
		➢PUBLIC（全体用户）
		
	❖WITH GRANT OPTION子句:
		▪指定：可以再授予
▪没有指定：不能传播;
	二、REVOKE
	❖授予的权限可以由DBA或其他授权者用REVOKE语句收回
	❖REVOKE语句的一般格式为：
		REVOKE<权限>[,<权限>]…
		[ON<对象类型><对象名>]
		FROM<用户>[,<用户>]...;

",4.2数据库安全性控制,2022-11-15 12:39:58
2020214470,"❖什么是审计
	▪审计日志（Audit Log）
		将用户对数据库的所有操作记录在上面
	▪DBA利用审计日志
		找出非法存取数据的人、时间和内容
	▪C2以上安全级别的DBMS必须具有
❖审计分为
	▪用户级审计
		➢针对自己创建的数据库表或视图进行审计
		➢记录所有用户对这些表或视图的一切成功和（或）不成功的访问要求以及各种类型的SQL操作
	▪系统级审计
		➢DBA设置
		➢监测成功或失败的登录要求
		➢监测GRANT和REVOKE操作以及其他数据库级权限下的操作
❖AUDIT语句：设置审计功能
❖NOAUDIT语句：取消审计功能

",4.4审计（Audit）,2022-11-15 12:40:48
2020214470,"❖数据加密
	▪防止数据库中数据在存储和传输中失密的有效手段
❖加密的基本思想
❖加密方法
	▪替换方法
	▪置换方法
	▪混合方法
❖DBMS中的数据加密
❖统计数据库
	▪允许用户查询聚集类型的信息（如合计、平均值等）
	▪不允许查询单个记录信息
❖统计数据库中特殊的安全性问题
	▪隐蔽的信息通道
	▪能从合法的查询中推导出不合法的信息

规则1：任何查询至少要涉及N(N足够大)个以上的记录
规则2：任意两个查询的相交数据项不能超过M个
规则3：任一用户的查询次数不能超过1+(N-2)/M

❖数据库安全机制的设计目标：
试图破坏安全的人所花费的代价>> 得到的利益",4.5-4.6,2022-12-04 01:29:10
2020214470,"数据库的完整性是指数据的正确性和相容性，数据的正确性是指数据是符合现实世界语义、反映当前实际状况的，数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。
数据的完整性是防止数据中存在不符合语义的数据，即防止数据库中存在不正确的数据。防范对象是不合语义的、不正确的数据，防止它们进入数据库。
数据的安全性是保护数据库防止恶意破坏和非法存取，防范对象是非法用户和非法操作，防止它们对数据库的非法存取。
数据库管理系统必须能够实现的功能：
（1）提供完整性约束条件的机制
（2）提供完整性检查的方法
（3）进行违约处理",第五章 数据库完整性概述——导入,2022-12-04 01:36:47
2020214470,"5.1实体完整性，主码唯一且非空。若主码不唯一或者为空，则拒绝插入或更新操作。
5.2参照完整性，外码。处理时，若可能破坏参照完整性，则拒绝执行操作。
5.3用户定义完整性，就是针对某一具体应用的数据必须满足的语义要求，插入元组或修改属性的值时，RDBMS检查元组上的约束条件是否被满足，如果不满足则操作被拒绝执行。
5.4完整性约束命名子句，	CONSTRAINT <完整性约束条件名>
	［PRIMARY KEY短语
	|FOREIGN KEY短语
	|CHECK短语］
5.7触发器，触发器时用户定义在关系表上的一类由事件驱动的特殊过程，是由服务器自动激活，可以进行更为复杂的检查和操作，具有更精细和更强大的数据控制能力。",第五章 数据库完整性概述,2022-12-04 02:05:09
2020214470,"关系数据库逻辑设计
	针对具体问题，如何构造一个适合于它的数据模式
	数据库逻辑设计的工具——关系数据库的规范化理论

一、概念回顾
关系
	关系逻辑上对应一张二维表，
关系模式
	关系的描述
关系数据库
	在一个给定的应用领域中，若干关系的集合
关系数据库的模式
	在各个域定义上关系模式的集合

二、关系模式的形式化定义
关系模式由五部分组成，即它是一个五元组：
	R(U,D,DOM,F)、
	R：关系名
	U：组成该关系的属性名集合
	D：属性组U中属性所来自的域
	DOM：属性向域的映像集合
	F：属性间数据的依赖关系集合
三、什么式数据依赖
1.完整性约束的表现形式
	限定属性取值范围：例如学生成绩必须在0-100之间
	定义属性值间的相互关连（主要体现在值的相等与否），这就是数据依赖，它是数据库模式设计的关键
2.数据依赖
	一个关系内部属性域属性之间的约束关系
	现实世界属性间相互联系的抽象
	数据内在的性质
	语义的体现
3.数据依赖的类型
	函数依赖
	多值依赖
	其他
四、关系模式的简化定义
	关系模式R（U,D,DOM,F）
		简化成一个三元组：R（U,F）
	当且仅当U上的一个关系r满足F时，r称为关系模式R（U,F）的一个关系
五、数据依赖对关系模式影响
1.不好的关系模式会出现：数据冗余太大，更新异常，插入异常，删除异常等问题，解决方案则是通过分解关系模式来消除其中不合适的数据依赖。",第六章 关系数据理论——问题的提出,2022-12-04 02:10:13
2020214470,"规范化理论正是用来改造关系模式，通过分解关系模式来消除其中不合适的饿数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。
",第六章 关系数据理论——规范化,2022-12-04 02:11:00
